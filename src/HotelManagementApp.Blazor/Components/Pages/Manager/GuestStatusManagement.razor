@page "/guest-status-management"
@using System.Text.Json
@using System.Text
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Manager,Admin")]

<PageTitle>Zarządzanie statusami gości</PageTitle>

<div class="container my-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h2">
                    <i class="bi bi-person-lines-fill"></i> Zarządzanie statusami gości
                </h1>
                <div class="d-flex gap-2">
                    <button class="btn btn-warning" @onclick="ShowAddVipModal">
                        <i class="bi bi-star-fill"></i> Dodaj VIP
                    </button>
                    <button class="btn btn-danger" @onclick="ShowAddBlacklistModal">
                        <i class="bi bi-person-x-fill"></i> Dodaj do czarnej listy
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Karty statystyk -->
    <div class="row mb-4">
        <div class="col-lg-3 col-md-6 mb-3">
            <div class="card bg-primary text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="card-title mb-1">Wszyscy goście</h6>
                            <h3 class="mb-0">@(allUsers?.Count ?? 0)</h3>
                        </div>
                        <div class="text-primary-emphasis">
                            <i class="bi bi-people display-4"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6 mb-3">
            <div class="card bg-warning text-dark">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="card-title mb-1">Goście VIP</h6>
                            <h3 class="mb-0">@(vipUsers?.Count ?? 0)</h3>
                        </div>
                        <div class="text-warning-emphasis">
                            <i class="bi bi-star-fill display-4"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6 mb-3">
            <div class="card bg-danger text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="card-title mb-1">Czarna lista</h6>
                            <h3 class="mb-0">@(blacklistedUsers?.Count ?? 0)</h3>
                        </div>
                        <div class="text-danger-emphasis">
                            <i class="bi bi-person-x-fill display-4"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6 mb-3">
            <div class="card bg-success text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="card-title mb-1">Zwykli goście</h6>
                            <h3 class="mb-0">@(regularGuests)</h3>
                        </div>
                        <div class="text-success-emphasis">
                            <i class="bi bi-person display-4"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Komunikaty -->
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="bi bi-check-circle-fill me-2"></i>
            @successMessage
            <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            @errorMessage
            <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
        </div>
    }

    <div class="row">
        <!-- Lista VIP -->
        <div class="col-lg-6 mb-4">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center bg-warning text-dark">
                    <h5 class="mb-0">
                        <i class="bi bi-star-fill"></i> Goście VIP
                    </h5>
                    <button class="btn btn-outline-dark btn-sm" @onclick="LoadVipUsers" disabled="@isLoadingVip">
                        @if (isLoadingVip)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        else
                        {
                            <i class="bi bi-arrow-clockwise"></i>
                        }
                        Odśwież
                    </button>
                </div>
                <div class="card-body">
                    @if (isLoadingVip)
                    {
                        <div class="text-center py-4">
                            <div class="spinner-border text-warning" role="status"></div>
                            <p class="mt-2 mb-0 text-muted">Ładowanie listy VIP...</p>
                        </div>
                    }
                    else if (vipUsers?.Any() == true)
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th>Użytkownik</th>
                                        <th>Email</th>
                                        <th>Status</th>
                                        <th>Akcje</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var user in vipUsers)
                                    {
                                        <tr>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    @if (!string.IsNullOrEmpty(user.ProfilePicture))
                                                    {
                                                        <img src="@user.ProfilePicture" class="rounded-circle me-2" 
                                                             style="width: 32px; height: 32px; object-fit: cover;" />
                                                    }
                                                    else
                                                    {
                                                        <div class="bg-warning rounded-circle d-flex align-items-center justify-content-center text-dark me-2" 
                                                             style="width: 32px; height: 32px; font-size: 0.8rem;">
                                                            <i class="bi bi-star-fill"></i>
                                                        </div>
                                                    }
                                                    <div>
                                                        <div class="fw-bold">@user.UserName</div>
                                                        <small class="text-muted">ID: @user.Id[..8]...</small>
                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                @user.Email
                                                @if (user.IsEmailConfirmed == true)
                                                {
                                                    <i class="bi bi-check-circle-fill text-success ms-1" title="Email zweryfikowany"></i>
                                                }
                                            </td>
                                            <td>
                                                <span class="badge bg-warning text-dark">
                                                    <i class="bi bi-star-fill me-1"></i>VIP
                                                </span>
                                            </td>
                                            <td>
                                                <button class="btn btn-outline-danger btn-sm" 
                                                        @onclick="() => ConfirmRemoveFromVip(user.Id, user.UserName)"
                                                        disabled="@(removingVipIds.Contains(user.Id))">
                                                    @if (removingVipIds.Contains(user.Id))
                                                    {
                                                        <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                                                    }
                                                    else
                                                    {
                                                        <i class="bi bi-star"></i>
                                                    }
                                                    Usuń VIP
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="bi bi-star text-muted display-4"></i>
                            <p class="mt-3 mb-0 text-muted">Brak gości VIP</p>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Czarna lista -->
        <div class="col-lg-6 mb-4">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center bg-danger text-white">
                    <h5 class="mb-0">
                        <i class="bi bi-person-x-fill"></i> Czarna lista
                    </h5>
                    <button class="btn btn-outline-light btn-sm" @onclick="LoadBlacklistedUsers" disabled="@isLoadingBlacklist">
                        @if (isLoadingBlacklist)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        else
                        {
                            <i class="bi bi-arrow-clockwise"></i>
                        }
                        Odśwież
                    </button>
                </div>
                <div class="card-body">
                    @if (isLoadingBlacklist)
                    {
                        <div class="text-center py-4">
                            <div class="spinner-border text-danger" role="status"></div>
                            <p class="mt-2 mb-0 text-muted">Ładowanie czarnej listy...</p>
                        </div>
                    }
                    else if (blacklistedUsers?.Any() == true)
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th>Użytkownik</th>
                                        <th>Email</th>
                                        <th>Status</th>
                                        <th>Akcje</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var user in blacklistedUsers)
                                    {
                                        <tr class="table-danger">
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    @if (!string.IsNullOrEmpty(user.ProfilePicture))
                                                    {
                                                        <img src="@user.ProfilePicture" class="rounded-circle me-2" 
                                                             style="width: 32px; height: 32px; object-fit: cover; filter: grayscale(100%);" />
                                                    }
                                                    else
                                                    {
                                                        <div class="bg-danger rounded-circle d-flex align-items-center justify-content-center text-white me-2" 
                                                             style="width: 32px; height: 32px; font-size: 0.8rem;">
                                                            <i class="bi bi-person-x-fill"></i>
                                                        </div>
                                                    }
                                                    <div>
                                                        <div class="fw-bold">@user.UserName</div>
                                                        <small class="text-muted">ID: @user.Id[..8]...</small>
                                                    </div>
                                                </div>
                                            </td>
                                            <td>@user.Email</td>
                                            <td>
                                                <span class="badge bg-danger">
                                                    <i class="bi bi-person-x-fill me-1"></i>Zablokowany
                                                </span>
                                            </td>
                                            <td>
                                                <button class="btn btn-outline-success btn-sm" 
                                                        @onclick="() => ConfirmRemoveFromBlacklist(user.Id, user.UserName)"
                                                        disabled="@(removingBlacklistIds.Contains(user.Id))">
                                                    @if (removingBlacklistIds.Contains(user.Id))
                                                    {
                                                        <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                                                    }
                                                    else
                                                    {
                                                        <i class="bi bi-person-check"></i>
                                                    }
                                                    Odblokuj
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="bi bi-person-check text-muted display-4"></i>
                            <p class="mt-3 mb-0 text-muted">Brak zablokowanych użytkowników</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Wszyscy użytkownicy -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="bi bi-people"></i> Wszyscy użytkownicy
                    </h5>
                    <button class="btn btn-outline-secondary btn-sm" @onclick="LoadAllUsers" disabled="@isLoadingUsers">
                        @if (isLoadingUsers)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        else
                        {
                            <i class="bi bi-arrow-clockwise"></i>
                        }
                        Odśwież
                    </button>
                </div>
                <div class="card-body">
                    @if (isLoadingUsers)
                    {
                        <div class="text-center py-4">
                            <div class="spinner-border text-primary" role="status"></div>
                            <p class="mt-2 mb-0 text-muted">Ładowanie użytkowników...</p>
                        </div>
                    }
                    else if (filteredUsers?.Any() == true)
                    {
                        <div class="mb-3 row">
                            <div class="col-md-6">
                                <input type="text" class="form-control" 
                                       placeholder="Szukaj użytkownika..." 
                                       value="@userSearchText"
                                       @oninput="OnUserSearchChanged" />
                            </div>
                            <div class="col-md-6">
                                <select class="form-select" value="@statusFilter" @onchange="OnStatusFilterChanged">
                                    <option value="">Wszystkie statusy</option>
                                    <option value="VIP">Tylko VIP</option>
                                    <option value="Blacklisted">Tylko zablkowani</option>
                                    <option value="Regular">Tylko zwykli</option>
                                </select>
                            </div>
                        </div>
                        
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th>Użytkownik</th>
                                        <th>Email</th>
                                        <th>Role</th>
                                        <th>Status</th>
                                        <th>Akcje</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var user in filteredUsers.Take(20))
                                    {
                                        <tr class="@(IsBlacklisted(user.Id) ? "table-danger" : "")">
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    @if (!string.IsNullOrEmpty(user.ProfilePicture))
                                                    {
                                                        <img src="@user.ProfilePicture" class="rounded-circle me-2" 
                                                             style="width: 32px; height: 32px; object-fit: cover; @(IsBlacklisted(user.Id) ? "filter: grayscale(100%);" : "")" />
                                                    }
                                                    else
                                                    {
                                                        <div class="@GetUserAvatarClass(user.Id) rounded-circle d-flex align-items-center justify-content-center me-2" 
                                                             style="width: 32px; height: 32px; font-size: 0.8rem;">
                                                            <i class="@GetUserStatusIcon(user.Id)"></i>
                                                        </div>
                                                    }
                                                    <div>
                                                        <div class="fw-bold">@user.UserName</div>
                                                        <small class="text-muted">ID: @user.Id[..8]...</small>
                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                @user.Email
                                                @if (user.IsEmailConfirmed == true)
                                                {
                                                    <i class="bi bi-check-circle-fill text-success ms-1" title="Email zweryfikowany"></i>
                                                }
                                            </td>
                                            <td>
                                                @if (user.Roles?.Any() == true)
                                                {
                                                    @foreach (var role in user.Roles)
                                                    {
                                                        <span class="badge @GetRoleBadgeClass(role) me-1">@role</span>
                                                    }
                                                }
                                            </td>
                                            <td>
                                                @if (IsVip(user.Id))
                                                {
                                                    <span class="badge bg-warning text-dark">
                                                        <i class="bi bi-star-fill me-1"></i>VIP
                                                    </span>
                                                }
                                                else if (IsBlacklisted(user.Id))
                                                {
                                                    <span class="badge bg-danger">
                                                        <i class="bi bi-person-x-fill me-1"></i>Zablokowany
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-success">
                                                        <i class="bi bi-person me-1"></i>Zwykły
                                                    </span>
                                                }
                                            </td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    @if (!IsVip(user.Id) && !IsBlacklisted(user.Id))
                                                    {
                                                        <button class="btn btn-outline-warning btn-sm" 
                                                                @onclick="() => AddToVip(user.Id, user.UserName)"
                                                                disabled="@(addingVipIds.Contains(user.Id))">
                                                            @if (addingVipIds.Contains(user.Id))
                                                            {
                                                                <span class="spinner-border spinner-border-sm" role="status"></span>
                                                            }
                                                            else
                                                            {
                                                                <i class="bi bi-star-fill"></i>
                                                            }
                                                        </button>
                                                    }
                                                    
                                                    @if (!IsBlacklisted(user.Id))
                                                    {
                                                        <button class="btn btn-outline-danger btn-sm" 
                                                                @onclick="() => AddToBlacklist(user.Id, user.UserName)"
                                                                disabled="@(addingBlacklistIds.Contains(user.Id))">
                                                            @if (addingBlacklistIds.Contains(user.Id))
                                                            {
                                                                <span class="spinner-border spinner-border-sm" role="status"></span>
                                                            }
                                                            else
                                                            {
                                                                <i class="bi bi-person-x-fill"></i>
                                                            }
                                                        </button>
                                                    }
                                                    
                                                    @if (IsBlacklisted(user.Id))
                                                    {
                                                        <button class="btn btn-outline-success btn-sm" 
                                                                @onclick="() => RemoveFromBlacklist(user.Id, user.UserName)"
                                                                disabled="@(removingBlacklistIds.Contains(user.Id))">
                                                            @if (removingBlacklistIds.Contains(user.Id))
                                                            {
                                                                <span class="spinner-border spinner-border-sm" role="status"></span>
                                                            }
                                                            else
                                                            {
                                                                <i class="bi bi-person-check"></i>
                                                            }
                                                        </button>
                                                    }
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        
                        @if ((filteredUsers?.Count ?? 0) > 20)
                        {
                            <div class="text-center mt-3">
                                <small class="text-muted">
                                    Wyświetlono 20 z @filteredUsers.Count użytkowników
                                </small>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="bi bi-people text-muted display-4"></i>
                            <p class="mt-3 mb-0 text-muted">Brak użytkowników</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal dodawania VIP -->
@if (showAddVipModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-warning text-dark">
                    <h5 class="modal-title">
                        <i class="bi bi-star-fill"></i> Dodaj do VIP
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseAddVipModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Szukaj użytkownika:</label>
                        <input type="text" class="form-control" 
                               placeholder="Wprowadź nazwę użytkownika lub email..." 
                               value="@modalSearchText"
                               @oninput="OnModalSearchChanged" />
                    </div>
                    
                    @if (modalFilteredUsers?.Any() == true)
                    {
                        <div class="list-group" style="max-height: 400px; overflow-y: auto;">
                            @foreach (var user in modalFilteredUsers.Take(10))
                            {
                                <div class="list-group-item d-flex justify-content-between align-items-center">
                                    <div class="d-flex align-items-center">
                                        @if (!string.IsNullOrEmpty(user.ProfilePicture))
                                        {
                                            <img src="@user.ProfilePicture" class="rounded-circle me-3" 
                                                 style="width: 40px; height: 40px; object-fit: cover;" />
                                        }
                                        else
                                        {
                                            <div class="bg-secondary rounded-circle d-flex align-items-center justify-content-center text-white me-3" 
                                                 style="width: 40px; height: 40px;">
                                                <i class="bi bi-person"></i>
                                            </div>
                                        }
                                        <div>
                                            <h6 class="mb-1">@user.UserName</h6>
                                            <p class="mb-1 text-muted">@user.Email</p>
                                            <div>
                                                @if (user.Roles?.Any() == true)
                                                {
                                                    @foreach (var role in user.Roles)
                                                    {
                                                        <span class="badge @GetRoleBadgeClass(role) me-1">@role</span>
                                                    }
                                                }
                                            </div>
                                        </div>
                                    </div>
                                    <button class="btn btn-warning" @onclick="() => AddToVipFromModal(user.Id, user.UserName)"
                                            disabled="@(addingVipIds.Contains(user.Id) || IsVip(user.Id))">
                                        @if (addingVipIds.Contains(user.Id))
                                        {
                                            <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                                        }
                                        @if (IsVip(user.Id))
                                        {
                                            <text><i class="bi bi-star-fill"></i> Już VIP</text>
                                        }
                                        else
                                        {
                                            <text><i class="bi bi-star-fill"></i> Dodaj VIP</text>
                                        }
                                    </button>
                                </div>
                            }
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(modalSearchText))
                    {
                        <div class="text-center py-4">
                            <i class="bi bi-search text-muted display-4"></i>
                            <p class="mt-3 mb-0 text-muted">Nie znaleziono użytkowników</p>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="bi bi-star text-muted display-4"></i>
                            <p class="mt-3 mb-0 text-muted">Wprowadź nazwę użytkownika lub email</p>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseAddVipModal">Zamknij</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal dodawania do czarnej listy -->
@if (showAddBlacklistModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">
                        <i class="bi bi-person-x-fill"></i> Dodaj do czarnej listy
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseAddBlacklistModal"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-warning">
                        <i class="bi bi-exclamation-triangle"></i>
                        <strong>Uwaga!</strong> Dodanie użytkownika do czarnej listy ograniczy jego dostęp do systemu.
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Szukaj użytkownika:</label>
                        <input type="text" class="form-control" 
                               placeholder="Wprowadź nazwę użytkownika lub email..." 
                               value="@modalSearchText"
                               @oninput="OnModalSearchChanged" />
                    </div>
                    
                    @if (modalFilteredUsers?.Any() == true)
                    {
                        <div class="list-group" style="max-height: 400px; overflow-y: auto;">
                            @foreach (var user in modalFilteredUsers.Take(10))
                            {
                                <div class="list-group-item d-flex justify-content-between align-items-center">
                                    <div class="d-flex align-items-center">
                                        @if (!string.IsNullOrEmpty(user.ProfilePicture))
                                        {
                                            <img src="@user.ProfilePicture" class="rounded-circle me-3" 
                                                 style="width: 40px; height: 40px; object-fit: cover;" />
                                        }
                                        else
                                        {
                                            <div class="bg-secondary rounded-circle d-flex align-items-center justify-content-center text-white me-3" 
                                                 style="width: 40px; height: 40px;">
                                                <i class="bi bi-person"></i>
                                            </div>
                                        }
                                        <div>
                                            <h6 class="mb-1">@user.UserName</h6>
                                            <p class="mb-1 text-muted">@user.Email</p>
                                        </div>
                                    </div>
                                    <button class="btn btn-danger" @onclick="() => AddToBlacklistFromModal(user.Id, user.UserName)"
                                            disabled="@(addingBlacklistIds.Contains(user.Id) || IsBlacklisted(user.Id))">
                                        @if (addingBlacklistIds.Contains(user.Id))
                                        {
                                            <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                                        }
                                        @if (IsBlacklisted(user.Id))
                                        {
                                            <text><i class="bi bi-person-x-fill"></i> Już zablokowany</text>
                                        }
                                        else
                                        {
                                            <text><i class="bi bi-person-x-fill"></i> Zablokuj</text>
                                        }
                                    </button>
                                </div>
                            }
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(modalSearchText))
                    {
                        <div class="text-center py-4">
                            <i class="bi bi-search text-muted display-4"></i>
                            <p class="mt-3 mb-0 text-muted">Nie znaleziono użytkowników</p>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="bi bi-person-x text-muted display-4"></i>
                            <p class="mt-3 mb-0 text-muted">Wprowadź nazwę użytkownika lub email</p>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseAddBlacklistModal">Zamknij</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal potwierdzenia usunięcia VIP -->
@if (showRemoveVipModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-warning text-dark">
                    <h5 class="modal-title">
                        <i class="bi bi-exclamation-triangle"></i> Potwierdzenie usunięcia VIP
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseRemoveVipModal"></button>
                </div>
                <div class="modal-body">
                    <p>Czy na pewno chcesz usunąć status VIP dla użytkownika:</p>
                    <div class="bg-light p-3 rounded">
                        <strong>@userToRemoveName</strong>
                    </div>
                    <p class="mt-3 text-muted">Użytkownik straci wszystkie korzyści VIP.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseRemoveVipModal">Anuluj</button>
                    <button type="button" class="btn btn-warning" @onclick="RemoveFromVip" disabled="@isRemovingUser">
                        @if (isRemovingUser)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        <i class="bi bi-star"></i> Usuń VIP
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal potwierdzenia usunięcia z czarnej listy -->
@if (showRemoveBlacklistModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-success text-white">
                    <h5 class="modal-title">
                        <i class="bi bi-person-check"></i> Potwierdzenie odblokowania
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseRemoveBlacklistModal"></button>
                </div>
                <div class="modal-body">
                    <p>Czy na pewno chcesz odblokować użytkownika:</p>
                    <div class="bg-light p-3 rounded">
                        <strong>@userToRemoveName</strong>
                    </div>
                    <p class="mt-3 text-muted">Użytkownik odzyska pełny dostęp do systemu.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseRemoveBlacklistModal">Anuluj</button>
                    <button type="button" class="btn btn-success" @onclick="RemoveFromBlacklist" disabled="@isRemovingUser">
                        @if (isRemovingUser)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        <i class="bi bi-person-check"></i> Odblokuj
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<User>? allUsers;
    private List<User>? vipUsers;
    private List<User>? blacklistedUsers;
    private List<User>? filteredUsers;
    private List<User>? modalFilteredUsers;
    
    private bool isLoadingUsers = true;
    private bool isLoadingVip = true;
    private bool isLoadingBlacklist = true;
    private bool isRemovingUser = false;
    private bool showAddVipModal = false;
    private bool showAddBlacklistModal = false;
    private bool showRemoveVipModal = false;
    private bool showRemoveBlacklistModal = false;
    
    private HashSet<string> addingVipIds = new();
    private HashSet<string> removingVipIds = new();
    private HashSet<string> addingBlacklistIds = new();
    private HashSet<string> removingBlacklistIds = new();
    
    private string userSearchText = "";
    private string statusFilter = "";
    private string modalSearchText = "";
    private string userToRemoveId = "";
    private string userToRemoveName = "";
    private string successMessage = "";
    private string errorMessage = "";

    private int regularGuests => (allUsers?.Count ?? 0) - (vipUsers?.Count ?? 0) - (blacklistedUsers?.Count ?? 0);

    protected override async Task OnInitializedAsync()
    {
        await LoadInitialData();
    }

    private async Task LoadInitialData()
    {
        await Task.Delay(100);
        await Task.WhenAll(LoadAllUsers(), LoadVipUsers(), LoadBlacklistedUsers());
    }

    // ✅ NAPRAWIONE WYSZUKIWANIE
    private async Task OnUserSearchChanged(ChangeEventArgs e)
    {
        userSearchText = e.Value?.ToString() ?? "";
        FilterUsers();
        await Task.CompletedTask;
    }

    private async Task OnStatusFilterChanged(ChangeEventArgs e)
    {
        statusFilter = e.Value?.ToString() ?? "";
        FilterUsers();
        await Task.CompletedTask;
    }

    private async Task OnModalSearchChanged(ChangeEventArgs e)
    {
        modalSearchText = e.Value?.ToString() ?? "";
        FilterModalUsers();
        await Task.CompletedTask;
    }

    private async Task LoadAllUsers()
    {
        isLoadingUsers = true;
        try
        {
            var response = await Http.GetAsync("api/guest/all");
            
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                allUsers = JsonSerializer.Deserialize<List<User>>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
                
                FilterUsers();
            }
            else
            {
                await HandleApiError(response, "Błąd podczas ładowania listy użytkowników");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas ładowania użytkowników: {ex.Message}");
            errorMessage = "Wystąpił błąd podczas ładowania listy użytkowników.";
        }
        finally
        {
            isLoadingUsers = false;
            StateHasChanged();
        }
    }

    private async Task LoadVipUsers()
    {
        isLoadingVip = true;
        try
        {
            var response = await Http.GetAsync("api/vip/all");
            
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                vipUsers = JsonSerializer.Deserialize<List<User>>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
            }
            else
            {
                await HandleApiError(response, "Błąd podczas ładowania listy VIP");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas ładowania VIP: {ex.Message}");
            errorMessage = "Wystąpił błąd podczas ładowania listy VIP.";
        }
        finally
        {
            isLoadingVip = false;
            StateHasChanged();
        }
    }

    private async Task LoadBlacklistedUsers()
    {
        isLoadingBlacklist = true;
        try
        {
            var response = await Http.GetAsync("api/blacklist/all");
            
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                blacklistedUsers = JsonSerializer.Deserialize<List<User>>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
            }
            else
            {
                await HandleApiError(response, "Błąd podczas ładowania czarnej listy");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas ładowania czarnej listy: {ex.Message}");
            errorMessage = "Wystąpił błąd podczas ładowania czarnej listy.";
        }
        finally
        {
            isLoadingBlacklist = false;
            StateHasChanged();
        }
    }

    // ✅ NAPRAWIONE FILTROWANIE
    private void FilterUsers()
    {
        if (allUsers == null)
        {
            filteredUsers = new List<User>();
            return;
        }
        
        var users = allUsers.AsEnumerable();
        
        // Filtrowanie po tekście
        if (!string.IsNullOrWhiteSpace(userSearchText))
        {
            var searchLower = userSearchText.ToLower().Trim();
            users = users.Where(u => 
                (!string.IsNullOrEmpty(u.UserName) && u.UserName.ToLower().Contains(searchLower)) ||
                (!string.IsNullOrEmpty(u.Email) && u.Email.ToLower().Contains(searchLower))
            );
        }
        
        // Filtrowanie po statusie
        if (!string.IsNullOrEmpty(statusFilter))
        {
            users = statusFilter switch
            {
                "VIP" => users.Where(u => IsVip(u.Id)),
                "Blacklisted" => users.Where(u => IsBlacklisted(u.Id)),
                "Regular" => users.Where(u => !IsVip(u.Id) && !IsBlacklisted(u.Id)),
                _ => users
            };
        }
        
        filteredUsers = users.ToList();
        StateHasChanged();
    }

    // ✅ NAPRAWIONE FILTROWANIE MODALI
    private void FilterModalUsers()
    {
        if (allUsers == null)
        {
            modalFilteredUsers = new List<User>();
            return;
        }
        
        if (string.IsNullOrWhiteSpace(modalSearchText))
        {
            modalFilteredUsers = new List<User>();
        }
        else
        {
            var searchLower = modalSearchText.ToLower().Trim();
            modalFilteredUsers = allUsers.Where(u => 
                (!string.IsNullOrEmpty(u.UserName) && u.UserName.ToLower().Contains(searchLower)) ||
                (!string.IsNullOrEmpty(u.Email) && u.Email.ToLower().Contains(searchLower))
            ).ToList();
        }
        
        StateHasChanged();
    }

    private bool IsVip(string userId) => vipUsers?.Any(v => v.Id == userId) == true;
    private bool IsBlacklisted(string userId) => blacklistedUsers?.Any(b => b.Id == userId) == true;

    private string GetUserAvatarClass(string userId)
    {
        if (IsVip(userId)) return "bg-warning text-dark";
        if (IsBlacklisted(userId)) return "bg-danger text-white";
        return "bg-secondary text-white";
    }

    private string GetUserStatusIcon(string userId)
    {
        if (IsVip(userId)) return "bi bi-star-fill";
        if (IsBlacklisted(userId)) return "bi bi-person-x-fill";
        return "bi bi-person";
    }

    private string GetRoleBadgeClass(string role)
    {
        return role switch
        {
            "Admin" => "bg-danger",
            "Manager" => "bg-primary",
            "Staff" => "bg-success",
            "VIP" => "bg-warning text-dark",
            "Guest" => "bg-info",
            _ => "bg-secondary"
        };
    }

    // VIP Methods
    private void ShowAddVipModal()
    {
        modalSearchText = "";
        modalFilteredUsers = new List<User>();
        showAddVipModal = true;
    }

    private void CloseAddVipModal()
    {
        showAddVipModal = false;
        modalSearchText = "";
        modalFilteredUsers = new List<User>();
    }

    private async Task AddToVip(string userId, string userName)
    {
        if (addingVipIds.Contains(userId)) return; // Zapobiega duplikatom
        
        addingVipIds.Add(userId);
        try
        {
            var response = await Http.PatchAsync($"api/vip/add/{userId}", null);
            
            if (response.IsSuccessStatusCode)
            {
                successMessage = $"Użytkownik {userName} został dodany do VIP.";
                // ✅ NAPRAWIONE ODŚWIEŻANIE
                await RefreshAllLists();
            }
            else
            {
                await HandleApiError(response, $"Błąd podczas dodawania {userName} do VIP");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas dodawania do VIP: {ex.Message}");
            errorMessage = $"Wystąpił błąd podczas dodawania {userName} do VIP.";
        }
        finally
        {
            addingVipIds.Remove(userId);
            StateHasChanged();
        }
    }

    private async Task AddToVipFromModal(string userId, string userName)
    {
        await AddToVip(userId, userName);
        CloseAddVipModal();
    }

    private void ConfirmRemoveFromVip(string userId, string userName)
    {
        userToRemoveId = userId;
        userToRemoveName = userName;
        showRemoveVipModal = true;
    }

    private void CloseRemoveVipModal()
    {
        showRemoveVipModal = false;
        userToRemoveId = "";
        userToRemoveName = "";
    }

    private async Task RemoveFromVip()
    {
        if (string.IsNullOrEmpty(userToRemoveId)) return;

        isRemovingUser = true;
        removingVipIds.Add(userToRemoveId);
        
        try
        {
            var response = await Http.PatchAsync($"api/vip/remove/{userToRemoveId}", null);
            
            if (response.IsSuccessStatusCode)
            {
                successMessage = $"Użytkownik {userToRemoveName} został usunięty z VIP.";
                await RefreshAllLists();
                CloseRemoveVipModal();
            }
            else
            {
                await HandleApiError(response, $"Błąd podczas usuwania {userToRemoveName} z VIP");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas usuwania z VIP: {ex.Message}");
            errorMessage = $"Wystąpił błąd podczas usuwania {userToRemoveName} z VIP.";
        }
        finally
        {
            isRemovingUser = false;
            removingVipIds.Remove(userToRemoveId);
            StateHasChanged();
        }
    }

    // Blacklist Methods
    private void ShowAddBlacklistModal()
    {
        modalSearchText = "";
        modalFilteredUsers = new List<User>();
        showAddBlacklistModal = true;
    }

    private void CloseAddBlacklistModal()
    {
        showAddBlacklistModal = false;
        modalSearchText = "";
        modalFilteredUsers = new List<User>();
    }

    private async Task AddToBlacklist(string userId, string userName)
    {
        if (addingBlacklistIds.Contains(userId)) return;
        
        addingBlacklistIds.Add(userId);
        try
        {
            var response = await Http.PatchAsync($"api/blacklist/add/{userId}", null);
            
            if (response.IsSuccessStatusCode)
            {
                successMessage = $"Użytkownik {userName} został dodany do czarnej listy.";
                await RefreshAllLists();
            }
            else
            {
                await HandleApiError(response, $"Błąd podczas dodawania {userName} do czarnej listy");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas dodawania do czarnej listy: {ex.Message}");
            errorMessage = $"Wystąpił błąd podczas dodawania {userName} do czarnej listy.";
        }
        finally
        {
            addingBlacklistIds.Remove(userId);
            StateHasChanged();
        }
    }

    private async Task AddToBlacklistFromModal(string userId, string userName)
    {
        await AddToBlacklist(userId, userName);
        CloseAddBlacklistModal();
    }

    private void ConfirmRemoveFromBlacklist(string userId, string userName)
    {
        userToRemoveId = userId;
        userToRemoveName = userName;
        showRemoveBlacklistModal = true;
    }

    private void CloseRemoveBlacklistModal()
    {
        showRemoveBlacklistModal = false;
        userToRemoveId = "";
        userToRemoveName = "";
    }

    private async Task RemoveFromBlacklist(string userId, string userName)
    {
        if (removingBlacklistIds.Contains(userId)) return;
        
        isRemovingUser = true;
        removingBlacklistIds.Add(userId);
        
        try
        {
            var response = await Http.PatchAsync($"api/blacklist/remove/{userId}", null);
            
            if (response.IsSuccessStatusCode)
            {
                successMessage = $"Użytkownik {userName} został usunięty z czarnej listy.";
                await RefreshAllLists();
                CloseRemoveBlacklistModal();
            }
            else
            {
                await HandleApiError(response, $"Błąd podczas usuwania {userName} z czarnej listy");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas usuwania z czarnej listy: {ex.Message}");
            errorMessage = $"Wystąpił błąd podczas usuwania {userName} z czarnej listy.";
        }
        finally
        {
            isRemovingUser = false;
            removingBlacklistIds.Remove(userId);
            StateHasChanged();
        }
    }

    private async Task RemoveFromBlacklist()
    {
        await RemoveFromBlacklist(userToRemoveId, userToRemoveName);
    }

    // ✅ NAPRAWIONE ODŚWIEŻANIE - czyści wszystkie loading stany
    private async Task RefreshAllLists()
    {
        // Wyczyść wszystkie loading stany
        addingVipIds.Clear();
        removingVipIds.Clear();
        addingBlacklistIds.Clear();
        removingBlacklistIds.Clear();
        
        await Task.WhenAll(LoadVipUsers(), LoadBlacklistedUsers(), LoadAllUsers());
    }

    private async Task HandleApiError(HttpResponseMessage response, string defaultMessage)
    {
        string specificMessage = response.StatusCode switch
        {
            System.Net.HttpStatusCode.Unauthorized => "Brak autoryzacji. Zaloguj się ponownie.",
            System.Net.HttpStatusCode.Forbidden => "Nie masz uprawnień do wykonania tej operacji.",
            System.Net.HttpStatusCode.NotFound => "Nie znaleziono użytkownika.",
            System.Net.HttpStatusCode.Conflict => "Użytkownik już ma odpowiedni status lub nie można zmienić statusu.",
            _ => $"{defaultMessage} (kod: {(int)response.StatusCode})"
        };
        
        errorMessage = specificMessage;
        
        var errorContent = await response.Content.ReadAsStringAsync();
        Console.WriteLine($"API Error ({response.StatusCode}): {errorContent}");
    }

    public class User
    {
        public string Id { get; set; } = string.Empty;
        public string UserName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public List<string> Roles { get; set; } = new();
        public string? ProfilePicture { get; set; }
        public bool? IsEmailConfirmed { get; set; }
    }
}