@page "/loyalty-management"
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Text
@using System.Net.Http.Json
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Admin,Manager")]

<PageTitle>Program lojalnościowy - zarządzanie</PageTitle>

<div class="container my-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h2">
                    <i class="bi bi-award"></i> Program lojalnościowy - zarządzanie
                </h1>
                <button class="btn btn-primary" @onclick="ShowCreateRewardModal">
                    <i class="bi bi-plus-circle"></i> Dodaj nagrodę
                </button>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-12 mb-4">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="bi bi-gift"></i> Dostępne nagrody
                    </h5>
                    <button class="btn btn-outline-secondary btn-sm" @onclick="LoadRewards" disabled="@isLoadingRewards">
                        @if (isLoadingRewards)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        else
                        {
                            <i class="bi bi-arrow-clockwise"></i>
                        }
                        Odśwież
                    </button>
                </div>
                <div class="card-body">
                    @if (isLoadingRewards)
                    {
                        <div class="text-center py-4">
                            <div class="spinner-border text-primary" role="status"></div>
                            <p class="mt-2 mb-0 text-muted">Ładowanie nagród...</p>
                        </div>
                    }
                    else if (rewards?.Any() == true)
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th>ID</th>
                                        <th>Nazwa nagrody</th>
                                        <th>Koszt punktów</th>
                                        <th>Opis</th>
                                        <th>Akcje</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var reward in rewards.OrderBy(r => r.Id))
                                    {
                                        <tr>
                                            <td><strong>#@reward.Id</strong></td>
                                            <td>@reward.Name</td>
                                            <td>
                                                <span class="badge bg-warning text-dark">
                                                    @reward.PointsCost <i class="bi bi-star-fill"></i>
                                                </span>
                                            </td>
                                            <td>
                                                <span class="text-truncate d-inline-block" style="max-width: 200px;" title="@reward.Description">
                                                    @reward.Description
                                                </span>
                                            </td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <button class="btn btn-outline-primary btn-sm" @onclick="() => ShowEditRewardModal(reward)">
                                                        <i class="bi bi-pencil"></i> Edytuj
                                                    </button>
                                                    <button class="btn btn-outline-danger btn-sm" @onclick="() => ConfirmDeleteReward(reward.Id, reward.Name)">
                                                        <i class="bi bi-trash"></i> Usuń
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="bi bi-gift text-muted display-4"></i>
                            <p class="mt-3 mb-0 text-muted">Brak dostępnych nagród</p>
                            <button class="btn btn-primary mt-2" @onclick="ShowCreateRewardModal">
                                <i class="bi bi-plus-circle"></i> Dodaj pierwszą nagrodę
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@if (showRewardModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi @(editingReward != null ? "bi-pencil" : "bi-plus-circle")"></i>
                        @(editingReward != null ? "Edytuj nagrodę" : "Dodaj nagrodę")
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseRewardModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="rewardForm" OnValidSubmit="SaveReward">
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label for="rewardName" class="form-label">Nazwa nagrody:</label>
                            <InputText id="rewardName" class="form-control" @bind-Value="rewardForm.RewardName" placeholder="np. Darmowy drink, Upgrade pokoju" />
                            <ValidationMessage For="() => rewardForm.RewardName" />
                            <div class="form-text">Wprowadź atrakcyjną nazwę nagrody.</div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="pointsRequired" class="form-label">Koszt w punktach:</label>
                            <InputNumber id="pointsRequired" class="form-control" @bind-Value="rewardForm.PointsRequired" placeholder="np. 100" />
                            <ValidationMessage For="() => rewardForm.PointsRequired" />
                            <div class="form-text">Ile punktów kosztuje ta nagroda (min. 1).</div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="description" class="form-label">Opis:</label>
                            <InputTextArea id="description" class="form-control" rows="3" @bind-Value="rewardForm.Description" placeholder="Opisz szczegóły nagrody, warunki wykorzystania itp." />
                            <ValidationMessage For="() => rewardForm.Description" />
                            <div class="form-text">Szczegółowy opis nagrody i warunków jej wykorzystania.</div>
                        </div>
                         <button type="submit" class="visually-hidden">Submit</button>
                    </EditForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseRewardModal">Anuluj</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveReward" 
                            disabled="@isSubmitting">
                        @if (isSubmitting)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span> <span>Przetwarzanie...</span>
                        }
                        else
                        {
                            <i class="bi @(editingReward != null ? "bi-check-circle" : "bi-plus-circle")"></i>
                            <span>@(editingReward != null ? "Zaktualizuj" : "Dodaj") nagrodę</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@if (showDeleteModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">
                        <i class="bi bi-exclamation-triangle-fill"></i> Potwierdzenie usunięcia
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseDeleteModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-warning d-flex align-items-center">
                        <i class="bi bi-exclamation-triangle-fill flex-shrink-0 me-2"></i>
                        <div>
                           <strong>Uwaga!</strong> Ta operacja jest nieodwracalna.
                        </div>
                    </div>
                    <p>Czy na pewno chcesz usunąć nagrodę:</p>
                    <div class="bg-light p-3 rounded border">
                        <strong>@rewardToDeleteName</strong>
                    </div>
                    <p class="mt-3 text-muted small">Po usunięciu goście nie będą mogli już wymienić punktów na tę nagrodę.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal" disabled="@isDeletingReward">Anuluj</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteReward" disabled="@isDeletingReward">
                        @if (isDeletingReward)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span> <span>Usuwanie...</span>
                        }
                        else
                        {
                            <i class="bi bi-trash-fill"></i> <span>Usuń</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Reward>? rewards;
    private Reward? editingReward;
    private RewardFormModel rewardForm = new RewardFormModel();

    private bool showRewardModal = false;
    private bool showDeleteModal = false;
    private int rewardToDeleteId;
    private string? rewardToDeleteName;

    private bool isLoadingRewards = true;
    private bool isSubmitting = false;
    private bool isDeletingReward = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadRewards();
    }

    private async Task LoadRewards()
    {
        isLoadingRewards = true;
        try
        {
            var response = await Http.GetAsync("api/loyalty-points/rewards");
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                rewards = JsonSerializer.Deserialize<List<Reward>>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            }
            else
            {
                rewards = new List<Reward>();
                await JSRuntime.InvokeVoidAsync("alert", $"Błąd podczas ładowania nagród: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            rewards = new List<Reward>();
            await JSRuntime.InvokeVoidAsync("alert", $"Wyjątek podczas ładowania nagród: {ex.Message}");
            Console.WriteLine($"Error loading rewards: {ex}");
        }
        finally
        {
            isLoadingRewards = false;
            StateHasChanged();
        }
    }

    private void ShowCreateRewardModal()
    {
        editingReward = null;
        rewardForm = new RewardFormModel();
        showRewardModal = true;
        isSubmitting = false;
    }

    private void ShowEditRewardModal(Reward rewardToEdit)
    {
        editingReward = rewardToEdit;
        rewardForm = new RewardFormModel
        {
            RewardName = rewardToEdit.Name,
            PointsRequired = rewardToEdit.PointsCost,
            Description = rewardToEdit.Description
        };
        showRewardModal = true;
        isSubmitting = false;
    }

    private void CloseRewardModal()
    {
        showRewardModal = false;
        editingReward = null;
        rewardForm = new RewardFormModel();
    }

    private async Task SaveReward()
    {
        if (string.IsNullOrWhiteSpace(rewardForm.RewardName) || 
            rewardForm.PointsRequired <= 0 || 
            string.IsNullOrWhiteSpace(rewardForm.Description))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Wszystkie pola są wymagane, a koszt w punktach musi być dodatni.");
            return;
        }

        isSubmitting = true;
        StateHasChanged();

        HttpResponseMessage? response = null;
        string apiUrl = "api/loyalty-points/rewards";

        try
        {
            if (editingReward != null)
            {
                response = await Http.PutAsJsonAsync($"{apiUrl}/{editingReward.Id}", rewardForm);
            }
            else
            {
                response = await Http.PostAsJsonAsync(apiUrl, rewardForm);
            }

            if (response.IsSuccessStatusCode)
            {
                CloseRewardModal();
                await LoadRewards();
                await JSRuntime.InvokeVoidAsync("alert", editingReward != null ? "Nagroda zaktualizowana pomyślnie!" : "Nagroda dodana pomyślnie!");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Błąd: {response.ReasonPhrase}. Szczegóły: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Wystąpił wyjątek: {ex.Message}");
            Console.WriteLine($"Error saving reward: {ex}");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private void ConfirmDeleteReward(int id, string name)
    {
        rewardToDeleteId = id;
        rewardToDeleteName = name;
        showDeleteModal = true;
        isDeletingReward = false;
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
    }

    private async Task DeleteReward()
    {
        isDeletingReward = true;
        StateHasChanged();

        try
        {
            var response = await Http.DeleteAsync($"api/loyalty-points/rewards/{rewardToDeleteId}");
            if (response.IsSuccessStatusCode)
            {
                CloseDeleteModal();
                await LoadRewards();
                await JSRuntime.InvokeVoidAsync("alert", $"Nagroda '{rewardToDeleteName}' została usunięta.");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Błąd podczas usuwania nagrody: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Wyjątek podczas usuwania nagrody: {ex.Message}");
            Console.WriteLine($"Error deleting reward: {ex}");
        }
        finally
        {
            isDeletingReward = false;
            StateHasChanged();
        }
    }

    public class Reward
    {
        [JsonPropertyName("rewardId")]
        public int Id { get; set; }

        [JsonPropertyName("rewardName")]
        public string Name { get; set; } = string.Empty;

        [JsonPropertyName("rewardDescription")]
        public string Description { get; set; } = string.Empty;

        [JsonPropertyName("points")]
        public int PointsCost { get; set; }
    }

    public class RewardFormModel
    {
        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Nazwa nagrody jest wymagana.")]
        [System.ComponentModel.DataAnnotations.StringLength(100, ErrorMessage = "Nazwa nagrody nie może przekraczać 100 znaków.")]
        [JsonPropertyName("rewardName")]
        public string RewardName { get; set; } = string.Empty;

        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Koszt w punktach jest wymagany.")]
        [System.ComponentModel.DataAnnotations.Range(1, 100000, ErrorMessage = "Koszt musi być liczbą dodatnią (1-100000).")]
        [JsonPropertyName("points")]
        public int PointsRequired { get; set; }

        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Opis nagrody jest wymagany.")]
        [System.ComponentModel.DataAnnotations.StringLength(500, ErrorMessage = "Opis nagrody nie może przekraczać 500 znaków.")]
        [JsonPropertyName("rewardDescription")]
        public string Description { get; set; } = string.Empty;
    }
}