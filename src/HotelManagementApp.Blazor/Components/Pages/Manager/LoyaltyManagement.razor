@page "/loyalty-management"
@using System.Text.Json
@using System.Text
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Admin,Manager")]

<PageTitle>Program lojalnościowy - zarządzanie</PageTitle>

<div class="container my-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h2">
                    <i class="bi bi-award"></i> Program lojalnościowy - zarządzanie
                </h1>
                <button class="btn btn-primary" @onclick="ShowCreateRewardModal">
                    <i class="bi bi-plus-circle"></i> Dodaj nagrodę
                </button>
            </div>
        </div>
    </div>

    <!-- Karty statystyk -->
    <div class="row mb-4">
        <div class="col-lg-3 col-md-6 mb-3">
            <div class="card bg-primary text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="card-title mb-1">Dostępne nagrody</h6>
                            <h3 class="mb-0">@(rewards?.Count ?? 0)</h3>
                        </div>
                        <div class="text-primary-emphasis">
                            <i class="bi bi-gift display-4"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6 mb-3">
            <div class="card bg-success text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="card-title mb-1">Aktywni goście</h6>
                            <h3 class="mb-0">@(guestPoints?.Count ?? 0)</h3>
                        </div>
                        <div class="text-success-emphasis">
                            <i class="bi bi-people display-4"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6 mb-3">
            <div class="card bg-warning text-dark">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="card-title mb-1">Łączne punkty</h6>
                            <h3 class="mb-0">@totalPoints</h3>
                        </div>
                        <div class="text-warning-emphasis">
                            <i class="bi bi-star display-4"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6 mb-3">
            <div class="card bg-info text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="card-title mb-1">Średnie punkty</h6>
                            <h3 class="mb-0">@averagePoints</h3>
                        </div>
                        <div class="text-info-emphasis">
                            <i class="bi bi-graph-up display-4"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Zarządzanie nagrodami -->
        <div class="col-lg-8 mb-4">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="bi bi-gift"></i> Dostępne nagrody
                    </h5>
                    <button class="btn btn-outline-secondary btn-sm" @onclick="LoadRewards" disabled="@isLoadingRewards">
                        @if (isLoadingRewards)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        else
                        {
                            <i class="bi bi-arrow-clockwise"></i>
                        }
                        Odśwież
                    </button>
                </div>
                <div class="card-body">
                    @if (isLoadingRewards)
                    {
                        <div class="text-center py-4">
                            <div class="spinner-border text-primary" role="status"></div>
                            <p class="mt-2 mb-0 text-muted">Ładowanie nagród...</p>
                        </div>
                    }
                    else if (rewards?.Any() == true)
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th>ID</th>
                                        <th>Nazwa nagrody</th>
                                        <th>Koszt punktów</th>
                                        <th>Opis</th>
                                        <th>Akcje</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var reward in rewards)
                                    {
                                        <tr>
                                            <td><strong>#@reward.Id</strong></td>
                                            <td>@reward.Name</td>
                                            <td>
                                                <span class="badge bg-warning text-dark">
                                                    @reward.PointsCost <i class="bi bi-star-fill"></i>
                                                </span>
                                            </td>
                                            <td>
                                                <span class="text-truncate d-inline-block" style="max-width: 200px;" title="@reward.Description">
                                                    @reward.Description
                                                </span>
                                            </td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <button class="btn btn-outline-primary btn-sm" @onclick="() => EditReward(reward)">
                                                        <i class="bi bi-pencil"></i> Edytuj
                                                    </button>
                                                    <button class="btn btn-outline-danger btn-sm" @onclick="() => ConfirmDeleteReward(reward.Id, reward.Name)">
                                                        <i class="bi bi-trash"></i> Usuń
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="bi bi-gift text-muted display-4"></i>
                            <p class="mt-3 mb-0 text-muted">Brak dostępnych nagród</p>
                            <button class="btn btn-primary mt-2" @onclick="ShowCreateRewardModal">
                                <i class="bi bi-plus-circle"></i> Dodaj pierwszą nagrodę
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Punkty gości -->
        <div class="col-lg-4 mb-4">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="bi bi-people"></i> Punkty gości
                    </h5>
                    <button class="btn btn-outline-secondary btn-sm" @onclick="LoadGuestPoints" disabled="@isLoadingGuests">
                        @if (isLoadingGuests)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        else
                        {
                            <i class="bi bi-arrow-clockwise"></i>
                        }
                    </button>
                </div>
                <div class="card-body" style="max-height: 500px; overflow-y: auto;">
                    @if (isLoadingGuests)
                    {
                        <div class="text-center py-3">
                            <div class="spinner-border spinner-border-sm text-primary" role="status"></div>
                            <p class="mt-2 mb-0 text-muted small">Ładowanie punktów gości...</p>
                        </div>
                    }
                    else if (guestPoints?.Any() == true)
                    {
                        @foreach (var guest in guestPoints.OrderByDescending(g => g.Points).Take(20))
                        {
                            <div class="d-flex justify-content-between align-items-center border-bottom py-2">
                                <div>
                                    <div class="fw-bold">@guest.GuestName</div>
                                    <small class="text-muted">ID: @guest.GuestId</small>
                                </div>
                                <div class="text-warning">
                                    <strong>@guest.Points</strong>
                                    <i class="bi bi-star-fill"></i>
                                </div>
                            </div>
                        }
                        @if (guestPoints.Count > 20)
                        {
                            <div class="text-center mt-3">
                                <small class="text-muted">
                                    Wyświetlono top 20 z @guestPoints.Count gości
                                </small>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center py-3">
                            <i class="bi bi-people text-muted display-6"></i>
                            <p class="mt-2 mb-0 text-muted">Brak danych o punktach gości</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal dodawania/edycji nagrody -->
@if (showRewardModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi @(editingReward != null ? "bi-pencil" : "bi-plus-circle")"></i>
                        @(editingReward != null ? "Edytuj nagrodę" : "Dodaj nagrodę")
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseRewardModal"></button>
                </div>
                <div class="modal-body">
                    <form @onsubmit="SaveReward" @onsubmit:preventDefault="true">
                        <div class="mb-3">
                            <label for="rewardName" class="form-label">Nazwa nagrody:</label>
                            <input type="text" class="form-control" id="rewardName" 
                                   @bind="rewardForm.RewardName" required 
                                   placeholder="np. Darmowy drink, Upgrade pokoju">
                            <div class="form-text">Wprowadź atrakcyjną nazwę nagrody</div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="pointsRequired" class="form-label">Koszt w punktach:</label>
                            <input type="number" class="form-control" id="pointsRequired" 
                                   @bind="rewardForm.PointsRequired" required min="1" max="100000"
                                   placeholder="np. 100">
                            <div class="form-text">Ile punktów kosztuje ta nagroda</div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="description" class="form-label">Opis:</label>
                            <textarea class="form-control" id="description" rows="3" 
                                      @bind="rewardForm.Description" required
                                      placeholder="Opisz szczegóły nagrody, warunki wykorzystania itp."></textarea>
                            <div class="form-text">Szczegółowy opis nagrody i warunków jej wykorzystania</div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseRewardModal">Anuluj</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveReward" 
                            disabled="@(isSubmitting || string.IsNullOrWhiteSpace(rewardForm.RewardName) || rewardForm.PointsRequired <= 0 || string.IsNullOrWhiteSpace(rewardForm.Description))">
                        @if (isSubmitting)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        <i class="bi @(editingReward != null ? "bi-check-circle" : "bi-plus-circle")"></i>
                        @(editingReward != null ? "Zaktualizuj" : "Dodaj") nagrodę
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal potwierdzenia usunięcia -->
@if (showDeleteModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">
                        <i class="bi bi-exclamation-triangle"></i> Potwierdzenie usunięcia
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-warning">
                        <i class="bi bi-exclamation-triangle"></i>
                        <strong>Uwaga!</strong> Ta operacja jest nieodwracalna.
                    </div>
                    <p>Czy na pewno chcesz usunąć nagrodę:</p>
                    <div class="bg-light p-3 rounded">
                        <strong>@rewardToDeleteName</strong>
                    </div>
                    <p class="mt-3 text-muted">Po usunięciu goście nie będą mogli już wymienić punktów na tę nagrodę.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">Anuluj</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteReward" disabled="@isDeletingReward">
                        @if (isDeletingReward)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        <i class="bi bi-trash"></i> Usuń nagrodę
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Reward>? rewards;
    private List<GuestPoints>? guestPoints;
    private bool isLoadingRewards = true;
    private bool isLoadingGuests = true;
    private bool isSubmitting = false;
    private bool isDeletingReward = false;
    private bool showRewardModal = false;
    private bool showDeleteModal = false;
    
    private Reward? editingReward;
    private RewardForm rewardForm = new();
    private int rewardToDeleteId = 0;
    private string rewardToDeleteName = "";
    
    private int totalPoints => guestPoints?.Sum(g => g.Points) ?? 0;
    private int averagePoints => guestPoints?.Any() == true ? (int)guestPoints.Average(g => g.Points) : 0;

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(LoadRewards(), LoadGuestPoints());
    }

    private async Task LoadRewards()
    {
        isLoadingRewards = true;
        try
        {
            var response = await Http.GetAsync("api/loyalty-points/rewards");
            
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                rewards = JsonSerializer.Deserialize<List<Reward>>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Błąd podczas ładowania nagród: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas ładowania nagród: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Wystąpił błąd podczas ładowania nagród.");
        }
        finally
        {
            isLoadingRewards = false;
            StateHasChanged();
        }
    }

    private async Task LoadGuestPoints()
    {
        isLoadingGuests = true;
        try
        {
            var response = await Http.GetAsync("api/loyalty-points/guests/points");
            
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                guestPoints = JsonSerializer.Deserialize<List<GuestPoints>>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Błąd podczas ładowania punktów gości: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas ładowania punktów gości: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Wystąpił błąd podczas ładowania punktów gości.");
        }
        finally
        {
            isLoadingGuests = false;
            StateHasChanged();
        }
    }

    private void ShowCreateRewardModal()
    {
        editingReward = null;
        rewardForm = new RewardForm();
        showRewardModal = true;
    }

    private void EditReward(Reward reward)
    {
        editingReward = reward;
        rewardForm = new RewardForm
        {
            RewardName = reward.Name,
            PointsRequired = reward.PointsCost,
            Description = reward.Description
        };
        showRewardModal = true;
    }

    private void CloseRewardModal()
    {
        showRewardModal = false;
        editingReward = null;
        rewardForm = new RewardForm();
    }

    private async Task SaveReward()
    {
        if (string.IsNullOrWhiteSpace(rewardForm.RewardName) || 
            rewardForm.PointsRequired <= 0 || 
            string.IsNullOrWhiteSpace(rewardForm.Description))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Wszystkie pola są wymagane i punkty muszą być większe od 0.");
            return;
        }

        isSubmitting = true;
        try
        {
            var requestData = new
            {
                rewardName = rewardForm.RewardName,
                pointsRequired = rewardForm.PointsRequired,
                description = rewardForm.Description
            };

            HttpResponseMessage response;
            
            if (editingReward != null)
            {
                // Aktualizacja istniejącej nagrody
                var updateData = new
                {
                    loyaltyRewardId = editingReward.Id,
                    rewardName = rewardForm.RewardName,
                    pointsRequired = rewardForm.PointsRequired,
                    description = rewardForm.Description
                };
                
                var json = JsonSerializer.Serialize(updateData);
                var content = new StringContent(json, Encoding.UTF8, "application/json");
                response = await Http.PutAsync($"api/loyalty-points/rewards/{editingReward.Id}", content);
            }
            else
            {
                // Tworzenie nowej nagrody
                var json = JsonSerializer.Serialize(requestData);
                var content = new StringContent(json, Encoding.UTF8, "application/json");
                response = await Http.PostAsync("api/loyalty-points/rewards", content);
            }

            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", 
                    editingReward != null ? "Nagroda została zaktualizowana!" : "Nagroda została dodana!");
                
                CloseRewardModal();
                await LoadRewards();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", 
                    $"Błąd podczas zapisywania nagrody: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas zapisywania nagrody: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Wystąpił błąd podczas zapisywania nagrody.");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void ConfirmDeleteReward(int rewardId, string rewardName)
    {
        rewardToDeleteId = rewardId;
        rewardToDeleteName = rewardName;
        showDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
        rewardToDeleteId = 0;
        rewardToDeleteName = "";
    }

    private async Task DeleteReward()
    {
        if (rewardToDeleteId == 0) return;

        isDeletingReward = true;
        try
        {
            var response = await Http.DeleteAsync($"api/loyalty-points/rewards/{rewardToDeleteId}");
            
            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Nagroda została usunięta!");
                CloseDeleteModal();
                await LoadRewards();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Błąd podczas usuwania nagrody: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas usuwania nagrody: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Wystąpił błąd podczas usuwania nagrody.");
        }
        finally
        {
            isDeletingReward = false;
        }
    }

    public class Reward
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public int PointsCost { get; set; }
    }

    public class GuestPoints
    {
        public string GuestId { get; set; } = string.Empty;
        public string GuestName { get; set; } = string.Empty;
        public int Points { get; set; }
    }

    public class RewardForm
    {
        public string RewardName { get; set; } = string.Empty;
        public int PointsRequired { get; set; }
        public string Description { get; set; } = string.Empty;
    }
}