@page "/my-reservations"
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.IO // Potrzebne dla MemoryStream
@inject HttpClient Http 
@inject IJSRuntime JSRuntime 
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Moje rezerwacje</PageTitle>

<div class="container my-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h2">
                    <i class="bi bi-journal-text"></i> Moje rezerwacje
                </h1>
            </div>

            @if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Ładowanie...</span>
                    </div>
                </div>
            }
            else if (orders?.Any() == true)
            {
                <div class="row">
                    @foreach (var order in orders)
                    {
                        <div class="col-md-6 col-lg-4 mb-4">
                            <div class="card h-100">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <h6 class="mb-0">Zamówienie #@order.Id</h6>
                                    <span class="badge @GetStatusBadgeClass(order.Status)">@GetPolishStatus(order.Status)</span>
                                </div>
                                <div class="card-body">
                                    <p><strong>Data:</strong> @order.OrderDate?.ToString("dd.MM.yyyy")</p>
                                    <p><strong>Kwota:</strong> @order.TotalAmount?.ToString("C")</p>
                                    @if (!string.IsNullOrEmpty(order.HotelName))
                                    {
                                        <p><strong>Hotel:</strong> @order.HotelName</p>
                                    }
                                </div>
                                <div class="card-footer">
                                    <div class="btn-group w-100" role="group">
                                        <button class="btn btn-outline-primary btn-sm" @onclick="() => NavigateToOrderDetails(order.Id)">
                                            <i class="bi bi-eye"></i> Szczegóły
                                        </button>
                                        @if (order.Status?.ToLower() == "pending")
                                        {
                                            <button class="btn btn-outline-info btn-sm" @onclick="() => NavigateToPayment(order.Id)">
                                                <i class="bi bi-credit-card"></i> Płatność
                                            </button>
                                        }
                                        @if (order.Status?.ToLower() == "completed")
                                        {
                                            <button class="btn btn-outline-success btn-sm" @onclick="() => DownloadBill(order.Id)">
                                                <i class="bi bi-file-earmark-arrow-down"></i> Pobierz rachunek
                                            </button>
                                        }
                                        @if (CanCancelOrder(order.Status))
                                        {
                                            <button class="btn btn-outline-danger btn-sm" @onclick="() => CancelOrder(order.Id)">
                                                <i class="bi bi-x-circle"></i> Anuluj
                                            </button>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="text-center">
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle"></i>
                        Nie masz jeszcze żadnych rezerwacji.
                    </div>
                    <a href="/hotels" class="btn btn-primary">
                        <i class="bi bi-building"></i> Przeglądaj hotele
                    </a>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<Order>? orders;
    private bool isLoading = true;
    private string? currentUserId;

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentUserId();
        await LoadOrders();
    }

    private async Task GetCurrentUserId()
    {
        try
        {
            var response = await Http.GetAsync("api/account/session"); // Zakładam, że ten endpoint jest na tym samym API co reszta
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var session = JsonSerializer.Deserialize<UserSession>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                currentUserId = session?.Id;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas pobierania ID użytkownika: {ex.Message}");
        }
    }

    private async Task LoadOrders()
    {
        isLoading = true;
        StateHasChanged();
        try
        {
            if (!string.IsNullOrEmpty(currentUserId))
            {
                // Upewnij się, że Http jest skonfigurowany z poprawnym BaseAddress dla API
                var response = await Http.GetAsync($"api/order/get-by-guest/{currentUserId}");
                if (response.IsSuccessStatusCode)
                {
                    var json = await response.Content.ReadAsStringAsync();
                    orders = JsonSerializer.Deserialize<List<Order>>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                }
                else
                {
                    orders = new List<Order>();
                    Console.WriteLine($"Błąd API podczas pobierania zamówień: {response.StatusCode}");
                }
            }
            else
            {
                orders = new List<Order>();
            }
        }
        catch (Exception ex)
        {
            orders = new List<Order>();
            Console.WriteLine($"Błąd podczas pobierania zamówień: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void NavigateToOrderDetails(int orderId)
    {
        NavigationManager.NavigateTo($"/order/{orderId}");
    }

    private void NavigateToPayment(int orderId)
    {
        NavigationManager.NavigateTo($"/payment/{orderId}");
    }

    private async Task DownloadBill(int orderId)
    {
        try
        {
            // Użyj HttpClient, aby pobrać plik PDF. HttpClient automatycznie dołączy tokeny JWT.
            // Upewnij się, że `Http` jest skonfigurowany z BaseAddress wskazującym na Twoje API (np. http://localhost:TWOJ_PORT_API)
            var response = await Http.GetAsync($"api/order/{orderId}/bill");

            if (response.IsSuccessStatusCode)
            {
                var fileBytes = await response.Content.ReadAsByteArrayAsync();
                var fileName = $"Rachunek_Zamowienie_{orderId}.pdf"; // Możesz spróbować odczytać nazwę z nagłówka Content-Disposition, jeśli jest dostępna i potrzebna

                // Próba odczytania nazwy pliku z nagłówka Content-Disposition
                if (response.Content.Headers.TryGetValues("Content-Disposition", out var cdValues))
                {
                    var contentDisposition = System.Net.Http.Headers.ContentDispositionHeaderValue.Parse(cdValues.FirstOrDefault());
                    if (contentDisposition != null && !string.IsNullOrEmpty(contentDisposition.FileNameStar))
                    {
                         fileName = contentDisposition.FileNameStar;
                    }
                    else if (contentDisposition != null && !string.IsNullOrEmpty(contentDisposition.FileName))
                    {
                         fileName = contentDisposition.FileName;
                    }
                    // Usuń cudzysłowy, jeśli istnieją
                    fileName = fileName.Trim('"');
                }


                using var fileStream = new MemoryStream(fileBytes);
                using var streamRef = new DotNetStreamReference(stream: fileStream);

                // Wywołaj funkcję JavaScript do pobrania pliku
                await JSRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, "application/pdf", streamRef);
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Nie udało się pobrać rachunku. Serwer odpowiedział: {response.StatusCode}");
                Console.WriteLine($"Błąd API ({response.StatusCode}) podczas pobierania rachunku dla zamówienia #{orderId}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Wystąpił krytyczny błąd podczas próby pobrania rachunku.");
            Console.WriteLine($"Wyjątek podczas pobierania rachunku dla zamówienia #{orderId}: {ex.Message}");
        }
    }

    private async Task CancelOrder(int orderId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Czy na pewno chcesz anulować to zamówienie?"))
        {
            try
            {
                var response = await Http.PatchAsync($"api/order/cancel/{orderId}", null);
                if (response.IsSuccessStatusCode)
                {
                    await LoadOrders();
                    await JSRuntime.InvokeVoidAsync("alert", "Zamówienie zostało anulowane.");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"Nie udało się anulować zamówienia. Status: {response.StatusCode}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Błąd podczas anulowania zamówienia #{orderId}: {ex.Message}");
                await JSRuntime.InvokeVoidAsync("alert", "Wystąpił błąd podczas anulowania zamówienia.");
            }
        }
    }

    private string GetPolishStatus(string? englishStatus) => englishStatus?.ToLower() switch
    {
        "completed" => "Zakończone",
        "cancelled" => "Anulowane",
        "confirmed" => "Potwierdzone",
        "pending" => "Oczekujące",
        _ => englishStatus ?? "Nieznany"
    };

    private string GetStatusBadgeClass(string? status) => status?.ToLower() switch
    {
        "confirmed" => "bg-success",
        "pending" => "bg-warning text-dark",
        "cancelled" => "bg-danger",
        "completed" => "bg-info text-dark",
        _ => "bg-secondary"
    };

    private bool CanCancelOrder(string? status) => status?.ToLower() is "pending" or "confirmed";

    public class UserSession
    {
        public string Id { get; set; } = string.Empty;
        public string UserName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string[] Roles { get; set; } = Array.Empty<string>();
        public string ProfilePicture { get; set; } = string.Empty;
        public bool IsEmailConfirmed { get; set; }
    }

    public class Order
    {
        public int Id { get; set; }
        [JsonPropertyName("created")]
        public DateTime? OrderDate { get; set; }
        [JsonPropertyName("totalPrice")]
        public decimal? TotalAmount { get; set; }
        public string Status { get; set; } = string.Empty;
        public string HotelName { get; set; } = string.Empty;
    }
}