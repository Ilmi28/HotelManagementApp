@page "/my-reviews"
@using System.Text.Json
@using System.Text
@using System.Text.Json.Serialization 
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Dodaj opinię</PageTitle>

<div class="container my-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h2">
                    <i class="bi bi-chat-quote"></i> Dodaj opinię
                </h1>
                <button class="btn btn-primary" @onclick="ShowAddReviewForm" disabled="@(isLoading || !reservedHotels?.Any() == true)">
                    <i class="bi bi-plus-circle"></i> Dodaj opinię
                </button>
            </div>

            @if (isLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border" role="status" style="width: 3rem; height: 3rem;">
                        <span class="visually-hidden">Ładowanie...</span>
                    </div>
                    <p class="mt-2">Ładowanie dostępnych hoteli do zaopiniowania...</p>
                </div>
            }
            else if (reservedHotels?.Any() == true)
            {
                 <div class="alert alert-success text-center">
                    <i class="bi bi-check-circle-fill me-2"></i>
                    Możesz dodać opinię dla hoteli, w których Twój pobyt już się zakończył. Wybierz "Dodaj opinię" powyżej.
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle-fill me-2"></i>
                        Obecnie nie masz żadnych zakończonych pobytów, dla których można dodać opinię.
                    </div>
                    <p class="text-muted mt-3">Aby dodać opinię, najpierw dokonaj rezerwacji i poczekaj na zakończenie pobytu. Kwalifikują się rezerwacje ze statusem "Completed" lub "Confirmed", dla których data wymeldowania już minęła.</p>
                    <a href="/hotels" class="btn btn-outline-primary mt-2">
                        <i class="bi bi-building"></i> Przeglądaj hotele
                    </a>
                </div>
            }
        </div>
    </div>

    @if (showReviewForm)
    {
        <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-lg modal-dialog-scrollable">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Dodaj opinię</h5>
                        <button type="button" class="btn-close" @onclick="CloseReviewForm"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="newReview" OnValidSubmit="SubmitReview">
                            <DataAnnotationsValidator />
                            <div class="mb-3">
                                <label for="hotelSelect" class="form-label">Hotel:</label>
                                <InputSelect @bind-Value="newReview.HotelId" class="form-select" id="hotelSelect">
                                    <option value="0">Wybierz hotel...</option>
                                    @if (reservedHotels?.Any() == true)
                                    {
                                        @foreach (var hotel in reservedHotels.OrderBy(h => h.HotelName))
                                        {
                                            <option value="@hotel.HotelId">@hotel.HotelName</option>
                                        }
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => newReview.HotelId)" />
                                @if (reservedHotels?.Any() != true && !isLoading)
                                {
                                    <div class="form-text text-danger mt-1">
                                        Brak kwalifikujących się hoteli do dodania opinii.
                                    </div>
                                }
                            </div>
                            
                            <div class="mb-3">
                                <label for="rating" class="form-label">Ocena:</label>
                                <InputSelect @bind-Value="newReview.Rating" class="form-select" id="rating">
                                    <option value="0">Wybierz ocenę...</option>
                                    @for (int i = 1; i <= 5; i++) { <option value="@i">@string.Concat(Enumerable.Repeat("⭐", i)) @i gwiazdk@(i == 1 ? "a" : i < 5 ? "i" : "ek")</option> }
                                </InputSelect>
                                <ValidationMessage For="@(() => newReview.Rating)" />
                            </div>
                            
                            <div class="mb-3">
                                <label for="reviewText" class="form-label">Opinia:</label>
                                <InputTextArea @bind-Value="newReview.Review" class="form-control" id="reviewText" rows="4" placeholder="Podziel się swoimi wrażeniami z pobytu..." />
                                <ValidationMessage For="@(() => newReview.Review)" />
                                <div class="form-text">
                                    Opisz swoje wrażenia z pobytu, jakość obsługi, czystość pokoju, lokalizację itp.
                                </div>
                            </div>

                            <div class="mb-3">
                                <label for="reviewImages" class="form-label">Zdjęcia (opcjonalne, max 5):</label>
                                <InputFile class="form-control" id="reviewImages" multiple accept="image/*" OnChange="OnImageFilesSelected" />
                                <div class="form-text">
                                    Możesz dodać maksymalnie 5 zdjęć (JPG, PNG, GIF). Maksymalny rozmiar pliku: 5MB.
                                </div>
                                
                                @if (selectedImages?.Any() == true)
                                {
                                    <div class="mt-3">
                                        <h6>Wybrane zdjęcia (@selectedImages.Count):</h6>
                                        <div class="row g-2">
                                            @for (int i = 0; i < selectedImages.Count; i++)
                                            {
                                                var index = i;
                                                <div class="col-6 col-md-3">
                                                    <div class="position-relative">
                                                        <img src="@selectedImages[index].DataUrl" class="img-thumbnail" style="max-height: 100px; width: 100%; object-fit: cover;" />
                                                        <button type="button" class="btn btn-danger btn-sm position-absolute top-0 end-0 m-1 p-0" style="width:20px; height:20px; line-height:1;" @onclick="() => RemoveSelectedImage(index)">
                                                            <i class="bi bi-x"></i>
                                                        </button>
                                                    </div>
                                                    <small class="text-muted d-block text-truncate" title="@selectedImages[index].Name">@selectedImages[index].Name</small>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                             <div class="modal-footer mt-4">
                                <button type="button" class="btn btn-secondary" @onclick="CloseReviewForm">Anuluj</button>
                                <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                    @if (isSubmitting) { <span class="spinner-border spinner-border-sm me-2" role="status"></span> }
                                    Dodaj opinię
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }
    @if (showImageModal) 
    {
        <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.8);" @onclick="CloseImageModal">
            <div class="modal-dialog modal-lg modal-dialog-centered">
                <div class="modal-content bg-transparent border-0">
                    <div class="modal-body p-0 text-center">
                        <img src="@selectedImageUrl" class="img-fluid rounded" style="max-height: 80vh;" />
                        <button type="button" class="btn btn-light position-absolute top-0 end-0 m-3" @onclick="CloseImageModal">
                            <i class="bi bi-x-lg"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>
<style>
    .review-text-clamp { display: -webkit-box; -webkit-line-clamp: 3; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis; }
</style>

@code {
    private List<ReservedHotel>? reservedHotels;
    private bool isLoading = true;
    private bool isSubmitting = false;
    private bool showReviewForm = false;
    private bool showImageModal = false;
    private string selectedImageUrl = string.Empty;
    private ReviewRequest newReview = new();
    private string? currentUserId;
    private string? currentUserName;
    private List<ImageFile> selectedImages = new();
    private JsonSerializerOptions jsonOptions = new JsonSerializerOptions { PropertyNameCaseInsensitive = true, DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull };

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        StateHasChanged();
        try
        {
            await GetCurrentUser();
            if (!string.IsNullOrEmpty(currentUserId))
            {
                await LoadAllRequiredDataConcurrently();
            }
            else
            {
                InitializeEmptyData();
            }
        }
        catch (Exception ex)
        {
            InitializeEmptyData();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private void InitializeEmptyData()
    {
        reservedHotels = new List<ReservedHotel>();
    }

    private async Task GetCurrentUser()
    {
        try
        {
            var response = await Http.GetAsync("api/account/session");
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var session = JsonSerializer.Deserialize<UserSession>(json, jsonOptions);
                if (session != null)
                {
                    currentUserId = session.Id; 
                    currentUserName = session.UserName;
                }
            }
        }
        catch (Exception) { /* Silently fail or log */ }
    }

    private async Task LoadAllRequiredDataConcurrently()
    {
        List<HotelRoom> allHotelRooms = new List<HotelRoom>();
        List<Hotel> allHotels = new List<Hotel>();
        List<Order> userOrders = new List<Order>();

        try
        {
            var hotelRoomsTask = Http.GetAsync("api/hotel-room/get-all").ContinueWith(async t => {
                if (t.IsCompletedSuccessfully && t.Result.IsSuccessStatusCode) { var json = await t.Result.Content.ReadAsStringAsync(); return JsonSerializer.Deserialize<List<HotelRoom>>(json, jsonOptions) ?? new List<HotelRoom>(); }
                return new List<HotelRoom>();
            }).Unwrap();

            var allHotelsTask = Http.GetAsync("api/hotel/get-all").ContinueWith(async t => {
                if (t.IsCompletedSuccessfully && t.Result.IsSuccessStatusCode) { var json = await t.Result.Content.ReadAsStringAsync(); return JsonSerializer.Deserialize<List<Hotel>>(json, jsonOptions) ?? new List<Hotel>(); }
                return new List<Hotel>();
            }).Unwrap();
            
            var userOrdersTask = Http.GetAsync($"api/order/get-by-guest/{currentUserId}").ContinueWith(async t => {
                if (t.IsCompletedSuccessfully && t.Result.IsSuccessStatusCode) { var json = await t.Result.Content.ReadAsStringAsync(); return JsonSerializer.Deserialize<List<Order>>(json, jsonOptions) ?? new List<Order>(); }
                return new List<Order>();
            }).Unwrap();

            await Task.WhenAll(hotelRoomsTask, allHotelsTask, userOrdersTask);

            allHotelRooms = await hotelRoomsTask;
            allHotels = await allHotelsTask;
            userOrders = await userOrdersTask;
        }
        catch(Exception) { /* Silently fail or log */ }
        
        await ProcessLoadedData(allHotelRooms, allHotels, userOrders);
    }

    private async Task ProcessLoadedData(List<HotelRoom> allHotelRooms, List<Hotel> allHotels, List<Order> userOrders)
    {
        var tempReservedHotels = new List<ReservedHotel>();
        try
        {
            if (userOrders == null || !userOrders.Any() || allHotelRooms == null || !allHotelRooms.Any()) 
            { 
                reservedHotels = tempReservedHotels; 
                return; 
            }

            var uniqueHotelIdsForReview = new HashSet<int>();
            DateTime todayUtc = DateTime.UtcNow.Date;

            foreach (var order in userOrders.Where(o => o.Status?.ToLower() is "completed" or "confirmed"))
            {
                try
                {
                    var reservationsResponse = await Http.GetAsync($"api/reservation/{order.Id}");
                    if (reservationsResponse.IsSuccessStatusCode)
                    {
                        var jsonReservations = await reservationsResponse.Content.ReadAsStringAsync();
                        var reservations = JsonSerializer.Deserialize<List<Reservation>>(jsonReservations, jsonOptions);

                        if (reservations != null && reservations.Any())
                        {
                            foreach (var reservation in reservations)
                            {
                                if (reservation.To.Date < todayUtc)
                                {
                                    var hotelRoom = allHotelRooms.FirstOrDefault(hr => hr.Id == reservation.RoomId);
                                    if (hotelRoom != null && hotelRoom.HotelId != 0)
                                    {
                                        uniqueHotelIdsForReview.Add(hotelRoom.HotelId);
                                    }
                                }
                            }
                        }
                    }
                } catch (Exception) { /* Silently fail or log for individual order/reservation processing */ }
            }

            foreach (var hotelId in uniqueHotelIdsForReview)
            {
                var hotelInfo = allHotels?.FirstOrDefault(h => h.Id == hotelId);
                var hotelName = hotelInfo?.Name ?? $"Nieznany hotel (ID: {hotelId})";
                tempReservedHotels.Add(new ReservedHotel { HotelId = hotelId, HotelName = hotelName });
            }
        }
        catch (Exception) { /* Silently fail or log general processing error */ }
        finally { reservedHotels = tempReservedHotels.OrderBy(h => h.HotelName).ToList(); }
    }

    private void ShowAddReviewForm() 
    {
        if (reservedHotels?.Any() != true)
        {
            JSRuntime.InvokeVoidAsync("alert", "Nie masz żadnych hoteli, dla których można dodać opinię.");
            return;
        }
        newReview = new ReviewRequest { Rating = 0 }; 
        selectedImages.Clear(); 
        showReviewForm = true;
    }

    private void CloseReviewForm() { showReviewForm = false; newReview = new ReviewRequest(); selectedImages.Clear(); }
    private void ShowImageModal(string imageUrl) { selectedImageUrl = imageUrl; showImageModal = true; }
    private void CloseImageModal() { showImageModal = false; selectedImageUrl = string.Empty; }

    private async Task OnImageFilesSelected(InputFileChangeEventArgs e) 
    {
        var maxTotalImages = 5;
        var currentNewSelectedCount = selectedImages.Count;
        var allowedNewImagesCanBeAdded = maxTotalImages - currentNewSelectedCount;

        if (e.FileCount > allowedNewImagesCanBeAdded && allowedNewImagesCanBeAdded > 0)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Możesz wybrać jeszcze maksymalnie {allowedNewImagesCanBeAdded} zdjęć (łącznie {maxTotalImages}). Wybrano za dużo plików.");
        }
         else if (allowedNewImagesCanBeAdded <= 0 && e.FileCount > 0)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Osiągnięto maksymalną liczbę {maxTotalImages} zdjęć.");
            return;
        }
        
        var filesToProcess = e.GetMultipleFiles(allowedNewImagesCanBeAdded > 0 ? allowedNewImagesCanBeAdded : 0);

        foreach (var file in filesToProcess)
        {
            if (selectedImages.Count >= maxTotalImages) break; 
            if (!file.ContentType.StartsWith("image/")) { await JSRuntime.InvokeVoidAsync("alert", $"Plik {file.Name} nie jest obrazem."); continue; }
            if (file.Size > 5 * 1024 * 1024) { await JSRuntime.InvokeVoidAsync("alert", $"Plik {file.Name} jest za duży (max 5MB)."); continue; }
            try
            {
                using var stream = file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024); var buffer = new byte[file.Size];
                await stream.ReadAsync(buffer); var base64String = Convert.ToBase64String(buffer);
                var dataUrl = $"data:{file.ContentType};base64,{base64String}";
                selectedImages.Add(new ImageFile { Name = file.Name, Size = file.Size, Type = file.ContentType, DataUrl = dataUrl, ByteArray = buffer });
            }
            catch (Exception) { await JSRuntime.InvokeVoidAsync("alert", $"Błąd przetwarzania pliku {file.Name}."); }
        }
        StateHasChanged();
    }

    private void RemoveSelectedImage(int index) { if (index >= 0 && index < selectedImages.Count) { selectedImages.RemoveAt(index); StateHasChanged(); } }

    private async Task SubmitReview() 
    {
        isSubmitting = true; StateHasChanged();
        try
        {
            HttpResponseMessage response; int? reviewIdForImages = null;
            
            var addRequest = new { userName = currentUserName, userId = currentUserId, rating = newReview.Rating, review = newReview.Review, hotelId = newReview.HotelId };
            response = await Http.PostAsJsonAsync("api/review", addRequest, jsonOptions);
            if (response.IsSuccessStatusCode)
            {
                var reviewResponse = await response.Content.ReadFromJsonAsync<ReviewResponse>(jsonOptions);
                if(reviewResponse?.ReviewId > 0) reviewIdForImages = reviewResponse.ReviewId;
            }

            if (response.IsSuccessStatusCode && reviewIdForImages.HasValue)
            {
                if (selectedImages.Any()) { await UpdateReviewImages(reviewIdForImages.Value); }
                await JSRuntime.InvokeVoidAsync("alert", "Opinia została dodana!");
                await LoadAllRequiredDataConcurrently(); 
                CloseReviewForm();
            }
            else if(!response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Błąd podczas zapisywania opinii: {response.StatusCode}");
            }
             else if (!reviewIdForImages.HasValue && response.IsSuccessStatusCode) 
            {
                 await JSRuntime.InvokeVoidAsync("alert", "Opinia została dodana (problem z ID dla zdjęć)!");
                await LoadAllRequiredDataConcurrently(); CloseReviewForm();
            }
        }
        catch (Exception) { await JSRuntime.InvokeVoidAsync("alert", "Wystąpił błąd podczas zapisywania opinii."); }
        finally { isSubmitting = false; StateHasChanged(); }
    }

    private async Task UpdateReviewImages(int reviewId) 
    {
        try
        {
            var finalImageUrls = selectedImages.Select(img => img.DataUrl).Distinct().ToList();
            if (!finalImageUrls.Any()) return;

            var imageUpdateRequest = new { reviewId = reviewId, reviewImages = finalImageUrls };
            var response = await Http.PutAsJsonAsync("api/review/images", imageUpdateRequest, jsonOptions); 
            
            if (!response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Nie udało się zaktualizować zdjęć opinii: {response.StatusCode}");
            }
        }
        catch (Exception) { await JSRuntime.InvokeVoidAsync("alert", "Wystąpił błąd podczas aktualizacji zdjęć."); }
    }

    public class UserSession { [JsonPropertyName("id")] public string Id { get; set; } = ""; [JsonPropertyName("userName")] public string UserName { get; set; } = ""; public string Email { get; set; } = ""; public string[] Roles { get; set; } = []; public string ProfilePicture { get; set; } = ""; public bool IsEmailConfirmed { get; set; } }
    public class ReviewRequest { [Range(1, int.MaxValue, ErrorMessage = "Hotel jest wymagany.")] public int HotelId { get; set; } [Range(1, 5, ErrorMessage = "Ocena jest wymagana.")] public int Rating { get; set; } [Required(ErrorMessage = "Treść opinii jest wymagana.")] [MinLength(10, ErrorMessage = "Opinia musi mieć co najmniej 10 znaków.")] public string Review { get; set; } = string.Empty; public string UserName { get; set; } = string.Empty; public string UserId { get; set; } = string.Empty;}
    public class ReviewResponse { public int ReviewId { get; set; } public string Message { get; set; } = ""; }
    public class Order { public int Id { get; set; } [JsonPropertyName("userId")] public string? UserId { get; set; } public string? Status { get; set; } public string? FirstName { get; set; } public string? LastName { get; set; } public string? PhoneNumber { get; set; } public string? Address { get; set; } public string? City { get; set; } public string? Country { get; set; } public DateTime Created { get; set; } public DateTime? Confirmed { get; set; } public DateTime? Completed { get; set; } public DateTime? Cancelled { get; set; } public decimal TotalPrice { get; set; } }
    public class Reservation { public int Id { get; set; } public DateTime From { get; set; } public DateTime To { get; set; } public int RoomId { get; set; } [JsonPropertyName("userId")] public string? UserId { get; set; } public int OrderId { get; set; } }
    public class HotelRoom { public int Id { get; set; } public string? RoomName { get; set; } public string? RoomType { get; set; } public decimal Price { get; set; } public int DiscountPercent { get; set; } public decimal FinalPrice { get; set; } public int HotelId { get; set; } public List<string>? RoomImages { get; set; } }
    public class Hotel { public int Id { get; set; } public string Name { get; set; } = ""; public string Address { get; set; } = ""; public string City { get; set; } = ""; public string Country { get; set; } = ""; public string PhoneNumber { get; set; } = ""; public string Email { get; set; } = ""; public string Description { get; set; } = ""; public List<string> Images { get; set; } = new(); }
    public class ReservedHotel { public int HotelId { get; set; } public string HotelName { get; set; } = ""; }
    public class ImageFile { public string Name { get; set; } = ""; public long Size { get; set; } public string Type { get; set; } = ""; public string DataUrl { get; set; } = ""; public byte[] ByteArray { get; set; } = []; }
}