@page "/reservation/{roomId:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Components.Authorization
@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using System.Timers

<PageTitle>@pageTitle</PageTitle>

<div class="container mt-4">
    @try
    {
        @if (isLoading)
        {
            <div class="text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Ładowanie...</span>
                </div>
                <p class="mt-3 text-muted">Wczytywanie informacji o pokoju...</p>
            </div>
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger d-flex align-items-center" role="alert">
                <i class="bi bi-exclamation-triangle me-2"></i>
                <div>
                    @errorMessage
                    <div class="mt-2">
                        <button class="btn btn-sm btn-primary" @onclick="GoToHotels">
                            Powrót do hoteli
                        </button>
                        <button class="btn btn-sm btn-secondary ms-2" @onclick="LoadRoomData">
                            Spróbuj ponownie
                        </button>
                    </div>
                </div>
            </div>
        }
        else if (!isGuestUser && userRoleChecked)
        {
            <div class="row justify-content-center mb-4">
                <div class="col-lg-8">
                    <div class="alert alert-danger border-0 shadow-sm">
                        <div class="d-flex align-items-center">
                            <i class="bi bi-shield-exclamation me-3" style="font-size: 2rem; color: #dc3545;"></i>
                            <div class="flex-grow-1">
                                <h5 class="alert-heading mb-2">
                                    <i class="bi bi-exclamation-triangle"></i> Brak uprawnień do rezerwacji
                                </h5>
                                <p class="mb-2">
                                    Niestety, tylko użytkownicy z rolą "Guest" mogą dokonywać rezerwacji w naszym systemie.
                                    Twoja obecna rola nie pozwala na dokonanie rezerwacji.
                                </p>
                                <p class="mb-2">
                                    <strong>Twoja rola:</strong> @(currentUserRole ?? "Nieokreślona")
                                </p>
                                <div class="d-flex gap-2">
                                    <button class="btn btn-primary" @onclick="GoToHotels">
                                        <i class="bi bi-arrow-left"></i> Powrót do hoteli
                                    </button>
                                    <button class="btn btn-outline-secondary" @onclick="ContactSupport">
                                        <i class="bi bi-envelope"></i> Skontaktuj się z obsługą
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
        else if (!isEmailConfirmed && emailVerificationChecked && isGuestUser)
        {
            <div class="row justify-content-center mb-4">
                <div class="col-lg-8">
                    <div class="alert alert-warning border-0 shadow-sm">
                        <div class="d-flex align-items-center">
                            <i class="bi bi-envelope-exclamation me-3" style="font-size: 2rem;"></i>
                            <div class="flex-grow-1">
                                <h5 class="alert-heading mb-2">
                                    <i class="bi bi-exclamation-triangle"></i> Potwierdź swój adres email
                                </h5>
                                <p class="mb-2">
                                    Aby dokonać rezerwacji, musisz najpierw potwierdzić swój adres email.
                                    Sprawdź swoją skrzynkę pocztową i kliknij w link potwierdzający.
                                </p>
                                <div class="d-flex gap-2">
                                    <button class="btn btn-warning" @onclick="SendVerificationEmail">
                                        <i class="bi bi-envelope"></i> Wyślij ponownie link
                                    </button>
                                    <button class="btn btn-outline-secondary" @onclick="CheckEmailStatus">
                                        <i class="bi bi-arrow-clockwise"></i> Sprawdź status
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
        else if (room != null && isGuestUser)
        {
            <nav aria-label="breadcrumb" class="mb-4">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="/hotels" class="text-decoration-none">
                            <i class="bi bi-house-door"></i> Hotele
                        </a>
                    </li>
                    <li class="breadcrumb-item">
                        <a href="/hotel/@room.HotelId" class="text-decoration-none">
                            Hotel
                        </a>
                    </li>
                    <li class="breadcrumb-item active" aria-current="page">
                        Rezerwacja - @GetSafeRoomName()
                    </li>
                </ol>
            </nav>

            <div class="row mb-4">
                <div class="col-12">
                    <div class="card border-0 shadow-sm">
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-8">
                                    <h1 class="display-6 fw-bold text-primary mb-2">
                                        Rezerwacja pokoju
                                    </h1>
                                    <h3 class="mb-2">@GetSafeRoomName()</h3>
                                    <p class="text-muted mb-3">
                                        <i class="bi bi-door-open"></i> @GetSafeRoomType()
                                    </p>
                                </div>
                                <div class="col-md-4 text-end">
                                    <div class="price-card p-3 bg-light rounded">
                                        <h6 class="mb-2">Cena za noc</h6>
                                        @if (room.DiscountPercent > 0)
                                        {
                                            <div class="h5 text-muted text-decoration-line-through">
                                                @room.Price.ToString("C", polishCulture)
                                            </div>
                                            <div class="h4 text-success">
                                                @room.FinalPrice.ToString("C", polishCulture)
                                            </div>
                                            <small class="badge bg-success">
                                                -@room.DiscountPercent%
                                            </small>
                                        }
                                        else
                                        {
                                            <div class="h4 text-primary">
                                                @room.Price.ToString("C", polishCulture)
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            @if (HasRoomImages())
            {
                <div class="row mb-4">
                    <div class="col-12">
                        <div class="card border-0 shadow-sm">
                            <div class="card-header bg-white border-0">
                                <h5 class="mb-0">
                                    <i class="bi bi-images text-primary"></i> Zdjęcia pokoju
                                </h5>
                            </div>
                            <div class="card-body">
                                <div class="row g-3">
                                    @foreach (var image in GetSafeRoomImages())
                                    {
                                        <div class="col-lg-4 col-md-6">
                                            <img src="@image" class="img-fluid rounded shadow-sm"
                                                 alt="@GetSafeRoomName()" style="height: 200px; width: 100%; object-fit: cover;"/>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
            <EditForm Model="@mainFormModel" OnValidSubmit="@HandleSubmit" Id="reservationForm">
                <DataAnnotationsValidator/>
                <div class="row">
                    <div class="col-lg-8">
                        <div class="card border-0 shadow-sm mb-4 @(isEmailConfirmed ? "" : "opacity-50")">
                            <div class="card-header bg-white border-0">
                                <h5 class="mb-0">
                                    <i class="bi bi-calendar-event text-primary"></i> Szczegóły rezerwacji
                                    @if (!isEmailConfirmed)
                                    {
                                        <span class="badge bg-warning text-dark ms-2">
                                            <i class="bi bi-lock"></i> Wymagane potwierdzenie emaila
                                        </span>
                                    }
                                </h5>
                            </div>
                            <div class="card-body">
                                <div class="row mb-4">
                                    <div class="col-md-6">
                                        <label for="checkInDate" class="form-label">
                                            <i class="bi bi-calendar-plus"></i> Data zameldowania
                                        </label>
                                        <input type="date" id="checkInDate" class="form-control"
                                               value="@mainFormModel.ReservationDetails.CheckInDate.ToString("yyyy-MM-dd")"
                                               min="@DateTime.Today.ToString("yyyy-MM-dd")"
                                               disabled="@(!isEmailConfirmed)"
                                               @onchange="@OnCheckInDateChanged"/>
                                        <ValidationMessage For="@(() => mainFormModel.ReservationDetails.CheckInDate)" class="text-danger"/>
                                    </div>
                                    <div class="col-md-6">
                                        <label for="checkOutDate" class="form-label">
                                            <i class="bi bi-calendar-minus"></i> Data wymeldowania
                                        </label>
                                        <input type="date" id="checkOutDate" class="form-control"
                                               value="@mainFormModel.ReservationDetails.CheckOutDate.ToString("yyyy-MM-dd")"
                                               min="@GetMinCheckOutDate()"
                                               disabled="@(!isEmailConfirmed)"
                                               @onchange="@OnCheckOutDateChanged"/>
                                        <ValidationMessage For="@(() => mainFormModel.ReservationDetails.CheckOutDate)" class="text-danger"/>
                                        @if (!string.IsNullOrEmpty(dateValidationMessage))
                                        {
                                            <div class="text-danger small mt-1">
                                                <i class="bi bi-exclamation-triangle"></i> @dateValidationMessage
                                            </div>
                                        }
                                    </div>
                                </div>

                                @if (isEmailConfirmed && IsValidDateRange())
                                {
                                    <div class="row mb-4">
                                        <div class="col-12">
                                            <div class="availability-status-card p-3 rounded border @GetAvailabilityStatusClass()">
                                                @if (checkingAvailability)
                                                {
                                                    <div class="d-flex align-items-center">
                                                        <div class="spinner-border spinner-border-sm text-primary me-2" role="status"></div>
                                                        <span>Sprawdzam dostępność pokoju...</span>
                                                    </div>
                                                }
                                                else if (availabilityResult == AvailabilityStatus.Available)
                                                {
                                                    <div class="d-flex align-items-center text-success">
                                                        <i class="bi bi-check-circle-fill me-2"></i>
                                                        <div>
                                                            <strong>Pokój dostępny!</strong>
                                                            <div class="small">Wybrane daty są dostępne dla tego pokoju</div>
                                                        </div>
                                                    </div>
                                                }
                                                else if (availabilityResult == AvailabilityStatus.Unavailable)
                                                {
                                                    <div class="d-flex align-items-center text-danger">
                                                        <i class="bi bi-x-circle-fill me-2"></i>
                                                        <div>
                                                            <strong>Pokój niedostępny</strong>
                                                            <div class="small">Wybrane daty są już zajęte lub niedostępne</div>
                                                        </div>
                                                    </div>
                                                }
                                                else if (availabilityResult == AvailabilityStatus.Error)
                                                {
                                                    <div class="d-flex align-items-center text-warning">
                                                        <i class="bi bi-exclamation-triangle-fill me-2"></i>
                                                        <div>
                                                            <strong>Błąd sprawdzania dostępności</strong>
                                                            <div class="small">Spróbuj ponownie lub zmień daty</div>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }

                                <div class="row mb-4">
                                    <div class="col-md-6">
                                        <label for="guestCount" class="form-label">
                                            <i class="bi bi-people"></i> Liczba gości
                                        </label>
                                        <InputNumber id="guestCount" class="form-control" @bind-Value="mainFormModel.ReservationDetails.GuestCount"
                                                     min="1" max="10" disabled="@(!isEmailConfirmed)"/>
                                        <ValidationMessage For="@(() => mainFormModel.ReservationDetails.GuestCount)" class="text-danger"/>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">Długość pobytu</label>
                                        <div class="form-control-plaintext">
                                            @if (GetStayDuration() > 0)
                                            {
                                                <strong>@GetStayDuration() @(GetStayDuration() == 1 ? "noc" : GetStayDuration() < 5 ? "noce" : "nocy")</strong>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Wybierz daty</span>
                                            }
                                        </div>
                                    </div>
                                </div>

                                <div class="mb-4">
                                    <label for="specialRequests" class="form-label">
                                        <i class="bi bi-chat-dots"></i> Specjalne życzenia (opcjonalne)
                                    </label>
                                    <InputTextArea id="specialRequests" class="form-control" @bind-Value="mainFormModel.ReservationDetails.SpecialRequests"
                                                   rows="3" placeholder="Np. łóżko dziecięce, pokój dla niepalących, wysokie piętro..."
                                                   disabled="@(!isEmailConfirmed)"/>
                                </div>
                            </div>
                        </div>

                        @if (isEmailConfirmed)
                        {
                            <div class="card border-0 shadow-sm mb-4">
                                <div class="card-header bg-white border-0">
                                    <h5 class="mb-0">
                                        <i class="bi bi-person-fill text-primary"></i> Dane Klienta
                                    </h5>
                                </div>
                                <div class="card-body">
                                    <div class="row mb-3">
                                        <div class="col-md-6">
                                            <label for="firstName" class="form-label">Imię</label>
                                            <InputText id="firstName" class="form-control" @bind-Value="mainFormModel.CustomerDetails.FirstName"/>
                                            <ValidationMessage For="@(() => mainFormModel.CustomerDetails.FirstName)" class="text-danger"/>
                                        </div>
                                        <div class="col-md-6">
                                            <label for="lastName" class="form-label">Nazwisko</label>
                                            <InputText id="lastName" class="form-control" @bind-Value="mainFormModel.CustomerDetails.LastName"/>
                                            <ValidationMessage For="@(() => mainFormModel.CustomerDetails.LastName)" class="text-danger"/>
                                        </div>
                                    </div>

                                    <div class="row mb-3">
                                        <div class="col-md-6">
                                            <label for="phoneNumber" class="form-label">Telefon</label>
                                            <InputText id="phoneNumber" class="form-control" @bind-Value="mainFormModel.CustomerDetails.PhoneNumber"/>
                                            <ValidationMessage For="@(() => mainFormModel.CustomerDetails.PhoneNumber)" class="text-danger"/>
                                        </div>
                                        <div class="col-md-6">
                                            <label for="country" class="form-label">Kraj</label>
                                            <InputText id="country" class="form-control" @bind-Value="mainFormModel.CustomerDetails.Country"/>
                                            <ValidationMessage For="@(() => mainFormModel.CustomerDetails.Country)" class="text-danger"/>
                                        </div>
                                    </div>

                                    <div class="row mb-3">
                                        <div class="col-md-8">
                                            <label for="address" class="form-label">Adres</label>
                                            <InputText id="address" class="form-control" @bind-Value="mainFormModel.CustomerDetails.Address"/>
                                            <ValidationMessage For="@(() => mainFormModel.CustomerDetails.Address)" class="text-danger"/>
                                        </div>
                                        <div class="col-md-4">
                                            <label for="city" class="form-label">Miasto</label>
                                            <InputText id="city" class="form-control" @bind-Value="mainFormModel.CustomerDetails.City"/>
                                            <ValidationMessage For="@(() => mainFormModel.CustomerDetails.City)" class="text-danger"/>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }

                        @if (isEmailConfirmed && availabilityResult == AvailabilityStatus.Available)
                        {
                            <div class="card border-0 shadow-sm mb-4">
                                <div class="card-header bg-white border-0">
                                    <h5 class="mb-0">
                                        <i class="bi bi-plus-circle text-primary"></i> Dodatkowe usługi (opcjonalne)
                                    </h5>
                                </div>
                                <div class="card-body">
                                    @if (availableServices?.Any() == true)
                                    {
                                        <div class="row g-3">
                                            @foreach (var service in availableServices)
                                            {
                                                <div class="col-md-6">
                                                    <div class="card h-100 border-light">
                                                        <div class="card-body p-3">
                                                            <div class="d-flex justify-content-between align-items-start mb-2">
                                                                <h6 class="card-title mb-1">@service.Name</h6>
                                                                <span class="badge bg-primary">@service.FinalPrice.ToString("C", polishCulture)</span>
                                                            </div>
                                                            <p class="card-text small text-muted mb-2">@service.Description</p>
                                                            <div class="d-flex align-items-center gap-2">
                                                                <button type="button" class="btn btn-outline-danger btn-sm"
                                                                        @onclick="() => RemoveService(service.Id)"
                                                                        disabled="@(!IsServiceAdded(service.Id))">
                                                                    <i class="bi bi-dash"></i>
                                                                </button>
                                                                <span class="mx-2">@GetServiceQuantity(service.Id)</span>
                                                                <button type="button" class="btn btn-outline-success btn-sm"
                                                                        @onclick="() => AddService(service.Id)">
                                                                    <i class="bi bi-plus"></i>
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    }
                                    else if (loadingServices)
                                    {
                                        <div class="text-center py-3">
                                            <div class="spinner-border spinner-border-sm text-primary" role="status">
                                                <span class="visually-hidden">Ładowanie usług...</span>
                                            </div>
                                            <p class="mt-2 text-muted small">Wczytywanie dostępnych usług...</p>
                                        </div>
                                    }
                                    else
                                    {
                                        <p class="text-muted">Brak dostępnych usług dodatkowych dla tego hotelu.</p>
                                    }
                                </div>
                            </div>
                            
                            <!-- NOWA SEKCJA PARKINGU -->
                            <div class="card border-0 shadow-sm mb-4">
                                <div class="card-header bg-white border-0">
                                    <h5 class="mb-0">
                                        <i class="bi bi-p-square text-primary"></i> Miejsca parkingowe (opcjonalne)
                                    </h5>
                                </div>
                                <div class="card-body">
                                    @if (availableParkings?.Any() == true)
                                    {
                                        <div class="row g-3">
                                            @foreach (var parking in availableParkings)
                                            {
                                                <div class="col-md-6">
                                                    <div class="card h-100 border-light">
                                                        <div class="card-body p-3">
                                                            <div class="d-flex justify-content-between align-items-start mb-2">
                                                                <h6 class="card-title mb-1">Miejsce parkingowe</h6>
                                                                <span class="badge bg-primary">@parking.FinalPrice.ToString("C", polishCulture)/doba</span>
                                                            </div>
                                                            <p class="card-text small text-muted mb-2">@parking.Description</p>
                                                            <div class="d-flex align-items-center gap-2">
                                                                <button type="button" class="btn btn-outline-danger btn-sm"
                                                                        @onclick="() => RemoveParking(parking.Id)"
                                                                        disabled="@(!IsParkingAdded(parking.Id))">
                                                                    <i class="bi bi-dash"></i>
                                                                </button>
                                                                <span class="mx-2">@GetParkingQuantity(parking.Id)</span>
                                                                <button type="button" class="btn btn-outline-success btn-sm"
                                                                        @onclick="() => AddParking(parking.Id)">
                                                                    <i class="bi bi-plus"></i>
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    }
                                    else if (loadingParkings)
                                    {
                                        <div class="text-center py-3">
                                            <div class="spinner-border spinner-border-sm text-primary" role="status">
                                                <span class="visually-hidden">Ładowanie...</span>
                                            </div>
                                            <p class="mt-2 text-muted small">Wczytywanie dostępnych parkingów...</p>
                                        </div>
                                    }
                                    else
                                    {
                                        <p class="text-muted">Brak dostępnych miejsc parkingowych dla tego hotelu.</p>
                                    }
                                </div>
                            </div>
                        }

                        <div class="row mb-4">
                            <div class="col-12">
                                <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                                    <button type="button" class="btn btn-outline-secondary me-md-2" @onclick="GoBack">
                                        <i class="bi bi-arrow-left"></i> Cofnij
                                    </button>

                                    @if (availabilityResult == AvailabilityStatus.Available)
                                    {
                                        <button type="submit" class="btn btn-success" disabled="@(!isEmailConfirmed || creatingOrder)">
                                            @if (creatingOrder)
                                            {
                                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                                <span>Tworzę zamówienie...</span>
                                            }
                                            else
                                            {
                                                <i class="bi bi-cart-plus"></i>
                                                <span>Utwórz zamówienie</span>
                                            }
                                        </button>
                                    }
                                    else if (availabilityResult == AvailabilityStatus.Unavailable)
                                    {
                                        <button type="button" class="btn btn-outline-danger" disabled>
                                            <i class="bi bi-x-circle"></i>
                                            <span>Pokój niedostępny w wybranych datach</span>
                                        </button>
                                    }
                                    else if (availabilityResult == AvailabilityStatus.Error)
                                    {
                                        <button type="button" class="btn btn-outline-warning" @onclick="CheckAvailabilityManually" disabled="@checkingAvailability">
                                            @if (checkingAvailability)
                                            {
                                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                                <span>Sprawdzam ponownie...</span>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-clockwise"></i>
                                                <span>Spróbuj ponownie</span>
                                            }
                                        </button>
                                    }
                                    else if (!isEmailConfirmed)
                                    {
                                        <button type="button" class="btn btn-outline-warning" disabled>
                                            <i class="bi bi-envelope-exclamation"></i>
                                            <span>Potwierdź email aby kontynuować</span>
                                        </button>
                                    }
                                    else if (!IsValidDateRange())
                                    {
                                        <button type="button" class="btn btn-outline-secondary" disabled>
                                            <i class="bi bi-calendar-x"></i>
                                            <span>Wybierz prawidłowe daty</span>
                                        </button>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-lg-4">
                        <div class="card border-0 shadow-sm sticky-top" style="top: 20px;">
                            <div class="card-header bg-primary text-white">
                                <h5 class="mb-0">
                                    <i class="bi bi-calculator"></i> Podsumowanie kosztów
                                </h5>
                            </div>
                            <div class="card-body">
                                @if (GetStayDuration() > 0)
                                {
                                    <div class="d-flex justify-content-between mb-2">
                                        <span>Cena za noc:</span>
                                        <strong>@GetEffectivePrice().ToString("C", polishCulture)</strong>
                                    </div>
                                    <div class="d-flex justify-content-between mb-2">
                                        <span>Liczba nocy:</span>
                                        <strong>@GetStayDuration()</strong>
                                    </div>
                                    <div class="d-flex justify-content-between mb-2">
                                        <span>Liczba gości:</span>
                                        <strong>@mainFormModel.ReservationDetails.GuestCount</strong>
                                    </div>
                                    <hr>
                                    <div class="d-flex justify-content-between mb-2">
                                        <span class="h6">Koszt noclegu:</span>
                                        <strong class="h6 text-primary">@GetAccommodationCost().ToString("C", polishCulture)</strong>
                                    </div>

                                    @if (selectedServices?.Any() == true)
                                    {
                                        <div class="border-top pt-2 mt-2">
                                            <h6 class="mb-2">Usługi dodatkowe:</h6>
                                            @foreach (var serviceSelection in selectedServices)
                                            {
                                                var service = availableServices?.FirstOrDefault(s => s.Id == serviceSelection.Key);
                                                if (service != null)
                                                {
                                                    <div class="d-flex justify-content-between mb-1 small">
                                                        <span>@service.Name x @serviceSelection.Value:</span>
                                                        <span>@((service.FinalPrice * serviceSelection.Value).ToString("C", polishCulture))</span>
                                                    </div>
                                                }
                                            }
                                        </div>
                                    }

                                    <!-- ZMIANA W PODSUMOWANIU - KOSZT PARKINGU -->
                                    @if (selectedParkings?.Any() == true)
                                    {
                                        <div class="border-top pt-2 mt-2">
                                            <h6 class="mb-2">Miejsca parkingowe:</h6>
                                            @foreach (var parkingSelection in selectedParkings)
                                            {
                                                var parking = availableParkings?.FirstOrDefault(p => p.Id == parkingSelection.Key);
                                                if (parking != null)
                                                {
                                                    <div class="d-flex justify-content-between mb-1 small">
                                                        <span>Parking x @parkingSelection.Value:</span>
                                                        <span>@((parking.FinalPrice * parkingSelection.Value * GetStayDuration()).ToString("C", polishCulture))</span>
                                                    </div>
                                                }
                                            }
                                        </div>
                                    }

                                    <hr>
                                    <div class="d-flex justify-content-between mb-3">
                                        <span class="h5">Łączny koszt:</span>
                                        <strong class="h5 text-primary">@GetTotalCost().ToString("C", polishCulture)</strong>
                                    </div>

                                    @if (room.DiscountPercent > 0)
                                    {
                                        <div class="alert alert-success">
                                            <small>
                                                <i class="bi bi-tag"></i>
                                                Oszczędzasz @GetSavingsAmount().ToString("C", polishCulture)
                                                dzięki zniżce @room.DiscountPercent%!
                                            </small>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <p class="text-muted text-center">
                                        <i class="bi bi-calendar-x"></i><br/>
                                        Wybierz daty pobytu aby zobaczyć koszt
                                    </p>
                                }

                                @if (!isEmailConfirmed)
                                {
                                    <div class="alert alert-warning">
                                        <small>
                                            <i class="bi bi-exclamation-triangle"></i>
                                            Potwierdź email aby móc dokonać rezerwacji
                                        </small>
                                    </div>
                                }

                                @if (availabilityResult == AvailabilityStatus.Available)
                                {
                                    <div class="alert alert-success">
                                        <small>
                                            <i class="bi bi-check-circle"></i>
                                            Pokój dostępny w wybranych datach!
                                        </small>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>
        }
        else if (room != null && !isGuestUser && userRoleChecked)
        {
            <div class="text-center py-5">
                <i class="bi bi-shield-lock display-1 text-muted"></i>
                <h3 class="mt-3">Brak uprawnień do rezerwacji</h3>
                <p class="text-muted">
                    Ten pokój jest dostępny do rezerwacji tylko dla użytkowników z rolą "Guest".<br/>
                    Twoja obecna rola: <strong>@(currentUserRole ?? "Nieokreślona")</strong>
                </p>
                <button class="btn btn-primary" @onclick="GoToHotels">
                    <i class="bi bi-arrow-left"></i> Powrót do hoteli
                </button>
            </div>
        }
        else
        {
            <div class="text-center py-5">
                <i class="bi bi-door-closed display-1 text-muted"></i>
                <h3 class="mt-3">Brak danych pokoju</h3>
                <p class="text-muted">Nie udało się załadować informacji o pokoju.</p>
                <button class="btn btn-primary" @onclick="LoadRoomData">
                    <i class="bi bi-arrow-clockwise"></i> Spróbuj ponownie
                </button>
            </div>
        }
    }
    catch (Exception ex)
    {
        <div class="alert alert-danger">
            <h5>Błąd renderowania strony</h5>
            <p>@ex.Message</p>
            <button class="btn btn-primary" @onclick="GoToHotels">
                Powrót do hoteli
            </button>
        </div>
    }
</div>

<style>
    .availability-status-card {
        transition: all 0.3s ease;
    }
    
    .availability-status-card.bg-light {
        background-color: #f8f9fa !important;
    }
    
    .availability-status-card.bg-success-light {
        background-color: #d1e7dd !important;
        border-color: #198754 !important;
    }
    
    .availability-status-card.bg-danger-light {
        background-color: #f8d7da !important;
        border-color: #dc3545 !important;
    }
    
    .availability-status-card.bg-warning-light {
        background-color: #fff3cd !important;
        border-color: #ffc107 !important;
    }
</style>

@code {
    [Parameter] public int RoomId { get; set; }

    private RoomDetailsViewModel? room;
    private MainReservationFormModel mainFormModel = new();
    private EditContext? reservationEditContext;

    // Zmienne dla usług
    private List<HotelServiceResponse>? availableServices;
    private Dictionary<int, int> selectedServices = new();
    private bool loadingServices = false;

    // NOWE: Zmienne dla parkingów
    private List<HotelParkingResponse>? availableParkings;
    private Dictionary<int, int> selectedParkings = new();
    private bool loadingParkings = false;

    private bool isGuestUser = false;
    private bool userRoleChecked = false;
    private string? currentUserRole = null;

    private enum AvailabilityStatus
    {
        Unknown,
        Available,
        Unavailable,
        Error
    }

    private AvailabilityStatus availabilityResult = AvailabilityStatus.Unknown;
    private Timer? debounceTimer;
    private Dictionary<string, AvailabilityStatus> availabilityCache = new();
    private string dateValidationMessage = "";

    private bool isLoading = true;
    private bool checkingAvailability = false;
    private bool creatingOrder = false;
    private bool isEmailConfirmed = false;
    private bool emailVerificationChecked = false;
    private string errorMessage = "";
    private string pageTitle = "Rezerwacja pokoju - Hotel Management System";

    private readonly CultureInfo polishCulture = new("pl-PL");

    protected override async Task OnInitializedAsync()
    {
        reservationEditContext = new EditContext(mainFormModel);

        try
        {
            mainFormModel.ReservationDetails.CheckInDate = DateTime.Today.AddDays(1);
            mainFormModel.ReservationDetails.CheckOutDate = DateTime.Today.AddDays(2);
            mainFormModel.ReservationDetails.GuestCount = 1;

            availableServices = new List<HotelServiceResponse>();
            selectedServices = new Dictionary<int, int>();
            availableParkings = new List<HotelParkingResponse>();
            selectedParkings = new Dictionary<int, int>();

            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            if (!authState.User.Identity.IsAuthenticated)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            await CheckUserRole();

            if (!isGuestUser)
            {
                await LoadRoomData();
                return;
            }

            await CheckEmailVerificationStatus();
            await LoadRoomData();

            if (room != null)
            {
                await LoadAvailableServices(room.HotelId);
                await LoadAvailableParkings(room.HotelId); // NOWE: Ładowanie parkingów
            }

            if (isEmailConfirmed && IsValidDateRange())
            {
                await CheckAvailability();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Błąd inicjalizacji: {ex.Message}";
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task CheckUserRole()
    {
        try
        {
            var response = await Http.GetAsync("api/account/session");

            if (response.IsSuccessStatusCode)
            {
                var sessionData = await response.Content.ReadFromJsonAsync<SessionViewModel>();
                if (sessionData?.Roles != null && sessionData.Roles.Length > 0)
                {
                    currentUserRole = string.Join(", ", sessionData.Roles);
                    isGuestUser = sessionData.Roles.Contains("Guest", StringComparer.OrdinalIgnoreCase);
                }
                else
                {
                    currentUserRole = "Brak roli";
                    isGuestUser = false;
                }
            }
            else
            {
                currentUserRole = "Nie można określić roli";
                isGuestUser = false;
            }

            userRoleChecked = true;
        }
        catch (Exception)
        {
            currentUserRole = "Błąd sprawdzania roli";
            isGuestUser = false;
            userRoleChecked = true;
        }
    }

    private async Task ContactSupport()
    {
        await JSRuntime.InvokeVoidAsync("alert",
            "Aby uzyskać dostęp do rezerwacji, skontaktuj się z administratorem systemu. " +
            "Możliwe, że potrzebujesz zmiany roli na 'Guest' w swoim profilu.");
    }

    private async Task CreateOrderAndProceed()
    {
        if (reservationEditContext == null || !reservationEditContext.Validate())
        {
            await JSRuntime.InvokeVoidAsync("alert", "Proszę wypełnić wszystkie wymagane pola w formularzu rezerwacji i danych klienta.");
            return;
        }

        if (!isGuestUser)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Tylko użytkownicy z rolą 'Guest' mogą dokonywać rezerwacji.");
            return;
        }

        if (room == null || availabilityResult != AvailabilityStatus.Available || !isEmailConfirmed)
        {
            if (!isEmailConfirmed)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Musisz potwierdzić swój adres email przed dokonaniem rezerwacji.");
            }
            else if (availabilityResult != AvailabilityStatus.Available)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Pokój nie jest dostępny w wybranych datach. Sprawdź dostępność ponownie.");
            }
            return;
        }

        creatingOrder = true;

        try
        {
            var userId = "";
            try
            {
                var sessionResponse = await Http.GetAsync("api/account/session");
                if (sessionResponse.IsSuccessStatusCode)
                {
                    var sessionData = await sessionResponse.Content.ReadFromJsonAsync<SessionViewModel>();
                    if (sessionData != null)
                    {
                        userId = sessionData.Id;
                    }
                }
            }
            catch (Exception) { /* Ignoruj błąd pobierania sesji, userId pozostanie pusty */
            }

            var orderData = new
            {
                userId = userId,
                firstName = mainFormModel.CustomerDetails.FirstName,
                lastName = mainFormModel.CustomerDetails.LastName,
                phoneNumber = mainFormModel.CustomerDetails.PhoneNumber,
                address = mainFormModel.CustomerDetails.Address,
                city = mainFormModel.CustomerDetails.City,
                country = mainFormModel.CustomerDetails.Country
            };

            var response = await Http.PostAsJsonAsync("api/order", orderData);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();

                try
                {
                    var jsonDoc = System.Text.Json.JsonDocument.Parse(responseContent);
                    var orderId = 0;

                    if (jsonDoc.RootElement.TryGetProperty("orderId", out var orderIdProp))
                    {
                        orderId = orderIdProp.GetInt32();
                    }
                    else if (jsonDoc.RootElement.TryGetProperty("id", out var idProp))
                    {
                        orderId = idProp.GetInt32();
                    }
                    else if (int.TryParse(responseContent.Trim('"'), out var parsedId))
                    {
                        orderId = parsedId;
                    }

                    if (orderId > 0)
                    {
                        var reservationResult = await AddReservationToOrder(orderId);
                        if (reservationResult.Success && reservationResult.ReservationId.HasValue)
                        {
                            if (selectedServices.Any())
                            {
                                await AddServicesToReservation(reservationResult.ReservationId.Value);
                            }
                            // NOWE: Dodawanie parkingów do rezerwacji
                            if (selectedParkings.Any())
                            {
                                await AddParkingsToReservation(reservationResult.ReservationId.Value);
                            }

                            NavigationManager.NavigateTo($"/order/{orderId}"); // Przekierowanie do podsumowania zamówienia
                        }
                        else
                        {
                            errorMessage = $"Błąd dodawania rezerwacji: {reservationResult.ErrorMessage}";
                        }
                    }
                    else
                    {
                        errorMessage = "Nie udało się uzyskać ID zamówienia z odpowiedzi serwera.";
                    }
                }
                catch (System.Text.Json.JsonException)
                {
                    if (int.TryParse(responseContent.Trim(), out var directId))
                    {
                        var reservationResult = await AddReservationToOrder(directId);

                        if (reservationResult.Success && reservationResult.ReservationId.HasValue)
                        {
                            if (selectedServices.Any())
                            {
                                await AddServicesToReservation(reservationResult.ReservationId.Value);
                            }
                            // NOWE: Dodawanie parkingów do rezerwacji
                            if (selectedParkings.Any())
                            {
                                await AddParkingsToReservation(reservationResult.ReservationId.Value);
                            }

                            NavigationManager.NavigateTo($"/order/{directId}");
                        }
                        else
                        {
                            errorMessage = $"Błąd dodawania rezerwacji: {reservationResult.ErrorMessage}";
                        }
                    }
                    else
                    {
                        errorMessage = $"Nieprawidłowa odpowiedź serwera: {responseContent}";
                    }
                }
            }
            else
            {
                var errorBody = await response.Content.ReadAsStringAsync();
                errorMessage = $"Błąd tworzenia zamówienia: {response.StatusCode}. Szczegóły: {errorBody}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Błąd tworzenia zamówienia: {ex.Message}";
        }
        finally
        {
            creatingOrder = false;
            StateHasChanged();
        }
    }

    private async Task LoadAvailableServices(int hotelId)
    {
        loadingServices = true;
        try
        {
            var response = await Http.GetAsync($"api/hotel-services/get-by-hotel/{hotelId}");

            if (response.IsSuccessStatusCode)
            {
                availableServices = await response.Content.ReadFromJsonAsync<List<HotelServiceResponse>>() ?? new List<HotelServiceResponse>();
            }
            else
            {
                availableServices = new List<HotelServiceResponse>();
            }
        }
        catch (Exception)
        {
            availableServices = new List<HotelServiceResponse>();
        }
        finally
        {
            loadingServices = false;
            StateHasChanged();
        }
    }

    // NOWA: Metoda do ładowania parkingów
    private async Task LoadAvailableParkings(int hotelId)
    {
        loadingParkings = true;
        try
        {
            var response = await Http.GetAsync($"api/hotel-parkings/get-by-hotel/{hotelId}");

            if (response.IsSuccessStatusCode)
            {
                availableParkings = await response.Content.ReadFromJsonAsync<List<HotelParkingResponse>>() ?? new List<HotelParkingResponse>();
            }
            else
            {
                availableParkings = new List<HotelParkingResponse>();
            }
        }
        catch (Exception)
        {
            availableParkings = new List<HotelParkingResponse>();
        }
        finally
        {
            loadingParkings = false;
            StateHasChanged();
        }
    }

    // --- Logika dla usług ---
    private void AddService(int serviceId)
    {
        if (selectedServices.ContainsKey(serviceId))
        {
            selectedServices[serviceId]++;
        }
        else
        {
            selectedServices[serviceId] = 1;
        }
        StateHasChanged();
    }

    private void RemoveService(int serviceId)
    {
        if (selectedServices.ContainsKey(serviceId))
        {
            selectedServices[serviceId]--;
            if (selectedServices[serviceId] <= 0)
            {
                selectedServices.Remove(serviceId);
            }
        }
        StateHasChanged();
    }

    private int GetServiceQuantity(int serviceId) => selectedServices.GetValueOrDefault(serviceId, 0);
    private bool IsServiceAdded(int serviceId) => GetServiceQuantity(serviceId) > 0;

    // --- NOWA: Logika dla parkingów ---
    private void AddParking(int parkingId)
    {
        if (selectedParkings.ContainsKey(parkingId))
        {
            selectedParkings[parkingId]++;
        }
        else
        {
            selectedParkings[parkingId] = 1;
        }
        StateHasChanged();
    }

    private void RemoveParking(int parkingId)
    {
        if (selectedParkings.ContainsKey(parkingId))
        {
            selectedParkings[parkingId]--;
            if (selectedParkings[parkingId] <= 0)
            {
                selectedParkings.Remove(parkingId);
            }
        }
        StateHasChanged();
    }

    private int GetParkingQuantity(int parkingId) => selectedParkings.GetValueOrDefault(parkingId, 0);
    private bool IsParkingAdded(int parkingId) => GetParkingQuantity(parkingId) > 0;

    // --- Kalkulacja kosztów ---
    private decimal GetServicesCost()
    {
        if (availableServices == null) return 0;

        decimal total = 0;
        foreach (var serviceSelection in selectedServices)
        {
            var service = availableServices.FirstOrDefault(s => s.Id == serviceSelection.Key);
            if (service != null)
            {
                total += service.FinalPrice * serviceSelection.Value;
            }
        }
        return total;
    }

    // NOWA: Metoda do kalkulacji kosztu parkingu
    private decimal GetParkingsCost()
    {
        if (availableParkings == null) return 0;

        decimal total = 0;
        foreach (var parkingSelection in selectedParkings)
        {
            var parking = availableParkings.FirstOrDefault(p => p.Id == parkingSelection.Key);
            if (parking != null)
            {
                // Koszt parkingu jest za dobę, więc mnożymy przez długość pobytu
                total += parking.FinalPrice * parkingSelection.Value * GetStayDuration();
            }
        }
        return total;
    }

    // ZMIANA: Dodajemy koszt parkingu do sumy całkowitej
    private decimal GetTotalCost()
    {
        return GetAccommodationCost() + GetServicesCost() + GetParkingsCost();
    }

    // --- Reszta logiki strony (bez zmian) ---

    private bool IsValidDateRange()
    {
        if (mainFormModel.ReservationDetails.CheckInDate < DateTime.Today)
        {
            mainFormModel.ReservationDetails.CheckInDate = DateTime.Today;
        }

        if (mainFormModel.ReservationDetails.CheckOutDate <= mainFormModel.ReservationDetails.CheckInDate)
        {
            mainFormModel.ReservationDetails.CheckOutDate = mainFormModel.ReservationDetails.CheckInDate.AddDays(1);
            StateHasChanged(); // Ensure UI updates if dates are corrected
        }

        // Validate again after potential corrections
        if (mainFormModel.ReservationDetails.CheckInDate < DateTime.Today)
        {
            dateValidationMessage = "Data zameldowania nie może być wcześniejsza niż dzisiaj";
            return false;
        }

        if (mainFormModel.ReservationDetails.CheckOutDate <= mainFormModel.ReservationDetails.CheckInDate)
        {
            dateValidationMessage = "Data wymeldowania musi być późniejsza niż data zameldowania";
            return false;
        }

        var stayDuration = (mainFormModel.ReservationDetails.CheckOutDate - mainFormModel.ReservationDetails.CheckInDate).Days;
        if (stayDuration > 30) // Example: Max 30 days stay
        {
            dateValidationMessage = "Maksymalny okres pobytu to 30 dni";
            return false;
        }

        dateValidationMessage = ""; // Clear message if all valid
        return true;
    }

    private async Task OnCheckInDateChanged(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out DateTime newDate))
        {
            mainFormModel.ReservationDetails.CheckInDate = newDate;

            if (mainFormModel.ReservationDetails.CheckInDate >= mainFormModel.ReservationDetails.CheckOutDate)
            {
                mainFormModel.ReservationDetails.CheckOutDate = mainFormModel.ReservationDetails.CheckInDate.AddDays(1);
            }

            await TriggerAvailabilityCheck();
        }
    }

    private async Task OnCheckOutDateChanged(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out DateTime newDate))
        {
            mainFormModel.ReservationDetails.CheckOutDate = newDate;

            if (mainFormModel.ReservationDetails.CheckOutDate <= mainFormModel.ReservationDetails.CheckInDate)
            {
                mainFormModel.ReservationDetails.CheckInDate = mainFormModel.ReservationDetails.CheckOutDate.AddDays(-1);

                if (mainFormModel.ReservationDetails.CheckInDate < DateTime.Today)
                {
                    mainFormModel.ReservationDetails.CheckInDate = DateTime.Today;
                    mainFormModel.ReservationDetails.CheckOutDate = DateTime.Today.AddDays(1);
                }
            }

            await TriggerAvailabilityCheck();
        }
    }

    private async Task TriggerAvailabilityCheck()
    {
        debounceTimer?.Stop();
        debounceTimer?.Dispose();

        availabilityResult = AvailabilityStatus.Unknown;
        StateHasChanged();

        if (!isEmailConfirmed || !IsValidDateRange())
        {
            return;
        }

        debounceTimer = new Timer(300);
        debounceTimer.Elapsed += async (sender, e) =>
        {
            debounceTimer.Stop();
            await InvokeAsync(async () => { await CheckAvailability(); });
        };
        debounceTimer.Start();
    }

    private async Task CheckAvailabilityManually()
    {
        if (!isEmailConfirmed || !IsValidDateRange())
        {
            return;
        }

        var cacheKey = GetCacheKey();
        availabilityCache.Remove(cacheKey);

        await CheckAvailability();
    }

    private async Task CheckAvailability()
    {
        if (room == null || !isEmailConfirmed || checkingAvailability)
        {
            return;
        }

        checkingAvailability = true;
        availabilityResult = AvailabilityStatus.Unknown;
        StateHasChanged();

        try
        {
            var requestData = new
            {
                roomId = RoomId,
                from = mainFormModel.ReservationDetails.CheckInDate.ToString("yyyy-MM-dd"),
                to = mainFormModel.ReservationDetails.CheckOutDate.ToString("yyyy-MM-dd")
            };

            var response = await Http.PostAsJsonAsync("api/reservation/get-available-days", requestData);

            if (response.IsSuccessStatusCode)
            {
                var availableDays = await response.Content.ReadFromJsonAsync<List<string>>() ?? new List<string>();
                var requiredDays = GetRequiredDays();

                bool isFullyAvailable;

                if (availableDays.Count == 0 && requiredDays.Any())
                {
                    isFullyAvailable = false;
                }
                else
                {
                    isFullyAvailable = requiredDays.All(day => availableDays.Contains(day));
                }

                availabilityResult = isFullyAvailable ? AvailabilityStatus.Available : AvailabilityStatus.Unavailable;

                var cacheKey = GetCacheKey();
                availabilityCache[cacheKey] = availabilityResult;
            }
            else
            {
                availabilityResult = AvailabilityStatus.Error;
            }
        }
        catch (Exception)
        {
            availabilityResult = AvailabilityStatus.Error;
        }
        finally
        {
            checkingAvailability = false;
            StateHasChanged();
        }
    }

    private List<string> GetRequiredDays()
    {
        var days = new List<string>();
        var current = mainFormModel.ReservationDetails.CheckInDate;

        while (current < mainFormModel.ReservationDetails.CheckOutDate)
        {
            days.Add(current.ToString("yyyy-MM-dd"));
            current = current.AddDays(1);
        }

        return days;
    }

    private string GetCacheKey()
    {
        return $"{RoomId}_{mainFormModel.ReservationDetails.CheckInDate:yyyy-MM-dd}_{mainFormModel.ReservationDetails.CheckOutDate:yyyy-MM-dd}";
    }

    private string GetAvailabilityStatusClass()
    {
        return availabilityResult switch
        {
            AvailabilityStatus.Available => "bg-success-light",
            AvailabilityStatus.Unavailable => "bg-danger-light",
            AvailabilityStatus.Error => "bg-warning-light",
            _ => "bg-light"
        };
    }

    private async Task HandleSubmit()
    {
        if (availabilityResult == AvailabilityStatus.Available)
        {
            await CreateOrderAndProceed();
        }
    }

    private async Task CheckEmailVerificationStatus()
    {
        try
        {
            var response = await Http.GetAsync("api/account/session");

            if (response.IsSuccessStatusCode)
            {
                var sessionData = await response.Content.ReadFromJsonAsync<SessionViewModel>();
                isEmailConfirmed = sessionData?.IsEmailConfirmed ?? false;
            }
            else
            {
                isEmailConfirmed = false;
            }

            emailVerificationChecked = true;
        }
        catch (Exception)
        {
            isEmailConfirmed = false;
            emailVerificationChecked = true;
        }
    }

    private async Task CheckEmailStatus()
    {
        await CheckEmailVerificationStatus();
        StateHasChanged();

        if (isEmailConfirmed)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Email został potwierdzony! Możesz teraz dokonać rezerwacji.");

            if (IsValidDateRange())
            {
                await CheckAvailability();
            }
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Email nadal nie został potwierdzony. Sprawdź swoją skrzynkę pocztową.");
        }
    }

    private async Task SendVerificationEmail()
    {
        try
        {
            var response = await Http.PostAsync("api/account/send-verification-email", null);

            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Link weryfikacyjny został wysłany na Twój adres email.");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Wystąpił błąd podczas wysyłania linku weryfikacyjnego.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Błąd: {ex.Message}");
        }
    }

    private async Task AddServicesToReservation(int reservationId)
    {
        foreach (var serviceSelection in selectedServices)
        {
            if (serviceSelection.Value > 0)
            {
                try
                {
                    var requestData = new { reservationId = reservationId, serviceId = serviceSelection.Key, quantity = serviceSelection.Value };
                    var response = await Http.PostAsJsonAsync("api/reservation/service/add", requestData);

                    if (!response.IsSuccessStatusCode)
                    {
                        Console.WriteLine($"Error adding service {serviceSelection.Key} (Quantity: {serviceSelection.Value}): {response.StatusCode}");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Exception adding service {serviceSelection.Key} (Quantity: {serviceSelection.Value}): {ex.Message}");
                }
            }
        }
    }

    // NOWA: Metoda do dodawania parkingów do rezerwacji
    private async Task AddParkingsToReservation(int reservationId)
    {
        foreach (var parkingSelection in selectedParkings)
        {
            if (parkingSelection.Value > 0)
            {
                try
                {
                    var requestData = new { reservationId = reservationId, parkingId = parkingSelection.Key, quantity = parkingSelection.Value };
                    var response = await Http.PostAsJsonAsync("api/reservation/parking/add", requestData);

                    if (!response.IsSuccessStatusCode)
                    {
                        Console.WriteLine($"Error adding parking {parkingSelection.Key} (Quantity: {parkingSelection.Value}): {response.StatusCode}");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Exception adding parking {parkingSelection.Key} (Quantity: {parkingSelection.Value}): {ex.Message}");
                }
            }
        }
    }


    public class ReservationResult
    {
        public bool Success { get; set; }
        public string ErrorMessage { get; set; } = "";
        public int? ReservationId { get; set; }
    }

    public class SessionViewModel
    {
        public string Id { get; set; } = "";
        public string UserName { get; set; } = "";
        public string Email { get; set; } = "";
        public string[] Roles { get; set; } = Array.Empty<string>();
        public string ProfilePicture { get; set; } = "";
        public bool IsEmailConfirmed { get; set; }
    }

    private async Task<ReservationResult> AddReservationToOrder(int orderId)
    {
        try
        {
            var reservationData = new
            {
                orderId = orderId,
                roomId = RoomId,
                from = mainFormModel.ReservationDetails.CheckInDate.ToString("yyyy-MM-dd"),
                to = mainFormModel.ReservationDetails.CheckOutDate.ToString("yyyy-MM-dd"),
                guestCount = mainFormModel.ReservationDetails.GuestCount,
                specialRequests = mainFormModel.ReservationDetails.SpecialRequests
            };

            var response = await Http.PostAsJsonAsync("api/reservation", reservationData);

            if (response.StatusCode == System.Net.HttpStatusCode.NoContent || response.StatusCode == System.Net.HttpStatusCode.OK || response.StatusCode == System.Net.HttpStatusCode.Created)
            {
                var responseContent = await response.Content.ReadAsStringAsync();

                if (!string.IsNullOrEmpty(responseContent))
                {
                    try
                    {
                        var jsonDoc = System.Text.Json.JsonDocument.Parse(responseContent);
                        if (jsonDoc.RootElement.TryGetProperty("reservationId", out var reservationIdProp))
                        {
                            var reservationId = reservationIdProp.GetInt32();
                            return new ReservationResult { Success = true, ReservationId = reservationId };
                        }
                        else if (jsonDoc.RootElement.TryGetProperty("id", out var idProp))
                        {
                            var reservationId = idProp.GetInt32();
                            return new ReservationResult { Success = true, ReservationId = reservationId };
                        }
                    }
                    catch (System.Text.Json.JsonException)
                    {
                        if (int.TryParse(responseContent.Trim('"'), out var directId))
                        {
                            return new ReservationResult { Success = true, ReservationId = directId };
                        }
                    }
                }

                return new ReservationResult { Success = true };
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                return new ReservationResult
                {
                    Success = false,
                    ErrorMessage = $"Błąd serwera: {response.StatusCode} - {errorContent}"
                };
            }
        }
        catch (Exception ex)
        {
            return new ReservationResult
            {
                Success = false,
                ErrorMessage = $"Błąd połączenia: {ex.Message}"
            };
        }
    }

    public void Dispose()
    {
        debounceTimer?.Stop();
        debounceTimer?.Dispose();
    }

    public class HotelServiceResponse
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public string Description { get; set; } = "";
        public decimal Price { get; set; }
        public decimal Discount { get; set; }
        public decimal FinalPrice { get; set; }
        public int HotelId { get; set; }
    }

    // NOWA: Model dla parkingu
    public class HotelParkingResponse
    {
        public int Id { get; set; }
        public int CarSpaces { get; set; }
        public string Description { get; set; } = "";
        public decimal Price { get; set; }
        public decimal DiscountPercent { get; set; }
        public decimal FinalPrice { get; set; }
        public int HotelId { get; set; }
    }


    private string GetSafeRoomName() => room?.RoomName ?? "Pokój";
    private string GetSafeRoomType() => room?.RoomType ?? "Typ pokoju";
    private bool HasRoomImages() => room?.RoomImages?.Any() == true;
    private IEnumerable<string> GetSafeRoomImages() => room?.RoomImages?.Take(6) ?? Enumerable.Empty<string>();
    private decimal GetEffectivePrice() => room?.FinalPrice ?? room?.Price ?? 0;

    private string GetMinCheckOutDate()
    {
        var minDate = mainFormModel.ReservationDetails.CheckInDate.AddDays(1);
        return minDate.ToString("yyyy-MM-dd");
    }

    private int GetStayDuration()
    {
        if (mainFormModel.ReservationDetails.CheckOutDate > mainFormModel.ReservationDetails.CheckInDate)
        {
            return (mainFormModel.ReservationDetails.CheckOutDate - mainFormModel.ReservationDetails.CheckInDate).Days;
        }
        return 0;
    }

    private decimal GetAccommodationCost()
    {
        return GetEffectivePrice() * GetStayDuration();
    }

    private decimal GetSavingsAmount()
    {
        if (room == null || room.DiscountPercent <= 0) return 0;
        return (room.Price - room.FinalPrice) * GetStayDuration();
    }

    private async Task LoadRoomData()
    {
        isLoading = true;
        errorMessage = "";

        try
        {
            var response = await Http.GetAsync($"api/hotel-room/{RoomId}");

            if (response.IsSuccessStatusCode)
            {
                room = await response.Content.ReadFromJsonAsync<RoomDetailsViewModel>();
                if (room != null)
                {
                    pageTitle = $"Rezerwacja - {GetSafeRoomName()} - Hotel Management System";
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                errorMessage = $"Pokój o ID {RoomId} nie został znaleziony.";
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                errorMessage = "Brak autoryzacji. Zaloguj się ponownie.";
            }
            else
            {
                errorMessage = $"Błąd ładowania pokoju: {response.StatusCode}";
            }
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Błąd połączenia z serwerem: {ex.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"Wystąpił nieoczekiwany błąd: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void GoBack()
    {
        if (room != null)
        {
            NavigationManager.NavigateTo($"/hotel/{room.HotelId}");
        }
        else
        {
            NavigationManager.NavigateTo("/hotels");
        }
    }

    private void GoToHotels()
    {
        NavigationManager.NavigateTo("/hotels");
    }

    public class MainReservationFormModel
    {
        public ReservationModel ReservationDetails { get; set; } = new();
        public CustomerDetailsModel CustomerDetails { get; set; } = new();
    }

    public class ReservationModel
    {
        [Required(ErrorMessage = "Data zameldowania jest wymagana.")]
        [Range(typeof(DateTime), "1900-01-01", "2999-12-31", ErrorMessage = "Nieprawidłowa data zameldowania.")]
        public DateTime CheckInDate { get; set; } = DateTime.Today.AddDays(1);

        [Required(ErrorMessage = "Data wymeldowania jest wymagana.")]
        [Range(typeof(DateTime), "1900-01-01", "2999-12-31", ErrorMessage = "Nieprawidłowa data wymeldowania.")]
        public DateTime CheckOutDate { get; set; } = DateTime.Today.AddDays(2);

        [Required(ErrorMessage = "Liczba gości jest wymagana.")]
        [Range(1, 10, ErrorMessage = "Liczba gości musi być między 1 a 10.")]
        public int GuestCount { get; set; } = 1;
        public string SpecialRequests { get; set; } = "";
    }

    public class CustomerDetailsModel
    {
        [Required(ErrorMessage = "Imię jest wymagane")]
        public string FirstName { get; set; } = "";

        [Required(ErrorMessage = "Nazwisko jest wymagane")]
        public string LastName { get; set; } = "";

        [Required(ErrorMessage = "Numer telefonu jest wymagany")]
        [Phone(ErrorMessage = "Nieprawidłowy format numeru telefonu")]
        public string PhoneNumber { get; set; } = "";

        [Required(ErrorMessage = "Adres jest wymagany")]
        public string Address { get; set; } = "";

        [Required(ErrorMessage = "Miasto jest wymagane")]
        public string City { get; set; } = "";

        [Required(ErrorMessage = "Kraj jest wymagany")]
        public string Country { get; set; } = "";
    }

    public class RoomDetailsViewModel
    {
        public int Id { get; set; }
        public int HotelId { get; set; }
        public string RoomName { get; set; } = "";
        public string RoomType { get; set; } = "";
        public decimal Price { get; set; }
        public decimal FinalPrice { get; set; }
        public int DiscountPercent { get; set; }
        public List<string>? RoomImages { get; set; }
    }
}