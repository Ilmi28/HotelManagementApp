@page "/user-management"
@using System.Text.Json
@using System.Text
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Staff,Manager,Admin")]

<PageTitle>Zarządzanie użytkownikami</PageTitle>

<div class="container-fluid my-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h2">
                    <i class="bi bi-people-fill"></i> Zarządzanie użytkownikami
                </h1>
                <div>
                    <button type="button" class="btn btn-success me-2" @onclick="OpenCreateUserModal">
                        <i class="bi bi-person-plus-fill"></i> Dodaj użytkownika
                    </button>
                    <div class="btn-group" role="group">
                        <button type="button" class="btn btn-outline-primary @(activeTab == "users" ? "active" : "")" 
                                @onclick='() => SetActiveTab("users")'>
                            <i class="bi bi-people"></i> Wszyscy użytkownicy
                        </button>
                        <button type="button" class="btn btn-outline-warning @(activeTab == "vip" ? "active" : "")" 
                                @onclick='() => SetActiveTab("vip")'>
                            <i class="bi bi-star"></i> VIP
                        </button>
                        <button type="button" class="btn btn-outline-danger @(activeTab == "blacklist" ? "active" : "")" 
                                @onclick='() => SetActiveTab("blacklist")'>
                            <i class="bi bi-person-x"></i> Czarna lista
                        </button>
                    </div>
                </div>
            </div>

            @if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Ładowanie...</span>
                    </div>
                </div>
            }
            else
            {
                <div class="card mb-4">
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-md-4">
                                <label for="searchInput" class="form-label">Wyszukaj:</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-search"></i></span>
                                    <input type="text" class="form-control" id="searchInput" 
                                           @bind="searchTerm" @oninput="OnSearchChanged"
                                           placeholder="Wpisz nazwę użytkownika lub email...">
                                </div>
                            </div>
                            <div class="col-md-3">
                                <label for="roleFilter" class="form-label">Filtruj po roli:</label>
                                <select class="form-select" id="roleFilter" @bind="selectedRoleFilter" @bind:after="OnFilterChanged">
                                    <option value="">Wszystkie role</option>
                                    <option value="Guest">Guest</option>
                                    <option value="VIP">VIP</option>
                                    <option value="Staff">Staff</option>
                                    <option value="Manager">Manager</option>
                                    <option value="Admin">Admin</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label for="statusFilter" class="form-label">Status:</label>
                                <select class="form-select" id="statusFilter" @bind="selectedStatusFilter" @bind:after="OnFilterChanged">
                                    <option value="">Wszystkie</option>
                                    <option value="active">Aktywny</option>
                                    <option value="inactive">Nieaktywny</option>
                                    <option value="blacklisted">Zablokowany</option>
                                </select>
                            </div>
                            <div class="col-md-2 d-flex align-items-end">
                                <button class="btn btn-outline-secondary w-100" @onclick="ClearFilters">
                                    <i class="bi bi-x-circle"></i> Wyczyść
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row mb-4">
                    <div class="col-md-3">
                        <div class="card text-center bg-primary text-white">
                            <div class="card-body">
                                <h5 class="card-title">@(filteredUsers?.Count ?? 0)</h5>
                                <p class="card-text">Łącznie użytkowników</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-center bg-success text-white">
                            <div class="card-body">
                                <h5 class="card-title">@(allUsers?.Count(u => u.Roles?.Contains("Guest") == true) ?? 0)</h5>
                                <p class="card-text">Goście</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-center bg-warning text-white">
                            <div class="card-body">
                                <h5 class="card-title">@(vipUsers?.Count ?? 0)</h5>
                                <p class="card-text">VIP</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-center bg-danger text-white">
                            <div class="card-body">
                                <h5 class="card-title">@(blacklistedUsers?.Count ?? 0)</h5>
                                <p class="card-text">Zablokowanych</p>
                            </div>
                        </div>
                    </div>
                </div>

                @if (activeTab == "users")
                {
                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="bi bi-people"></i> Lista użytkowników
                                @if (filteredUsers?.Any() == true)
                                {
                                    <span class="badge bg-primary ms-2">@filteredUsers.Count</span>
                                }
                            </h5>
                        </div>
                        <div class="card-body">
                            @if (filteredUsers?.Any() == true)
                            {
                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead class="table-dark">
                                            <tr>
                                                <th>Zdjęcie</th>
                                                <th>Użytkownik</th>
                                                <th>Email</th>
                                                <th>Role</th>
                                                <th>Status</th>
                                                <th>Data rejestracji</th>
                                                <th>Akcje</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var user in filteredUsers)
                                            {
                                                <tr>
                                                    <td>
                                                        @if (!string.IsNullOrEmpty(user.ProfilePicture))
                                                        {
                                                            <img src="@user.ProfilePicture" class="rounded-circle" 
                                                                 style="width: 40px; height: 40px; object-fit: cover;" 
                                                                 alt="Zdjęcie profilowe" />
                                                        }
                                                        else
                                                        {
                                                            <div class="bg-secondary rounded-circle d-flex align-items-center justify-content-center text-white" 
                                                                 style="width: 40px; height: 40px;">
                                                                <i class="bi bi-person"></i>
                                                            </div>
                                                        }
                                                    </td>
                                                    <td>
                                                        <div>
                                                            <strong>@user.UserName</strong>
                                                            <br>
                                                            <small class="text-muted">ID: @user.Id</small>
                                                        </div>
                                                    </td>
                                                    <td>
                                                        @user.Email
                                                        @if (user.IsEmailConfirmed)
                                                        {
                                                            <i class="bi bi-check-circle-fill text-success ms-1" title="Email potwierdzony"></i>
                                                        }
                                                        else
                                                        {
                                                            <i class="bi bi-exclamation-circle-fill text-warning ms-1" title="Email niepotwierdzony"></i>
                                                        }
                                                    </td>
                                                    <td>
                                                        @if (user.Roles?.Any() == true)
                                                        {
                                                            @foreach (var role in user.Roles)
                                                            {
                                                                <span class="badge @GetRoleBadgeClass(role) me-1">@role</span>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            <span class="text-muted">Brak ról</span>
                                                        }
                                                    </td>
                                                    <td>
                                                        <span class="badge @GetStatusBadgeClass(user.Status)">
                                                            @GetStatusText(user.Status)
                                                        </span>
                                                    </td>
                                                    <td>
                                                        <small>@(user.CreatedAt?.ToString("dd.MM.yyyy HH:mm") ?? "Nieznana")</small>
                                                    </td>
                                                    <td>
                                                        <div class="btn-group btn-group-sm" role="group">
                                                            <button class="btn btn-outline-info" @onclick="() => ViewUserDetails(user)" title="Szczegóły">
                                                                <i class="bi bi-eye"></i>
                                                            </button>
                                                            <button class="btn btn-outline-danger" 
                                                                    @onclick="() => DeleteUserAccount(user.Id, user.UserName)" 
                                                                    title="Usuń użytkownika">
                                                                <i class="bi bi-trash"></i>
                                                            </button>
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                            else
                            {
                                <div class="text-center py-4">
                                    <i class="bi bi-people text-muted" style="font-size: 3rem;"></i>
                                    <h5 class="text-muted mt-3">Brak użytkowników</h5>
                                    <p class="text-muted">Nie znaleziono użytkowników spełniających kryteria wyszukiwania.</p>
                                </div>
                            }
                        </div>
                    </div>
                }
                else if (activeTab == "vip")
                {
                    <div class="card">
                        <div class="card-header bg-warning text-white">
                            <h5 class="mb-0">
                                <i class="bi bi-star"></i> Lista VIP
                                @if (vipUsers?.Any() == true)
                                {
                                    <span class="badge bg-white text-warning ms-2">@vipUsers.Count</span>
                                }
                            </h5>
                        </div>
                        <div class="card-body">
                            @if (vipUsers?.Any() == true)
                            {
                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead class="table-warning">
                                            <tr>
                                                <th>Zdjęcie</th>
                                                <th>Użytkownik</th>
                                                <th>Email</th>
                                                <th>Status VIP</th>
                                                <th>Data przyznania</th>
                                                <th>Akcje</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var user in vipUsers)
                                            {
                                                <tr>
                                                    <td>
                                                        @if (!string.IsNullOrEmpty(user.ProfilePicture))
                                                        {
                                                            <img src="@user.ProfilePicture" class="rounded-circle" 
                                                                 style="width: 40px; height: 40px; object-fit: cover;" 
                                                                 alt="Zdjęcie profilowe" />
                                                        }
                                                        else
                                                        {
                                                            <div class="bg-warning rounded-circle d-flex align-items-center justify-content-center text-white" 
                                                                 style="width: 40px; height: 40px;">
                                                                <i class="bi bi-star"></i>
                                                            </div>
                                                        }
                                                    </td>
                                                    <td>
                                                        <div>
                                                            <strong>@user.UserName</strong>
                                                            <i class="bi bi-star-fill text-warning ms-1"></i>
                                                            <br>
                                                            <small class="text-muted">ID: @user.Id</small>
                                                        </div>
                                                    </td>
                                                    <td>@user.Email</td>
                                                    <td>
                                                        <span class="badge bg-warning">
                                                            <i class="bi bi-star"></i> VIP
                                                        </span>
                                                    </td>
                                                    <td>
                                                        <small>@(user.VipSince?.ToString("dd.MM.yyyy HH:mm") ?? "Nieznana")</small>
                                                    </td>
                                                    <td>
                                                        <button class="btn btn-outline-info btn-sm" @onclick="() => ViewUserDetails(user)" title="Szczegóły">
                                                            <i class="bi bi-eye"></i> Szczegóły
                                                        </button>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                            else
                            {
                                <div class="text-center py-4">
                                    <i class="bi bi-star text-warning" style="font-size: 3rem;"></i>
                                    <h5 class="text-muted mt-3">Brak użytkowników VIP</h5>
                                    <p class="text-muted">Obecnie nie ma żadnych użytkowników ze statusem VIP.</p>
                                </div>
                            }
                        </div>
                    </div>
                }
                else if (activeTab == "blacklist")
                {
                    <div class="card">
                        <div class="card-header bg-danger text-white">
                            <h5 class="mb-0">
                                <i class="bi bi-person-x"></i> Czarna lista
                                @if (blacklistedUsers?.Any() == true)
                                {
                                    <span class="badge bg-white text-danger ms-2">@blacklistedUsers.Count</span>
                                }
                            </h5>
                        </div>
                        <div class="card-body">
                            @if (blacklistedUsers?.Any() == true)
                            {
                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead class="table-danger">
                                            <tr>
                                                <th>Zdjęcie</th>
                                                <th>Użytkownik</th>
                                                <th>Email</th>
                                                <th>Powód blokady</th>
                                                <th>Data blokady</th>
                                                <th>Akcje</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var user in blacklistedUsers)
                                            {
                                                <tr>
                                                    <td>
                                                        @if (!string.IsNullOrEmpty(user.ProfilePicture))
                                                        {
                                                            <img src="@user.ProfilePicture" class="rounded-circle" 
                                                                 style="width: 40px; height: 40px; object-fit: cover; filter: grayscale(100%);" 
                                                                 alt="Zdjęcie profilowe" />
                                                        }
                                                        else
                                                        {
                                                            <div class="bg-danger rounded-circle d-flex align-items-center justify-content-center text-white" 
                                                                 style="width: 40px; height: 40px;">
                                                                <i class="bi bi-person-x"></i>
                                                            </div>
                                                        }
                                                    </td>
                                                    <td>
                                                        <div>
                                                            <strong class="text-muted">@user.UserName</strong>
                                                            <i class="bi bi-ban text-danger ms-1"></i>
                                                            <br>
                                                            <small class="text-muted">ID: @user.Id</small>
                                                        </div>
                                                    </td>
                                                    <td class="text-muted">@user.Email</td>
                                                    <td>
                                                        <span class="badge bg-danger">
                                                            @(user.BlacklistReason ?? "Nieznany powód")
                                                        </span>
                                                    </td>
                                                    <td>
                                                        <small>@(user.BlacklistedAt?.ToString("dd.MM.yyyy HH:mm") ?? "Nieznana")</small>
                                                    </td>
                                                    <td>
                                                        <button class="btn btn-outline-info btn-sm" @onclick="() => ViewUserDetails(user)" title="Szczegóły">
                                                            <i class="bi bi-eye"></i> Szczegóły
                                                        </button>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                            else
                            {
                                <div class="text-center py-4">
                                    <i class="bi bi-person-x text-danger" style="font-size: 3rem;"></i>
                                    <h5 class="text-muted mt-3">Brak zablokowanych użytkowników</h5>
                                    <p class="text-muted">Obecnie nie ma żadnych użytkowników na czarnej liście.</p>
                                </div>
                            }
                        </div>
                    </div>
                }
            }
        </div>
    </div>

    @if (showUserDetailsModal && selectedUser != null)
    {
        <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">
                            <i class="bi bi-person-circle"></i> Szczegóły użytkownika: @selectedUser.UserName
                        </h5>
                        <button type="button" class="btn-close" @onclick="CloseUserDetailsModal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-md-4 text-center">
                                @if (!string.IsNullOrEmpty(selectedUser.ProfilePicture))
                                {
                                    <img src="@selectedUser.ProfilePicture" class="rounded-circle mb-3" 
                                         style="width: 120px; height: 120px; object-fit: cover;" 
                                         alt="Zdjęcie profilowe" />
                                }
                                else
                                {
                                    <div class="bg-secondary rounded-circle d-flex align-items-center justify-content-center text-white mx-auto mb-3" 
                                         style="width: 120px; height: 120px; font-size: 3rem;">
                                        <i class="bi bi-person"></i>
                                    </div>
                                }
                                <h5>@selectedUser.UserName</h5>
                                @if (selectedUser.Roles?.Any() == true)
                                {
                                    <div class="mb-3">
                                        @foreach (var role in selectedUser.Roles)
                                        {
                                            <span class="badge @GetRoleBadgeClass(role) me-1">@role</span>
                                        }
                                    </div>
                                }
                            </div>
                            <div class="col-md-8">
                                <table class="table table-borderless">
                                    <tr>
                                        <td><strong>ID użytkownika:</strong></td>
                                        <td>@selectedUser.Id</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Email:</strong></td>
                                        <td>
                                            @selectedUser.Email
                                            @if (selectedUser.IsEmailConfirmed)
                                            {
                                                <i class="bi bi-check-circle-fill text-success ms-1" title="Potwierdzony"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-exclamation-circle-fill text-warning ms-1" title="Niepotwierdzony"></i>
                                            }
                                        </td>
                                    </tr>
                                    <tr>
                                        <td><strong>Status:</strong></td>
                                        <td>
                                            <span class="badge @GetStatusBadgeClass(selectedUser.Status)">
                                                @GetStatusText(selectedUser.Status)
                                            </span>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td><strong>Data rejestracji:</strong></td>
                                        <td>@(selectedUser.CreatedAt?.ToString("dd.MM.yyyy HH:mm:ss") ?? "Nieznana")</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Ostatnia aktywność:</strong></td>
                                        <td>@(selectedUser.LastActivity?.ToString("dd.MM.yyyy HH:mm:ss") ?? "Nieznana")</td>
                                    </tr>
                                    @if (selectedUser.VipSince.HasValue)
                                    {
                                        <tr>
                                            <td><strong>VIP od:</strong></td>
                                            <td>@selectedUser.VipSince.Value.ToString("dd.MM.yyyy HH:mm:ss")</td>
                                        </tr>
                                    }
                                    @if (selectedUser.BlacklistedAt.HasValue)
                                    {
                                        <tr>
                                            <td><strong>Zablokowany:</strong></td>
                                            <td>@selectedUser.BlacklistedAt.Value.ToString("dd.MM.yyyy HH:mm:ss")</td>
                                        </tr>
                                        <tr>
                                            <td><strong>Powód blokady:</strong></td>
                                            <td>@(selectedUser.BlacklistReason ?? "Nieznany")</td>
                                        </tr>
                                    }
                                </table>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseUserDetailsModal">Zamknij</button>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (showCreateUserModal)
    {
        <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <EditForm Model="newUserAccount" OnValidSubmit="HandleCreateUserAccountSubmit">
                        <DataAnnotationsValidator />
                        <div class="modal-header">
                            <h5 class="modal-title"><i class="bi bi-person-plus-fill"></i> Dodaj nowego użytkownika</h5>
                            <button type="button" class="btn-close" @onclick="CloseCreateUserModal"></button>
                        </div>
                        <div class="modal-body">
                            <div class="mb-3">
                                <label for="newUserName" class="form-label">Nazwa użytkownika:</label>
                                <InputText id="newUserName" class="form-control" @bind-Value="newUserAccount.UserName" />
                                <ValidationMessage For="@(() => newUserAccount.UserName)" />
                            </div>
                            <div class="mb-3">
                                <label for="newUserEmail" class="form-label">Email:</label>
                                <InputText id="newUserEmail" type="email" class="form-control" @bind-Value="newUserAccount.Email" />
                                <ValidationMessage For="@(() => newUserAccount.Email)" />
                            </div>
                            <div class="mb-3">
                                <label for="newUserPassword" class="form-label">Hasło:</label>
                                <InputText id="newUserPassword" type="password" class="form-control" @bind-Value="newUserAccount.Password" />
                                <ValidationMessage For="@(() => newUserAccount.Password)" />
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseCreateUserModal">Anuluj</button>
                            <button type="submit" class="btn btn-primary">Utwórz konto</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<UserDto>? allUsers;
    private List<UserDto>? filteredUsers;
    private List<VipUserDto>? vipUsers;
    private List<BlacklistedUserDto>? blacklistedUsers;
    private string activeTab = "users";
    private bool isLoading = true;
    private string searchTerm = string.Empty;
    private string selectedRoleFilter = string.Empty;
    private string selectedStatusFilter = string.Empty;
    
    private bool showUserDetailsModal = false;
    private UserDto? selectedUser;

    private bool showCreateUserModal = false;
    private CreateAccountDto newUserAccount = new CreateAccountDto();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            await Task.WhenAll(
                LoadAllUsers(),
                LoadVipUsers(),
                LoadBlacklistedUsers()
            );
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadAllUsers()
    {
        try
        {
            var response = await Http.GetAsync("api/guest/all"); 
            
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                allUsers = JsonSerializer.Deserialize<List<UserDto>>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
                
                Console.WriteLine($"Loaded {allUsers?.Count ?? 0} users");
                ApplyFilters();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Forbidden)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Brak uprawnień do przeglądania listy użytkowników.");
                NavigationManager.NavigateTo("/");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Błąd podczas pobierania listy użytkowników: {response.StatusCode} - {errorContent}");
                await JSRuntime.InvokeVoidAsync("alert", $"Wystąpił błąd podczas pobierania danych użytkowników: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas pobierania listy użytkowników: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Wystąpił błąd podczas pobierania danych użytkowników.");
        }
    }

    private async Task LoadVipUsers()
    {
        try
        {
            var response = await Http.GetAsync("api/vip/all");
            
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                vipUsers = JsonSerializer.Deserialize<List<VipUserDto>>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
                
                Console.WriteLine($"Loaded {vipUsers?.Count ?? 0} VIP users");
            }
            else
            {
                Console.WriteLine($"Błąd podczas pobierania listy VIP: {await response.Content.ReadAsStringAsync()}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas pobierania listy VIP: {ex.Message}");
        }
    }

    private async Task LoadBlacklistedUsers()
    {
        try
        {
            var response = await Http.GetAsync("api/blacklist/all");
            
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                blacklistedUsers = JsonSerializer.Deserialize<List<BlacklistedUserDto>>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
                
                Console.WriteLine($"Loaded {blacklistedUsers?.Count ?? 0} blacklisted users");
            }
            else
            {
                 Console.WriteLine($"Błąd podczas pobierania czarnej listy: {await response.Content.ReadAsStringAsync()}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas pobierania czarnej listy: {ex.Message}");
        }
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
        StateHasChanged();
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        ApplyFilters();
    }

    private void OnFilterChanged()
    {
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        if (allUsers == null)
        {
            filteredUsers = new List<UserDto>();
            return;
        }

        var filtered = allUsers.AsEnumerable();

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filtered = filtered.Where(u => 
                u.UserName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true ||
                u.Email?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true ||
                u.Id?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true);
        }

        if (!string.IsNullOrWhiteSpace(selectedRoleFilter))
        {
            filtered = filtered.Where(u => u.Roles?.Contains(selectedRoleFilter) == true);
        }

        if (!string.IsNullOrWhiteSpace(selectedStatusFilter))
        {
            filtered = filtered.Where(u => u.Status?.Equals(selectedStatusFilter, StringComparison.OrdinalIgnoreCase) == true);
        }

        filteredUsers = filtered.ToList();
        StateHasChanged();
    }

    private void ClearFilters()
    {
        searchTerm = string.Empty;
        selectedRoleFilter = string.Empty;
        selectedStatusFilter = string.Empty;
        ApplyFilters();
    }

    private void OpenCreateUserModal()
    {
        newUserAccount = new CreateAccountDto();
        showCreateUserModal = true;
        StateHasChanged();
    }

    private void CloseCreateUserModal()
    {
        showCreateUserModal = false;
        StateHasChanged();
    }

    private async Task HandleCreateUserAccountSubmit()
    {
        try
        {
            var content = new StringContent(JsonSerializer.Serialize(newUserAccount), Encoding.UTF8, "application/json");
            var response = await Http.PostAsync("api/account/create", content);

            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Konto użytkownika zostało utworzone pomyślnie.");
                CloseCreateUserModal();
                await LoadAllUsers();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Forbidden)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Nie masz uprawnień do tworzenia kont.");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Błąd podczas tworzenia konta: {response.StatusCode}. Szczegóły: {errorContent}");
                Console.WriteLine($"Error creating account: {response.StatusCode} - {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Wyjątek podczas tworzenia konta: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Wystąpił nieoczekiwany błąd podczas tworzenia konta.");
        }
        StateHasChanged();
    }

    private async Task DeleteUserAccount(string userId, string userName)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", $"Czy na pewno chcesz usunąć użytkownika {userName} (ID: {userId})? Tej operacji nie można cofnąć."))
        {
            try
            {
                var response = await Http.DeleteAsync($"api/account/delete-without-password/{userId}");
                if (response.IsSuccessStatusCode)
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"Użytkownik {userName} został usunięty pomyślnie.");
                    await LoadAllUsers();
                }
                else if (response.StatusCode == System.Net.HttpStatusCode.Forbidden)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Nie masz uprawnień do usuwania tego konta.");
                }
                else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Nie znaleziono użytkownika.");
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    await JSRuntime.InvokeVoidAsync("alert", $"Błąd podczas usuwania użytkownika: {response.StatusCode}. Szczegóły: {errorContent}");
                    Console.WriteLine($"Error deleting account: {response.StatusCode} - {errorContent}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Wyjątek podczas usuwania konta: {ex.Message}");
                await JSRuntime.InvokeVoidAsync("alert", "Wystąpił nieoczekiwany błąd podczas usuwania konta.");
            }
            StateHasChanged();
        }
    }

    private void ViewUserDetails(object userObj)
    {
        if (userObj is UserDto userDto)
        {
            selectedUser = userDto;
        }
        else if (userObj is VipUserDto vipUser)
        {
            selectedUser = new UserDto
            {
                Id = vipUser.Id,
                UserName = vipUser.UserName,
                Email = vipUser.Email,
                ProfilePicture = vipUser.ProfilePicture,
                Roles = new[] { "VIP" },
                VipSince = vipUser.VipSince,
                Status = "active"
            };
        }
        else if (userObj is BlacklistedUserDto blacklistedUser)
        {
            selectedUser = new UserDto
            {
                Id = blacklistedUser.Id,
                UserName = blacklistedUser.UserName,
                Email = blacklistedUser.Email,
                ProfilePicture = blacklistedUser.ProfilePicture,
                Status = "blacklisted",
                BlacklistedAt = blacklistedUser.BlacklistedAt,
                BlacklistReason = blacklistedUser.BlacklistReason
            };
        }
        
        showUserDetailsModal = true;
        StateHasChanged();
    }

    private void CloseUserDetailsModal()
    {
        showUserDetailsModal = false;
        selectedUser = null;
        StateHasChanged();
    }

    private string GetRoleBadgeClass(string role)
    {
        return role switch
        {
            "Admin" => "bg-danger",
            "Manager" => "bg-warning text-dark",
            "Staff" => "bg-info text-dark",
            "VIP" => "bg-warning text-dark",
            "Guest" => "bg-success",
            _ => "bg-secondary"
        };
    }

    private string GetStatusBadgeClass(string? status)
    {
        return status?.ToLower() switch
        {
            "active" => "bg-success",
            "inactive" => "bg-secondary",
            "blacklisted" => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetStatusText(string? status)
    {
        return status?.ToLower() switch
        {
            "active" => "Aktywny",
            "inactive" => "Nieaktywny",
            "blacklisted" => "Zablokowany",
            _ => "Nieznany"
        };
    }

    public class UserDto
    {
        public string Id { get; set; } = string.Empty;
        public string UserName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string? ProfilePicture { get; set; }
        public string[]? Roles { get; set; }
        public bool IsEmailConfirmed { get; set; }
        public string? Status { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? LastActivity { get; set; }
        public DateTime? VipSince { get; set; }
        public DateTime? BlacklistedAt { get; set; }
        public string? BlacklistReason { get; set; }
    }

    public class VipUserDto
    {
        public string Id { get; set; } = string.Empty;
        public string UserName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string? ProfilePicture { get; set; }
        public DateTime? VipSince { get; set; }
    }

    public class BlacklistedUserDto
    {
        public string Id { get; set; } = string.Empty;
        public string UserName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string? ProfilePicture { get; set; }
        public DateTime? BlacklistedAt { get; set; }
        public string? BlacklistReason { get; set; }
    }

    public class CreateAccountDto
    {
        [Required(ErrorMessage = "Nazwa użytkownika jest wymagana.")]
        [StringLength(50, MinimumLength = 3, ErrorMessage = "Nazwa użytkownika musi mieć od 3 do 50 znaków.")]
        public string UserName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email jest wymagany.")]
        [EmailAddress(ErrorMessage = "Niepoprawny format adresu email.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Hasło jest wymagane.")]
        [DataType(DataType.Password)]
        [RegularExpression(@"^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[^a-zA-Z0-9]).{8,}$", ErrorMessage = "Hasło musi spełniać wymagania.")] // Dodane
        public string Password { get; set; } = string.Empty;
    }
}
