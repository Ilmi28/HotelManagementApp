@page "/order-management"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Components.Authorization
@using System.Globalization
@using System.Net
@using System.Text.Json.Serialization

<PageTitle>Zarządzanie zamówieniami - Hotel Management System</PageTitle>

<div class="container-fluid mt-4">
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col-md-8">
                            <h1 class="display-6 fw-bold text-primary mb-2">
                                <i class="bi bi-clipboard-list"></i> Zarządzanie zamówieniami
                            </h1>
                            <p class="text-muted mb-0">
                                Przeglądaj i zarządzaj zamówieniami gości w systemie hotelowym
                            </p>
                        </div>
                        <div class="col-md-4 text-end">
                            <div class="small text-muted">
                                Ostatnia aktualizacja: @lastUpdateTime.ToString("HH:mm:ss")
                            </div>
                            <button class="btn btn-outline-primary btn-sm mt-2" @onclick="RefreshAllOrders" disabled="@isRefreshing">
                                @if (isRefreshing)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    <span>Odświeżanie...</span>
                                }
                                else
                                {
                                    <i class="bi bi-arrow-clockwise"></i>
                                    <span>Odśwież dane</span>
                                }
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (isInitialLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Ładowanie...</span>
            </div>
            <p class="mt-3 text-muted">Wczytywanie danych zamówień...</p>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger d-flex align-items-center" role="alert">
            <i class="bi bi-exclamation-triangle me-2"></i>
            <div>
                @errorMessage
                <div class="mt-2">
                    <button class="btn btn-sm btn-secondary" @onclick="RefreshAllOrders">
                        Spróbuj ponownie
                    </button>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="row mb-4">
            <div class="col-lg-3 col-md-6 mb-3">
                <div class="card bg-warning text-dark border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="card-title mb-1">Oczekujące</h6>
                                <h3 class="mb-0">@(pendingOrders?.Count ?? 0)</h3>
                            </div>
                            <div class="text-warning-emphasis">
                                <i class="bi bi-clock-history display-4"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 mb-3">
                <div class="card bg-success text-white border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="card-title mb-1">Potwierdzone</h6>
                                <h3 class="mb-0">@(confirmedOrders?.Count ?? 0)</h3>
                            </div>
                            <div class="text-success-emphasis">
                                <i class="bi bi-check-circle display-4"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 mb-3">
                <div class="card bg-info text-white border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="card-title mb-1">Zakończone</h6>
                                <h3 class="mb-0">@(completedOrders?.Count ?? 0)</h3>
                            </div>
                            <div class="text-info-emphasis">
                                <i class="bi bi-check-double display-4"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 mb-3">
                <div class="card bg-danger text-white border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="card-title mb-1">Anulowane</h6>
                                <h3 class="mb-0">@(cancelledOrders?.Count ?? 0)</h3>
                            </div>
                            <div class="text-danger-emphasis">
                                <i class="bi bi-x-circle display-4"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row mb-4">
            <div class="col-12">
                <ul class="nav nav-tabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link @(activeTab == "pending" ? "active" : "")" @onclick='() => SetActiveTab("pending")' type="button">
                            <i class="bi bi-clock-history me-2 text-warning"></i>
                            Oczekujące
                            @if (pendingOrders?.Any() == true)
                            {
                                <span class="badge bg-warning text-dark ms-2">@pendingOrders.Count</span>
                            }
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link @(activeTab == "confirmed" ? "active" : "")" @onclick='() => SetActiveTab("confirmed")' type="button">
                            <i class="bi bi-check-circle me-2 text-success"></i>
                            Potwierdzone
                            @if (confirmedOrders?.Any() == true)
                            {
                                <span class="badge bg-success ms-2">@confirmedOrders.Count</span>
                            }
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link @(activeTab == "completed" ? "active" : "")" @onclick='() => SetActiveTab("completed")' type="button">
                            <i class="bi bi-check-double me-2 text-info"></i>
                            Zakończone
                            @if (completedOrders?.Any() == true)
                            {
                                <span class="badge bg-info ms-2">@completedOrders.Count</span>
                            }
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link @(activeTab == "cancelled" ? "active" : "")" @onclick='() => SetActiveTab("cancelled")' type="button">
                            <i class="bi bi-x-circle me-2 text-danger"></i>
                            Anulowane
                            @if (cancelledOrders?.Any() == true)
                            {
                                <span class="badge bg-danger ms-2">@cancelledOrders.Count</span>
                            }
                        </button>
                    </li>
                </ul>
            </div>
        </div>

        <div class="tab-content">
            @if (activeTab == "pending")
            {
                <RenderOrderTable Orders="pendingOrders" IsLoading="loadingPendingOrders" TableTitle="Oczekujące zamówienia" StatusIcon="bi-clock-history text-warning" OnRefresh="LoadPendingOrders" OnConfirm="ConfirmOrder" OnCancel="ConfirmCancelOrder" ShowActions="true"/>
            }
            @if (activeTab == "confirmed")
            {
                <RenderOrderTable Orders="confirmedOrders" IsLoading="loadingConfirmedOrders" TableTitle="Potwierdzone zamówienia" StatusIcon="bi-check-circle text-success" OnRefresh="LoadConfirmedOrders" />
            }
            @if (activeTab == "completed")
            {
                <RenderOrderTable Orders="completedOrders" IsLoading="loadingCompletedOrders" TableTitle="Zakończone zamówienia" StatusIcon="bi-check-double text-info" OnRefresh="LoadCompletedOrders" />
            }
            @if (activeTab == "cancelled")
            {
                <RenderOrderTable Orders="cancelledOrders" IsLoading="loadingCancelledOrders" TableTitle="Anulowane zamówienia" StatusIcon="bi-x-circle text-danger" OnRefresh="LoadCancelledOrders" />
            }
        </div>
    }
</div>

<div class="modal fade" id="cancelOrderModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-exclamation-triangle text-warning"></i> Potwierdź anulowanie
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Czy na pewno chcesz anulować zamówienie <strong>#@orderIdToCancel</strong>?</p>
                <div class="alert alert-warning">
                    <i class="bi bi-info-circle"></i> Ta operacja jest nieodwracalna.
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Anuluj</button>
                <button type="button" class="btn btn-danger" @onclick="CancelOrder" disabled="@(processingOrderId == orderIdToCancel)">
                    @if (processingOrderId == orderIdToCancel)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        <span>Anulowanie...</span>
                    }
                    else
                    {
                        <i class="bi bi-x-circle"></i>
                        <span>Potwierdź anulowanie</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="operationResultModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    @if (operationSuccess)
                    {
                        <i class="bi bi-check-circle text-success"></i>
                        <span>Operacja zakończona pomyślnie</span>
                    }
                    else
                    {
                        <i class="bi bi-exclamation-triangle text-danger"></i>
                        <span>Błąd operacji</span>
                    }
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="@(operationSuccess ? "alert alert-success" : "alert alert-danger")">
                    <p class="mb-0">@operationMessage</p>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<OrderViewModel>? pendingOrders;
    private List<OrderViewModel>? confirmedOrders;
    private List<OrderViewModel>? completedOrders;
    private List<OrderViewModel>? cancelledOrders;

    private string activeTab = "pending";
    private bool isInitialLoading = true;
    private bool isRefreshing = false;
    private bool loadingPendingOrders = false;
    private bool loadingConfirmedOrders = false;
    private bool loadingCompletedOrders = false;
    private bool loadingCancelledOrders = false;
    private string errorMessage = "";
    private DateTime lastUpdateTime = DateTime.Now;

    private int? processingOrderId = null;
    private int orderIdToCancel = 0;
    private bool operationSuccess = false;
    private string operationMessage = "";
    
    private readonly CultureInfo polishCulture = new("pl-PL");

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (!authState.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        await LoadAllOrders();
    }

    private async Task LoadAllOrders()
    {
        isInitialLoading = true;
        errorMessage = "";
        StateHasChanged();

        await Task.WhenAll(
            LoadPendingOrders(),
            LoadConfirmedOrders(),
            LoadCompletedOrders(),
            LoadCancelledOrders()
        );
        
        lastUpdateTime = DateTime.Now;
        isInitialLoading = false;
        StateHasChanged();
    }

    private async Task RefreshAllOrders()
    {
        isRefreshing = true;
        await LoadAllOrders();
        isRefreshing = false;
    }

    private async Task LoadPendingOrders()
    {
        loadingPendingOrders = true;
        pendingOrders = await GetOrdersFromApi("api/order/pending");
        loadingPendingOrders = false;
        StateHasChanged();
    }

    private async Task LoadConfirmedOrders()
    {
        loadingConfirmedOrders = true;
        confirmedOrders = await GetOrdersFromApi("api/order/confirmed");
        loadingConfirmedOrders = false;
        StateHasChanged();
    }

    private async Task LoadCompletedOrders()
    {
        loadingCompletedOrders = true;
        completedOrders = await GetOrdersFromApi("api/order/completed");
        loadingCompletedOrders = false;
        StateHasChanged();
    }

    private async Task LoadCancelledOrders()
    {
        loadingCancelledOrders = true;
        cancelledOrders = await GetOrdersFromApi("api/order/cancelled");
        loadingCancelledOrders = false;
        StateHasChanged();
    }

    private async Task<List<OrderViewModel>> GetOrdersFromApi(string endpoint)
    {
        try
        {
            var response = await Http.GetAsync(endpoint);
            if (response.IsSuccessStatusCode)
            {
                return await response.Content.ReadFromJsonAsync<List<OrderViewModel>>() ?? new List<OrderViewModel>();
            }
            if (string.IsNullOrEmpty(errorMessage))
            {
                errorMessage = $"Błąd ładowania danych z {endpoint}: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            if (string.IsNullOrEmpty(errorMessage))
            {
                 errorMessage = $"Błąd połączenia z {endpoint}: {ex.Message}";
            }
        }
        return new List<OrderViewModel>();
    }

    private async Task ConfirmOrder(int orderId)
    {
        processingOrderId = orderId;
        StateHasChanged();
        try
        {
            var response = await Http.PatchAsync($"api/order/confirm/{orderId}", null);
            if (response.IsSuccessStatusCode)
            {
                operationSuccess = true;
                operationMessage = $"Zamówienie #{orderId} zostało pomyślnie potwierdzone.";
                await Task.WhenAll(LoadPendingOrders(), LoadConfirmedOrders());
            }
            else
            {
                operationSuccess = false;
                operationMessage = $"Błąd podczas potwierdzania zamówienia: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            operationSuccess = false;
            operationMessage = $"Błąd: {ex.Message}";
        }
        finally
        {
            processingOrderId = null;
            await ShowOperationResultModal();
            StateHasChanged();
        }
    }

    private async Task ConfirmCancelOrder(int orderId)
    {
        orderIdToCancel = orderId;
        await JSRuntime.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('cancelOrderModal')).show()");
    }

    private async Task CancelOrder()
    {
        if (orderIdToCancel == 0) return;
        
        processingOrderId = orderIdToCancel;
        StateHasChanged();
        
        try
        {
            var response = await Http.PatchAsync($"api/order/cancel/{orderIdToCancel}", null);
            await JSRuntime.InvokeVoidAsync("eval", "bootstrap.Modal.getInstance(document.getElementById('cancelOrderModal')).hide()");

            if (response.IsSuccessStatusCode)
            {
                operationSuccess = true;
                operationMessage = $"Zamówienie #{orderIdToCancel} zostało pomyślnie anulowane.";
                await Task.WhenAll(LoadPendingOrders(), LoadCancelledOrders());
            }
            else
            {
                operationSuccess = false;
                operationMessage = $"Błąd podczas anulowania zamówienia: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
             operationSuccess = false;
             operationMessage = $"Błąd: {ex.Message}";
        }
        finally
        {
            processingOrderId = null;
            orderIdToCancel = 0;
            await ShowOperationResultModal();
            StateHasChanged();
        }
    }

    private async Task ShowOperationResultModal()
    {
        await Task.Delay(200);
        await JSRuntime.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('operationResultModal')).show()");
    }

    private void SetActiveTab(string tab) => activeTab = tab;
    
    private string GetFormattedPrice(decimal? price) => price?.ToString("C", polishCulture) ?? "N/A";

    private string GetFormattedDateTime(DateTime? date) => date?.ToString("dd.MM.yyyy HH:mm", polishCulture) ?? "N/A";
    
    private string GetCustomerFullName(OrderViewModel order) => $"{order.FirstName} {order.LastName}".Trim();

    public class OrderViewModel
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }
        
        [JsonPropertyName("userId")]
        public string? UserId { get; set; }
        
        [JsonPropertyName("status")]
        public string? Status { get; set; }
        
        [JsonPropertyName("firstName")]
        public string? FirstName { get; set; }
        
        [JsonPropertyName("lastName")]
        public string? LastName { get; set; }
        
        [JsonPropertyName("phoneNumber")]
        public string? PhoneNumber { get; set; }
        
        [JsonPropertyName("address")]
        public string? Address { get; set; }
        
        [JsonPropertyName("city")]
        public string? City { get; set; }
        
        [JsonPropertyName("country")]
        public string? Country { get; set; }
        
        [JsonPropertyName("created")]
        public DateTime? Created { get; set; }
        
        [JsonPropertyName("confirmed")]
        public DateTime? Confirmed { get; set; }
        
        [JsonPropertyName("completed")]
        public DateTime? Completed { get; set; }
        
        [JsonPropertyName("cancelled")]
        public DateTime? Cancelled { get; set; }
        
        [JsonPropertyName("totalPrice")]
        public decimal? TotalPrice { get; set; }
    }
}