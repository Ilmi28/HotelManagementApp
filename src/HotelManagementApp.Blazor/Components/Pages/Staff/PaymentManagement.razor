@page "/payment-management"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@using Microsoft.AspNetCore.Components.Authorization
@using System.Globalization
@using System.Net
@using System.Text.Json.Serialization

<PageTitle>Zarządzanie płatnościami - Hotel Management System</PageTitle>

<div class="container-fluid mt-4">
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col-md-8">
                            <h1 class="display-6 fw-bold text-primary mb-2">
                                <i class="bi bi-credit-card"></i> Zarządzanie płatnościami
                            </h1>
                            <p class="text-muted mb-0">
                                Przegląd wszystkich zarejestrowanych płatności w systemie.
                            </p>
                        </div>
                        <div class="col-md-4 text-end">
                            <div class="small text-muted">
                                Ostatnia aktualizacja: @lastUpdateTime.ToString("HH:mm:ss")
                            </div>
                            <button class="btn btn-outline-primary btn-sm mt-2" @onclick="LoadAllPayments" disabled="@isRefreshing">
                                @if (isRefreshing)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    <span>Odświeżanie...</span>
                                }
                                else
                                {
                                    <i class="bi bi-arrow-clockwise"></i>
                                    <span>Odśwież dane</span>
                                }
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (isInitialLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Ładowanie...</span>
            </div>
            <p class="mt-3 text-muted">Wczytywanie danych płatności...</p>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger d-flex align-items-center" role="alert">
            <i class="bi bi-exclamation-triangle me-2"></i>
            <div>
                @errorMessage
                <div class="mt-2">
                    <button class="btn btn-sm btn-secondary" @onclick="LoadAllPayments">
                        Spróbuj ponownie
                    </button>
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- Statystyki -->
        <div class="row mb-4">
            <div class="col-lg-4 col-md-6 mb-3">
                <div class="card bg-primary text-white border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="card-title mb-1">Wszystkie płatności</h6>
                                <h3 class="mb-0">@(allPayments?.Count ?? 0)</h3>
                                <small>@GetTotalAmount(allPayments)</small>
                            </div>
                            <div class="text-primary-emphasis">
                                <i class="bi bi-wallet display-4"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-4 col-md-6 mb-3">
                <div class="card bg-success text-white border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="card-title mb-1">Płatności gotówkowe</h6>
                                <h3 class="mb-0">@(cashPayments?.Count ?? 0)</h3>
                                <small>@GetTotalAmount(cashPayments)</small>
                            </div>
                            <div class="text-success-emphasis">
                                <i class="bi bi-cash-stack display-4"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-4 col-md-6 mb-3">
                <div class="card bg-info text-white border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="card-title mb-1">Płatności kartą</h6>
                                <h3 class="mb-0">@(creditCardPayments?.Count ?? 0)</h3>
                                <small>@GetTotalAmount(creditCardPayments)</small>
                            </div>
                            <div class="text-info-emphasis">
                                <i class="bi bi-credit-card display-4"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tabela z płatnościami -->
        <div class="row">
            <div class="col-12">
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-white border-0">
                        <h5 class="mb-0">
                            <i class="bi bi-list-ul text-primary"></i> Rejestr płatności
                        </h5>
                    </div>
                    <div class="card-body p-0">
                        @if (isRefreshing)
                        {
                            <div class="text-center py-4">
                                <div class="spinner-border spinner-border-sm text-primary" role="status"></div>
                                <p class="mt-2 mb-0 text-muted small">Ładowanie płatności...</p>
                            </div>
                        }
                        else if (allPayments?.Any() == true)
                        {
                            <div class="table-responsive">
                                <table class="table table-hover mb-0">
                                    <thead class="table-light">
                                    <tr>
                                        <th>ID Płatności</th>
                                        <th>ID Zamówienia</th>
                                        <th>Metoda płatności</th>
                                        <th>Kwota</th>
                                        <th>Data płatności</th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                    @foreach (var payment in allPayments)
                                    {
                                        <tr>
                                            <td><strong>#@payment.Id</strong></td>
                                            <td><span class="badge bg-secondary">#@payment.OrderId</span></td>
                                            <td>
                                                @if (payment.PaymentMethod?.ToLower().Contains("cash") == true)
                                                {
                                                    <span class="badge bg-success">
                                                        <i class="bi bi-cash-stack"></i> @(payment.PaymentMethod)
                                                    </span>
                                                }
                                                else if (payment.PaymentMethod?.ToLower().Contains("card") == true)
                                                {
                                                    <span class="badge bg-info">
                                                        <i class="bi bi-credit-card"></i> @(payment.PaymentMethod)
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary">@(payment.PaymentMethod ?? "Nieznana")</span>
                                                }
                                            </td>
                                            <td class="text-primary fw-bold">@GetFormattedPrice(payment.Amount)</td>
                                            <td>@GetFormattedDateTime(payment.Date)</td>
                                        </tr>
                                    }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-5">
                                <i class="bi bi-inbox text-muted display-4"></i>
                                <p class="mt-3 mb-0 text-muted">Brak płatności w systemie</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .card { transition: transform 0.2s ease-in-out; }
    .card:hover { transform: translateY(-2px); }
    .table-hover tbody tr:hover { background-color: rgba(0, 123, 255, 0.05); }
</style>

@code {
    private List<PaymentViewModel>? allPayments;
    private List<PaymentViewModel>? cashPayments;
    private List<PaymentViewModel>? creditCardPayments;

    private bool isInitialLoading = true;
    private bool isRefreshing = false;
    private string errorMessage = "";
    private DateTime lastUpdateTime = DateTime.Now;
    
    private readonly CultureInfo polishCulture = new("pl-PL");

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            if (!authState.User.Identity.IsAuthenticated)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            // Sprawdzenie ról użytkownika
            if (!authState.User.IsInRole("Admin") && !authState.User.IsInRole("Staff") && !authState.User.IsInRole("Manager"))
            {
                errorMessage = "Nie masz uprawnień do przeglądania tej strony.";
                isInitialLoading = false;
                return;
            }

            await LoadAllPayments();
        }
        catch (Exception ex)
        {
            errorMessage = $"Błąd inicjalizacji: {ex.Message}";
            isInitialLoading = false;
        }
    }

    private async Task LoadAllPayments()
    {
        if (isInitialLoading)
        {
            isRefreshing = true;
        }
        else
        {
            isRefreshing = true;
            isInitialLoading = true;
        }
        
        errorMessage = "";
        StateHasChanged();

        try
        {
            var response = await Http.GetAsync("api/payment/get-all");

            if (response.IsSuccessStatusCode)
            {
                allPayments = await response.Content.ReadFromJsonAsync<List<PaymentViewModel>>() ?? new List<PaymentViewModel>();
                FilterPayments();
            }
            else if (response.StatusCode == HttpStatusCode.Unauthorized || response.StatusCode == HttpStatusCode.Forbidden)
            {
                errorMessage = "Nie masz uprawnień do przeglądania płatności.";
                allPayments = new List<PaymentViewModel>();
                FilterPayments();
            }
            else
            {
                errorMessage = $"Błąd ładowania płatności: {response.StatusCode}";
                allPayments = new List<PaymentViewModel>();
                FilterPayments();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Wystąpił błąd: {ex.Message}";
            allPayments = new List<PaymentViewModel>();
            FilterPayments();
        }
        finally
        {
            isInitialLoading = false;
            isRefreshing = false;
            lastUpdateTime = DateTime.Now;
            StateHasChanged();
        }
    }

    private void FilterPayments()
    {
        if (allPayments == null)
        {
            cashPayments = new List<PaymentViewModel>();
            creditCardPayments = new List<PaymentViewModel>();
            return;
        }

        cashPayments = allPayments.Where(p => p.PaymentMethod?.ToLower().Contains("cash") == true).ToList();
        creditCardPayments = allPayments.Where(p => p.PaymentMethod?.ToLower().Contains("card") == true).ToList();
    }

    private string GetFormattedPrice(decimal? price)
    {
        return price?.ToString("C", polishCulture) ?? "0,00 zł";
    }

    private string GetFormattedDateTime(DateTime? date)
    {
        return date?.ToString("dd.MM.yyyy HH:mm", polishCulture) ?? "Brak daty";
    }

    private string GetTotalAmount(List<PaymentViewModel>? payments)
    {
        if (payments?.Any() != true) return "0,00 zł";
        var total = payments.Sum(p => p.Amount ?? 0);
        return GetFormattedPrice(total);
    }
    
    // ===========================================
    // ZMIENIONY MODEL PŁATNOŚCI
    // ===========================================
    public class PaymentViewModel
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("orderId")]
        public int OrderId { get; set; }

        [JsonPropertyName("paymentMethod")]
        public string? PaymentMethod { get; set; }

        [JsonPropertyName("amount")]
        public decimal? Amount { get; set; }

        [JsonPropertyName("date")]
        public DateTime? Date { get; set; }
    }
}