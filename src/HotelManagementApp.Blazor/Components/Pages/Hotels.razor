@page "/hotels"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@using Microsoft.AspNetCore.Components.Authorization

<PageTitle>Wyszukiwarka hoteli - Hotel Management System</PageTitle>

<div class="container mt-4">
    <!-- Header -->
    <div class="row">
        <div class="col-12">
            <h1 class="display-5 fw-bold text-center mb-4">Znajdź idealny hotel</h1>
            <p class="text-muted text-center mb-5">Przeszukaj naszą bazę hoteli i znajdź miejsce na swój wymarzony pobyt</p>
        </div>
    </div>

    <!-- Filtry wyszukiwania -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-4">
                            <label for="countrySelect" class="form-label">Kraj</label>
                            <select id="countrySelect" class="form-select" @onchange="OnCountryChanged" value="@selectedCountry">
                                <option value="">Wszystkie kraje</option>
                                @if (countries != null)
                                {
                                    @foreach (var country in countries)
                                    {
                                        <option value="@country">@country</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label for="citySelect" class="form-label">Miasto</label>
                            <select id="citySelect" class="form-select" @bind="selectedCity" disabled="@(cities == null || !cities.Any())">
                                <option value="">Wszystkie miasta</option>
                                @if (cities != null)
                                {
                                    @foreach (var city in cities)
                                    {
                                        <option value="@city.Name">@city.Name</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label for="searchInput" class="form-label">Nazwa hotelu</label>
                            <div class="input-group">
                                <input type="text" id="searchInput" class="form-control" placeholder="Wpisz nazwę hotelu..." @bind="searchTerm" @onkeypress="@(async (e) => { if (e.Key == "Enter") await SearchHotels(); })" />
                                <button class="btn btn-primary" type="button" @onclick="SearchHotels">
                                    <i class="bi bi-search"></i> Szukaj
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-12 text-end">
                            <button class="btn btn-outline-secondary me-2" @onclick="ClearFilters">
                                <i class="bi bi-x-circle"></i> Wyczyść filtry
                            </button>
                            <button class="btn btn-success" @onclick="LoadData">
                                <i class="bi bi-arrow-clockwise"></i> Odśwież
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Status ładowania -->
    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Ładowanie...</span>
            </div>
            <p class="mt-3 text-muted">Wczytywanie hoteli...</p>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger d-flex align-items-center" role="alert">
            <i class="bi bi-exclamation-triangle me-2"></i>
            <div>
                @errorMessage
                @if (errorMessage.Contains("Unauthorized") || errorMessage.Contains("autoryzacji"))
                {
                    <div class="mt-2">
                        <button class="btn btn-sm btn-primary" @onclick="GoToLogin">
                            Przejdź do logowania
                        </button>
                    </div>
                }
            </div>
        </div>
    }
    else if (filteredHotels != null && filteredHotels.Any())
    {
        <!-- Wyniki wyszukiwania -->
        <div class="row mb-3">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center">
                    <h3>Znalezione hotele (@filteredHotels.Count)</h3>
                    <div class="btn-group" role="group">
                        <button type="button" class="btn @(viewMode == "grid" ? "btn-primary" : "btn-outline-secondary")" @onclick="@(() => SetViewMode("grid"))">
                            <i class="bi bi-grid-3x3-gap"></i>
                        </button>
                        <button type="button" class="btn @(viewMode == "list" ? "btn-primary" : "btn-outline-secondary")" @onclick="@(() => SetViewMode("list"))">
                            <i class="bi bi-list"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        @if (viewMode == "grid")
        {
            <!-- Widok siatki -->
            <div class="row g-4">
                @foreach (var hotel in filteredHotels)
                {
                    <div class="col-lg-4 col-md-6">
                        <div class="card hotel-card h-100 border-0 shadow-sm">
                            <img src="@GetHotelImageUrl(hotel)" 
                                class="card-img-top" alt="@hotel.Name" style="height: 200px; object-fit: cover;" />
                            <div class="card-body">
                                <h5 class="card-title">@hotel.Name</h5>
                                <p class="card-text text-muted">
                                    <i class="bi bi-geo-alt"></i> @hotel.City, @hotel.Country
                                </p>
                                @if (!string.IsNullOrEmpty(hotel.Description))
                                {
                                    <p class="card-text small">@hotel.Description</p>
                                }
                            </div>
                            <div class="card-footer bg-white border-0 pt-0">
                                <button class="btn btn-primary w-100" @onclick="@(() => ViewHotelDetails(hotel.Id))">
                                    <i class="bi bi-eye"></i> Zobacz szczegóły
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <!-- Widok listy -->
            <div class="row g-3">
                @foreach (var hotel in filteredHotels)
                {
                    <div class="col-12">
                        <div class="card hotel-card border-0 shadow-sm">
                            <div class="row g-0">
                                <div class="col-md-3">
                                    <img src="@GetHotelImageUrl(hotel)" 
                                        class="img-fluid rounded-start h-100" alt="@hotel.Name" style="object-fit: cover;" />
                                </div>
                                <div class="col-md-9">
                                    <div class="card-body">
                                        <div class="d-flex justify-content-between align-items-start mb-2">
                                            <div>
                                                <h5 class="card-title mb-1">@hotel.Name</h5>
                                                <p class="text-muted mb-2">
                                                    <i class="bi bi-geo-alt"></i> @hotel.City, @hotel.Country
                                                </p>
                                            </div>
                                            <div class="text-end">
                                                <div class="hotel-rating mb-2">
                                                    @for (int i = 0; i < hotel.Rating; i++)
                                                    {
                                                        <i class="bi bi-star-fill text-warning"></i>
                                                    }
                                                    @for (int i = hotel.Rating; i < 5; i++)
                                                    {
                                                        <i class="bi bi-star text-muted"></i>
                                                    }
                                                </div>
                                                <span class="badge bg-primary">@hotel.City</span>
                                            </div>
                                        </div>
                                        @if (!string.IsNullOrEmpty(hotel.Description))
                                        {
                                            <p class="card-text">@hotel.Description</p>
                                        }
                                        <div class="d-flex justify-content-end">
                                            <button class="btn btn-primary" @onclick="@(() => ViewHotelDetails(hotel.Id))">
                                                <i class="bi bi-eye"></i> Zobacz szczegóły
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    }
    else
    {
        <div class="text-center py-5">
            <i class="bi bi-search display-1 text-muted"></i>
            <h3 class="mt-3">Brak hoteli</h3>
            <p class="text-muted">Kliknij "Odśwież" żeby załadować dane</p>
        </div>
    }
</div>

@code {
    private List<HotelViewModel> allHotels = new();
    private List<HotelViewModel> filteredHotels = new();
    private List<string> countries = new();
    private List<CityViewModel> cities = new();
    
    private string selectedCountry = "";
    private string selectedCity = "";
    private string searchTerm = "";
    private string viewMode = "grid";
    private bool isLoading = false;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        // Sprawdź autoryzację
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (!authState.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        // Załaduj dane - tokeny będą dodawane automatycznie przez AuthTokenHandler
        await LoadData();
    }

    private async Task LoadData()
    {
        await LoadHotels();
        await LoadCountries();
    }

    private async Task LoadHotels()
    {
        isLoading = true;
        errorMessage = "";
        
        try
        {
            // Używamy bezpośrednio Http - tokeny są dodawane automatycznie przez AuthTokenHandler
            var response = await Http.GetAsync("api/hotel/get-all");
            
            if (response.IsSuccessStatusCode)
            {
                allHotels = await response.Content.ReadFromJsonAsync<List<HotelViewModel>>() ?? new List<HotelViewModel>();
                filteredHotels = new List<HotelViewModel>(allHotels);
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                errorMessage = "Brak autoryzacji. Zaloguj się ponownie.";
            }
            else
            {
                errorMessage = $"Błąd ładowania hoteli: {response.StatusCode}";
            }
        }
        catch (HttpRequestException)
        {
            errorMessage = "Błąd połączenia z serwerem. Spróbuj ponownie.";
        }
        catch (Exception)
        {
            errorMessage = "Wystąpił nieoczekiwany błąd. Spróbuj ponownie.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadCountries()
    {
        try
        {
            // Używamy bezpośrednio Http - tokeny są dodawane automatycznie
            var response = await Http.GetAsync("api/city/get-countries");
            if (response.IsSuccessStatusCode)
            {
                countries = await response.Content.ReadFromJsonAsync<List<string>>() ?? new List<string>();
            }
        }
        catch
        {
            // Ignoruj błędy ładowania krajów
        }
    }

    private async Task OnCountryChanged(ChangeEventArgs e)
    {
        selectedCountry = e.Value?.ToString() ?? "";
        selectedCity = "";
        cities.Clear();
        
        if (!string.IsNullOrEmpty(selectedCountry))
        {
            await LoadCitiesByCountry(selectedCountry);
        }
        
        await SearchHotels();
    }

    private async Task LoadCitiesByCountry(string country)
    {
        try
        {
            // Używamy bezpośrednio Http - tokeny są dodawane automatycznie
            var response = await Http.GetAsync($"api/city/get-by-country/{Uri.EscapeDataString(country)}");
            if (response.IsSuccessStatusCode)
            {
                cities = await response.Content.ReadFromJsonAsync<List<CityViewModel>>() ?? new List<CityViewModel>();
            }
        }
        catch
        {
            // Ignoruj błędy
        }
    }

    private async Task SearchHotels()
    {
        await Task.Delay(1);
        
        filteredHotels = allHotels.Where(hotel =>
            (string.IsNullOrEmpty(selectedCountry) || hotel.Country.Equals(selectedCountry, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(selectedCity) || hotel.City.Equals(selectedCity, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(searchTerm) || hotel.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        ).ToList();
        
        StateHasChanged();
    }

    private async Task ClearFilters()
    {
        selectedCountry = "";
        selectedCity = "";
        searchTerm = "";
        cities.Clear();
        filteredHotels = new List<HotelViewModel>(allHotels);
        StateHasChanged();
    }

    private void SetViewMode(string mode)
    {
        viewMode = mode;
    }

    private void ViewHotelDetails(int hotelId)
    {
        NavigationManager.NavigateTo($"/hotel/{hotelId}");
    }

    private void GoToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }

    // Metoda do pobierania URL zdjęcia hotelu
    private string GetHotelImageUrl(HotelViewModel hotel)
    {
        // Sprawdź czy hotel ma zdjęcia w tablicy images
        if (hotel.Images != null && hotel.Images.Any())
        {
            return hotel.Images.First(); // Zwróć pierwsze zdjęcie
        }
        
        // Fallback do domyślnego obrazka
        return "images/hotel-placeholder.jpg";
    }

    public class HotelViewModel
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public string City { get; set; } = "";
        public string Country { get; set; } = "";
        public string Description { get; set; } = "";
        public int Rating { get; set; }
        
        // Dodana właściwość Images zgodna z API
        public List<string> Images { get; set; } = new List<string>();
        
        // Zachowana właściwość ImageUrl dla kompatybilności wstecznej (opcjonalnie)
        public string ImageUrl { get; set; } = "";
    }

    public class CityViewModel
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public string Country { get; set; } = "";
    }
}