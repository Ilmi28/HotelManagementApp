@page "/forgot-password"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using System.ComponentModel.DataAnnotations
@using System.Text.Json

<PageTitle>Zapomniałeś hasła?</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-4">
            <div class="card shadow">
                <div class="card-body">
                    <h3 class="card-title text-center mb-4">
                        <i class="bi bi-key"></i> Resetowanie hasła
                    </h3>

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success d-flex align-items-center" role="alert">
                            <i class="bi bi-check-circle-fill me-2"></i>
                            <div>@successMessage</div>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger d-flex align-items-center" role="alert">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            <div>@errorMessage</div>
                        </div>
                    }

                    @if (!emailSent)
                    {
                        <p class="text-muted mb-4 text-center">
                            Wprowadź swój adres email, a wyślemy Ci link do resetowania hasła.
                        </p>

                        <EditForm Model="@resetModel" OnValidSubmit="HandleSendResetLink">
                            <DataAnnotationsValidator />
                            
                            <div class="form-group mb-3">
                                <label for="email" class="form-label">Adres email:</label>
                                <InputText id="email" class="form-control" @bind-Value="resetModel.Email" 
                                          placeholder="Wprowadź swój adres email" />
                                <ValidationMessage For="@(() => resetModel.Email)" class="text-danger small" />
                            </div>

                            <div class="d-grid gap-2 mb-3">
                                <button type="submit" class="btn btn-primary" disabled="@isProcessing">
                                    @if (isProcessing)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                        <span>Wysyłanie...</span>
                                    }
                                    else
                                    {
                                        <i class="bi bi-envelope me-2"></i>
                                        <span>Wyślij link resetowania</span>
                                    }
                                </button>
                            </div>
                        </EditForm>
                    }
                    else
                    {
                        <div class="text-center">
                            <i class="bi bi-envelope-check text-success" style="font-size: 3rem;"></i>
                            <h5 class="mt-3">Email został wysłany!</h5>
                            <p class="text-muted mb-4">
                                Sprawdź swoją skrzynkę pocztową i kliknij w link resetowania hasła.
                            </p>
                            
                            <div class="d-grid gap-2">
                                <button class="btn btn-outline-primary" @onclick="SendAgain">
                                    <i class="bi bi-arrow-clockwise me-2"></i>
                                    Wyślij ponownie
                                </button>
                            </div>
                        </div>
                    }

                    <div class="text-center mt-4">
                        <a href="/login" class="text-decoration-none">
                            <i class="bi bi-arrow-left"></i> Powrót do logowania
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private ResetPasswordLinkModel resetModel = new ResetPasswordLinkModel();
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isProcessing = false;
    private bool emailSent = false;

    public class ResetPasswordLinkModel
    {
        [Required(ErrorMessage = "Email jest wymagany")]
        [EmailAddress(ErrorMessage = "Niepoprawny format email")]
        public string Email { get; set; } = string.Empty;
    }

    private async Task HandleSendResetLink()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;
        isProcessing = true;
        
        try
        {
            var response = await Http.PostAsJsonAsync("api/account/send-password-reset-link", resetModel);

            if (response.IsSuccessStatusCode)
            {
                emailSent = true;
                successMessage = $"Link resetowania hasła został wysłany na adres {resetModel.Email}";
            }
            else
            {
                errorMessage = response.StatusCode switch
                {
                    System.Net.HttpStatusCode.BadRequest => await GetBadRequestErrorMessage(response),
                    System.Net.HttpStatusCode.NotFound => "Nie znaleziono użytkownika z podanym adresem email.",
                    System.Net.HttpStatusCode.TooManyRequests => "Zbyt wiele próśb resetowania hasła. Spróbuj ponownie za kilka minut.",
                    System.Net.HttpStatusCode.InternalServerError => "Błąd serwera. Spróbuj ponownie później.",
                    _ => $"Wystąpił błąd podczas wysyłania linku (kod: {(int)response.StatusCode}). Spróbuj ponownie później."
                };
                
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Błąd wysyłania linku resetowania ({(int)response.StatusCode}): {errorContent}");
            }
        }
        catch (HttpRequestException httpEx)
        {
            errorMessage = "Nie można połączyć się z serwerem. Sprawdź połączenie internetowe i spróbuj ponownie.";
            Console.WriteLine($"Błąd HTTP podczas wysyłania linku resetowania: {httpEx.Message}");
        }
        catch (Exception ex)
        {
            errorMessage = "Wystąpił nieoczekiwany błąd. Spróbuj ponownie później.";
            Console.WriteLine($"Błąd podczas wysyłania linku resetowania: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task<string> GetBadRequestErrorMessage(HttpResponseMessage response)
    {
        try
        {
            var errorContent = await response.Content.ReadAsStringAsync();
            
            if (errorContent.Contains("Invalid email address", StringComparison.OrdinalIgnoreCase) ||
                errorContent.Contains("email", StringComparison.OrdinalIgnoreCase))
            {
                return "Nieprawidłowy format adresu email. Wprowadź poprawny adres email.";
            }
            
            return "Wprowadzone dane są nieprawidłowe. Sprawdź format adresu email.";
        }
        catch
        {
            return "Wprowadzone dane są nieprawidłowe. Sprawdź format adresu email.";
        }
    }

    private void SendAgain()
    {
        emailSent = false;
        successMessage = string.Empty;
        errorMessage = string.Empty;
    }
}