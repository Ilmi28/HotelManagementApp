@page "/account/reset-password"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using System.ComponentModel.DataAnnotations
@using System.Text.Json

<PageTitle>Resetowanie hasła</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-body">
                    <h3 class="card-title text-center mb-4">
                        <i class="bi bi-shield-lock"></i> Ustaw nowe hasło
                    </h3>

                    @if (isProcessing)
                    {
                        <div class="text-center my-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Przetwarzanie...</span>
                            </div>
                            <p class="mt-3">Resetowanie hasła...</p>
                        </div>
                    }
                    else if (passwordResetSuccess)
                    {
                        <div class="text-center">
                            <div class="alert alert-success" role="alert">
                                <i class="bi bi-check-circle-fill me-2"></i>
                                Hasło zostało pomyślnie zresetowane!
                            </div>
                            
                            <div class="mt-3">
                                <button class="btn btn-primary me-2" @onclick="GoToLogin">
                                    <i class="bi bi-box-arrow-in-right"></i> Przejdź do logowania
                                </button>
                                <button class="btn btn-outline-secondary" @onclick="GoToHome">
                                    <i class="bi bi-house"></i> Strona główna
                                </button>
                            </div>
                        </div>
                    }
                    else
                    {
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger d-flex align-items-center" role="alert">
                                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                                <div>@errorMessage</div>
                            </div>
                        }

                        @if (!isValidToken)
                        {
                            <div class="text-center">
                                <div class="alert alert-warning" role="alert">
                                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                                    Link resetowania hasła jest nieprawidłowy lub wygasł.
                                </div>
                                
                                <div class="mt-3">
                                    <button class="btn btn-primary me-2" @onclick="GoToForgotPassword">
                                        <i class="bi bi-arrow-left"></i> Wyślij nowy link
                                    </button>
                                    <button class="btn btn-outline-secondary" @onclick="GoToLogin">
                                        <i class="bi bi-box-arrow-in-right"></i> Przejdź do logowania
                                    </button>
                                </div>
                            </div>
                        }
                        else
                        {
                            <EditForm Model="@resetPasswordModel" OnValidSubmit="HandleResetPassword">
                                <DataAnnotationsValidator />
                                
                                <div class="form-group mb-3">
                                    <label for="newPassword" class="form-label">Nowe hasło:</label>
                                    <InputText type="password" id="newPassword" class="form-control" 
                                              @bind-Value="resetPasswordModel.NewPassword" 
                                              placeholder="Wprowadź nowe hasło" />
                                    <ValidationMessage For="@(() => resetPasswordModel.NewPassword)" class="text-danger" />
                                    <small class="form-text text-muted">
                                        <i class="bi bi-info-circle"></i>
                                        Hasło musi mieć co najmniej 8 znaków, zawierać dużą literę, małą literę, cyfrę i znak specjalny.
                                    </small>
                                </div>

                                <div class="form-group mb-3">
                                    <label for="confirmPassword" class="form-label">Potwierdź nowe hasło:</label>
                                    <InputText type="password" id="confirmPassword" class="form-control" 
                                              @bind-Value="resetPasswordModel.ConfirmPassword" 
                                              placeholder="Potwierdź nowe hasło" />
                                    <ValidationMessage For="@(() => resetPasswordModel.ConfirmPassword)" class="text-danger" />
                                </div>

                                <div class="d-grid gap-2 mb-3">
                                    <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                        @if (isSubmitting)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                            <span>Resetowanie...</span>
                                        }
                                        else
                                        {
                                            <i class="bi bi-shield-check me-2"></i>
                                            <span>Zresetuj hasło</span>
                                        }
                                    </button>
                                </div>
                            </EditForm>
                        }
                    }

                    @if (!passwordResetSuccess && isValidToken)
                    {
                        <div class="text-center mt-4">
                            <a href="/login" class="text-decoration-none">
                                <i class="bi bi-arrow-left"></i> Powrót do logowania
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "userId")]
    public string? UserId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "token")]
    public string? Token { get; set; }

    private ResetPasswordModel resetPasswordModel = new ResetPasswordModel();
    private string errorMessage = string.Empty;
    private bool isProcessing = true;
    private bool isSubmitting = false;
    private bool isValidToken = false;
    private bool passwordResetSuccess = false;

    public class ResetPasswordModel
    {
        [Required(ErrorMessage = "Nowe hasło jest wymagane")]
        [DataType(DataType.Password)]
        [RegularExpression(@"^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[^a-zA-Z0-9]).{8,}$", ErrorMessage = "Hasło musi spełniać wymagania.")]
        public string NewPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "Potwierdzenie hasła jest wymagane")]
        [DataType(DataType.Password)]
        [Compare(nameof(NewPassword), ErrorMessage = "Hasło i potwierdzenie hasła nie pasują.")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        await ValidateTokenAsync();
    }

    private async Task ValidateTokenAsync()
    {
        isProcessing = true;
        errorMessage = string.Empty;

        // Walidacja parametrów URL
        if (string.IsNullOrWhiteSpace(UserId) || string.IsNullOrWhiteSpace(Token))
        {
            isValidToken = false;
            errorMessage = "Brak wymaganych parametrów do resetowania hasła. Sprawdź link z wiadomości email.";
            isProcessing = false;
            return;
        }

        try
        {
            // Dekodowanie parametrów URL
            var decodedUserId = Uri.UnescapeDataString(UserId);
            var decodedToken = Uri.UnescapeDataString(Token);

            // Tutaj możesz dodać dodatkową walidację tokena jeśli API to obsługuje
            // Na razie zakładamy, że token jest prawidłowy - zostanie zweryfikowany przy rzeczywistym resetowaniu
            isValidToken = true;
            
            Console.WriteLine($"Reset password for userId: {decodedUserId}");
        }
        catch (Exception ex)
        {
            isValidToken = false;
            errorMessage = "Błąd podczas przetwarzania parametrów resetowania hasła.";
            Console.WriteLine($"Error validating reset token: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task HandleResetPassword()
    {
        errorMessage = string.Empty;
        isSubmitting = true;

        try
        {
            var decodedUserId = Uri.UnescapeDataString(UserId!);
            var decodedToken = Uri.UnescapeDataString(Token!);

            var resetRequest = new
            {
                UserId = decodedUserId,
                ResetPasswordToken = decodedToken,
                NewPassword = resetPasswordModel.NewPassword
            };

            var response = await Http.PostAsJsonAsync("api/account/reset-password", resetRequest);

            if (response.IsSuccessStatusCode)
            {
                passwordResetSuccess = true;
            }
            else
            {
                errorMessage = response.StatusCode switch
                {
                    System.Net.HttpStatusCode.BadRequest => await GetBadRequestErrorMessage(response),
                    System.Net.HttpStatusCode.NotFound => "Użytkownik nie został znaleziony.",
                    System.Net.HttpStatusCode.InternalServerError => "Błąd serwera. Spróbuj ponownie później.",
                    _ => $"Wystąpił błąd podczas resetowania hasła (kod: {(int)response.StatusCode})."
                };

                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Reset password error ({(int)response.StatusCode}): {errorContent}");
            }
        }
        catch (HttpRequestException httpEx)
        {
            errorMessage = "Nie można połączyć się z serwerem. Sprawdź połączenie internetowe i spróbuj ponownie.";
            Console.WriteLine($"HTTP error during password reset: {httpEx.Message}");
        }
        catch (Exception ex)
        {
            errorMessage = "Wystąpił nieoczekiwany błąd. Spróbuj ponownie później.";
            Console.WriteLine($"Error during password reset: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private async Task<string> GetBadRequestErrorMessage(HttpResponseMessage response)
    {
        try
        {
            var errorContent = await response.Content.ReadAsStringAsync();
            
            if (errorContent.Contains("Invalid reset token", StringComparison.OrdinalIgnoreCase) ||
                errorContent.Contains("token", StringComparison.OrdinalIgnoreCase))
            {
                return "Token resetowania hasła jest nieprawidłowy lub wygasł. Wyślij nowy link resetowania.";
            }
            
            if (errorContent.Contains("password", StringComparison.OrdinalIgnoreCase))
            {
                return "Hasło nie spełnia wymagań bezpieczeństwa. Sprawdź format hasła.";
            }
            
            return "Wprowadzone dane są nieprawidłowe. Sprawdź poprawność hasła.";
        }
        catch
        {
            return "Wprowadzone dane są nieprawidłowe. Sprawdź poprawność hasła.";
        }
    }

    private void GoToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }

    private void GoToHome()
    {
        NavigationManager.NavigateTo("/");
    }

    private void GoToForgotPassword()
    {
        NavigationManager.NavigateTo("/forgot-password");
    }

    public class ErrorResponse
    {
        public string? Type { get; set; }
        public string? Title { get; set; }
        public int Status { get; set; }
        public string? Detail { get; set; }
        public string? Instance { get; set; }
    }
}