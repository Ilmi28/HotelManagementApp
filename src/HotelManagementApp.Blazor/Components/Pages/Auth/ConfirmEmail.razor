@page "/account/confirm-email"
@using System.Text.Json
@using System.Net
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Potwierdzenie adresu email</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body text-center">
                    <h3 class="card-title">
                        <i class="bi bi-envelope-check"></i> Potwierdzenie adresu email
                    </h3>

                    @if (isProcessing)
                    {
                        <div class="my-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Przetwarzanie...</span>
                            </div>
                            <p class="mt-3">Przetwarzanie potwierdzenia...</p>
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(message))
                    {
                        <div class="@(isSuccess ? "alert alert-success" : "alert alert-danger")" role="alert">
                            <i class="bi @(isSuccess ? "bi-check-circle-fill" : "bi-exclamation-triangle-fill")"></i>
                            @message
                        </div>
                        
                        <div class="mt-3">
                            @if (isSuccess)
                            {
                                <button class="btn btn-primary me-2" @onclick="GoToLogin">
                                    <i class="bi bi-box-arrow-in-right"></i> Przejdź do logowania
                                </button>
                                <button class="btn btn-outline-secondary" @onclick="GoToHome">
                                    <i class="bi bi-house"></i> Strona główna
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-info me-2" @onclick="GoToHome">
                                    <i class="bi bi-house"></i> Powrót na stronę główną
                                </button>
                                <button class="btn btn-outline-secondary" @onclick="RetryConfirmation">
                                    <i class="bi bi-arrow-clockwise"></i> Spróbuj ponownie
                                </button>
                            }
                        </div>

                        @if (!isSuccess && hasRetried)
                        {
                            <div class="mt-4">
                                <hr>
                                <h6>Potrzebujesz pomocy?</h6>
                                <p class="text-muted small">
                                    Jeśli nadal masz problemy z potwierdzeniem emaila, skontaktuj się z naszym zespołem wsparcia.
                                </p>
                                <button class="btn btn-outline-info btn-sm" @onclick="ContactSupport">
                                    <i class="bi bi-envelope"></i> Skontaktuj się z pomocą
                                </button>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "userId")]
    public string? UserId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "token")]
    public string? Token { get; set; }

    private string message = string.Empty;
    private bool isProcessing = true;
    private bool isSuccess = false;
    private bool hasRetried = false;

    protected override async Task OnInitializedAsync()
    {
        await ConfirmEmailAsync();
    }

    private async Task ConfirmEmailAsync()
    {
        isProcessing = true;
        message = string.Empty;
        isSuccess = false;

        if (string.IsNullOrWhiteSpace(UserId) || string.IsNullOrWhiteSpace(Token))
        {
            message = "Brak wymaganych parametrów do potwierdzenia emaila. Sprawdź link z wiadomości email.";
            isSuccess = false;
            isProcessing = false;
            return;
        }

        try
        {
            var decodedUserId = Uri.UnescapeDataString(UserId);
            var decodedToken = Uri.UnescapeDataString(Token);
            Console.WriteLine($"Confirming email for userId: {decodedUserId}");

            var command = new { 
                UserId = decodedUserId, 
                Token = decodedToken 
            };

            var response = await Http.PostAsJsonAsync("api/account/confirm-email", command);

            Console.WriteLine($"Response status: {response.StatusCode}");

            switch (response.StatusCode)
            {
                case HttpStatusCode.Found:
                case HttpStatusCode.OK:
                case HttpStatusCode.NoContent:
                    isSuccess = true;
                    message = "Adres email został pomyślnie potwierdzony! Możesz się teraz zalogować.";
                    break;

                case HttpStatusCode.BadRequest:
                    isSuccess = false;
                    try
                    {
                        var errorContent = await response.Content.ReadAsStringAsync();
                        Console.WriteLine($"Error content: {errorContent}");
                        
                        if (errorContent.Contains("\"detail\"") || errorContent.Contains("\"title\""))
                        {
                            var errorResponse = JsonSerializer.Deserialize<ErrorResponse>(errorContent, new JsonSerializerOptions
                            {
                                PropertyNameCaseInsensitive = true
                            });
                            message = $"Błąd podczas potwierdzania emaila: {errorResponse?.Detail ?? errorResponse?.Title ?? "Nieprawidłowy token lub token wygasł."}";
                        }
                        else
                        {
                            message = "Błąd podczas potwierdzania emaila: Nieprawidłowy token lub token wygasł.";
                        }
                    }
                    catch
                    {
                        message = "Błąd podczas potwierdzania emaila: Nieprawidłowy token lub token wygasł.";
                    }
                    break;

                case HttpStatusCode.Unauthorized:
                    isSuccess = false;
                    message = "Brak autoryzacji. Zaloguj się ponownie i spróbuj potwierdzić email.";
                    break;

                case HttpStatusCode.Forbidden:
                    isSuccess = false;
                    message = "Brak uprawnień do potwierdzenia tego emaila.";
                    break;

                case HttpStatusCode.NotFound:
                    isSuccess = false;
                    message = "Użytkownik nie został znaleziony. Sprawdź poprawność linku.";
                    break;

                case HttpStatusCode.Conflict:
                    isSuccess = false;
                    message = "Email został już wcześniej potwierdzony.";
                    break;

                default:
                    isSuccess = false;
                    var content = await response.Content.ReadAsStringAsync();
                    message = $"Wystąpił nieoczekiwany błąd podczas potwierdzania emaila (kod: {(int)response.StatusCode}).";
                    Console.WriteLine($"Unexpected response: {content}");
                    break;
            }
        }
        catch (HttpRequestException httpEx)
        {
            isSuccess = false;
            message = $"Błąd połączenia z serwerem: {httpEx.Message}";
            Console.WriteLine($"HTTP exception: {httpEx}");
        }
        catch (Exception ex)
        {
            isSuccess = false;
            message = $"Wystąpił błąd aplikacji: {ex.Message}";
            Console.WriteLine($"General exception: {ex}");
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task RetryConfirmation()
    {
        hasRetried = true;
        await ConfirmEmailAsync();
    }

    private void GoToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }

    private void GoToHome()
    {
        NavigationManager.NavigateTo("/");
    }

    private void ContactSupport()
    {
        NavigationManager.NavigateTo("/contact");
    }

    public class ErrorResponse
    {
        public string? Type { get; set; }
        public string? Title { get; set; }
        public int Status { get; set; }
        public string? Detail { get; set; }
        public string? Instance { get; set; }
    }
}