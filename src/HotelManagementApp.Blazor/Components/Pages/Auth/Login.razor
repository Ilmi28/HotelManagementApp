@page "/login"
@inject HttpClient Http
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject ITokenService TokenService
@using Microsoft.AspNetCore.Components.Authorization
@using HotelManagementApp.Blazor.Auth

<h3>Logowanie</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
	<div class="alert alert-danger">@errorMessage</div>
}

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
	<DataAnnotationsValidator />
	<ValidationSummary />

	<div class="form-group mb-2">
		<label for="email">Email:</label>
		<InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
		<ValidationMessage For="@(() => loginModel.Email)" />
	</div>

	<div class="form-group mb-3">
		<label for="password">Hasło:</label>
		<InputText type="password" id="password" class="form-control" @bind-Value="loginModel.Password" />
		<ValidationMessage For="@(() => loginModel.Password)" />
	</div>

	<div class="d-flex justify-content-between align-items-center">
		<button type="submit" class="btn btn-primary" disabled="@isProcessing">
			@if (isProcessing)
			{
				<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
			}
			Zaloguj
		</button>
		<a href="/forgot-password">Zapomniałeś hasła?</a>
	</div>
</EditForm>

@code {
	private LoginViewModel loginModel = new LoginViewModel();
	private string errorMessage;
	private bool isProcessing = false;

	public class LoginViewModel
	{
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Email jest wymagany")]
		[System.ComponentModel.DataAnnotations.EmailAddress(ErrorMessage = "Niepoprawny format email")]
		public string Email { get; set; }

		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Hasło jest wymagane")]
		public string Password { get; set; }
	}

	public class LoginApiResponse
	{
		public string IdentityToken { get; set; }
		public string RefreshToken { get; set; }
	}

	private async Task HandleLogin()
	{
		errorMessage = null;
		isProcessing = true;
		try
		{
			var client = HttpClientFactory.CreateClient("HotelApi");
			var response = await client.PostAsJsonAsync("api/auth/login", loginModel);

			if (response.IsSuccessStatusCode)
			{
				var result = await response.Content.ReadFromJsonAsync<LoginApiResponse>();
				if (result != null && !string.IsNullOrEmpty(result.IdentityToken) && !string.IsNullOrEmpty(result.RefreshToken))
				{
					await TokenService.SetTokensAsync(result.IdentityToken, result.RefreshToken);
					
					// Bezpieczniejsze rzutowanie
					var customAuthStateProvider = AuthStateProvider as CustomAuthStateProvider;
					customAuthStateProvider?.NotifyAuthenticationStateChanged();
					
					NavigationManager.NavigateTo("/", forceLoad: true);
				}
				else 
				{
					// Bardziej generyczny komunikat
					errorMessage = "Logowanie nie powiodło się. Sprawdź swoje dane i spróbuj ponownie.";
                    // TODO: Rozważ zalogowanie szczegółów błędu (result) po stronie klienta (konsola) lub serwera
                    Console.WriteLine("Nie otrzymano poprawnych tokenów z API lub result jest null.");
				}
			}
			else
			{
				var errorContent = await response.Content.ReadAsStringAsync();
				// Bardziej generyczny komunikat dla użytkownika
				errorMessage = $"Logowanie nie powiodło się ({(int)response.StatusCode}). Spróbuj ponownie później.";
				// Logowanie szczegółów dla dewelopera
				Console.WriteLine($"Błąd logowania ({(int)response.StatusCode}): {response.ReasonPhrase}. Szczegóły: {errorContent}");
			}
		}
		catch (Exception ex) 
		{
			// Bardziej generyczny komunikat dla użytkownika
			errorMessage = "Wystąpił nieoczekiwany błąd podczas próby logowania. Spróbuj ponownie później.";
			// Logowanie szczegółów dla dewelopera
			Console.WriteLine($"Wystąpił wyjątek podczas logowania: {ex.Message}");
		}
		finally { isProcessing = false; }
	}
}