@page "/register"
@inject HttpClient Http
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject ITokenService TokenService

@using Microsoft.AspNetCore.Components.Authorization
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using System.Text.Json
@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt;
@using HotelManagementApp.Blazor.Auth

<h3>Rejestracja</h3>

@if (!string.IsNullOrEmpty(message))
{
	<div class="@(isSuccess ? "alert alert-success" : "alert alert-danger")">@message</div>
}

@if (!registrationComplete) // Zmieniono warunek, aby formularz był widoczny tylko przed zakończeniem rejestracji
{
	<EditForm Model="@registerModel" OnValidSubmit="HandleRegistration">
		<DataAnnotationsValidator />
		<ValidationSummary />

		<div class="form-group mb-2">
			<label for="username">Nazwa użytkownika:</label>
			<InputText id="username" class="form-control" @bind-Value="registerModel.UserName" />
			<ValidationMessage For="@(() => registerModel.UserName)" />
		</div>

		<div class="form-group mb-2">
			<label for="email">Email:</label>
			<InputText id="email" class="form-control" @bind-Value="registerModel.Email" />
			<ValidationMessage For="@(() => registerModel.Email)" />
		</div>

		<div class="form-group mb-2">
			<label for="password">Hasło:</label>
			<InputText type="password" id="password" class="form-control" @bind-Value="registerModel.Password" />
			<ValidationMessage For="@(() => registerModel.Password)" />
			<small id="passwordHelpBlock" class="form-text text-muted">
				Hasło musi mieć co najmniej 8 znaków, zawierać dużą literę, małą literę, cyfrę i znak specjalny.
			</small>
		</div>
		<div class="form-group mb-3">
			<label for="confirmPassword">Potwierdź hasło:</label>
			<InputText type="password" id="confirmPassword" class="form-control" @bind-Value="registerModel.ConfirmPassword" />
			<ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
		</div>

		<button type="submit" class="btn btn-primary" disabled="@isProcessing">
			@if (isProcessing)
			{
				<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
			}
			Zarejestruj
		</button>
	</EditForm>
}
else if (isSuccess) // Komunikat po udanej rejestracji
{
    <p>@message</p>
    <p>Zostałeś automatycznie zalogowany. Możesz teraz przejść do strony głównej.</p>
	<button class="btn btn-secondary" @onclick='() => NavigationManager.NavigateTo("/")'>Powrót na stronę główną</button>
}


@code {
	private RegisterViewModel registerModel = new RegisterViewModel();
	private string message;
	private bool isSuccess = false;
	private bool isProcessing = false;
    private bool registrationComplete = false; // Nowa flaga

	public class RegisterViewModel
	{
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Nazwa użytkownika jest wymagana")]
		[System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 3, ErrorMessage = "Nazwa użytkownika musi mieć od 3 do 50 znaków.")]
		public string UserName { get; set; }

		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Email jest wymagany")]
		[System.ComponentModel.DataAnnotations.EmailAddress(ErrorMessage = "Niepoprawny format email")]
		public string Email { get; set; }

		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Hasło jest wymagane")]
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.Password)]
		[System.ComponentModel.DataAnnotations.RegularExpression(@"^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[^a-zA-Z0-9]).{8,}$", ErrorMessage = "Hasło musi spełniać wymagania.")]
		public string Password { get; set; }

		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Potwierdzenie hasła jest wymagane")]
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.Password)]
		[System.ComponentModel.DataAnnotations.Compare("Password", ErrorMessage = "Hasło i potwierdzenie hasła nie pasują.")]
		public string ConfirmPassword { get; set; }
	}

	public class RegistrationResponseViewModel
	{
		public string IdentityToken { get; set; }
		public string RefreshToken { get; set; }
	}

	private async Task HandleRegistration()
    {
        message = null;
        isSuccess = false;
        isProcessing = true;
        registrationComplete = false; 
        try
        {
            var client = HttpClientFactory.CreateClient("HotelApi");
            var registrationEndpoint = "api/auth/register";
            var command = new { registerModel.UserName, registerModel.Email, registerModel.Password };
            var response = await client.PostAsJsonAsync(registrationEndpoint, command);

            if (response.IsSuccessStatusCode)
            {
                var registrationResponseData = await response.Content.ReadFromJsonAsync<RegistrationResponseViewModel>();

                if (registrationResponseData != null && !string.IsNullOrEmpty(registrationResponseData.IdentityToken) && !string.IsNullOrEmpty(registrationResponseData.RefreshToken))
                {
                    await TokenService.SetTokensAsync(registrationResponseData.IdentityToken, registrationResponseData.RefreshToken);

                    var customAuthStateProvider = AuthStateProvider as CustomAuthStateProvider;
                    customAuthStateProvider?.NotifyAuthenticationStateChanged();

                    string userId = GetUserIdFromJwt(registrationResponseData.IdentityToken);
                    bool emailSentSuccessfully = false;

                    if (!string.IsNullOrEmpty(userId))
                    {
                        var sendConfirmationEmailEndpoint = "api/account/send-confirmation-email";
                        var emailCommand = new { UserId = userId };
                        var requestMessage = new HttpRequestMessage(HttpMethod.Post, sendConfirmationEmailEndpoint);
                        requestMessage.Headers.Authorization =
                            new AuthenticationHeaderValue("Bearer", registrationResponseData.IdentityToken);
                        requestMessage.Content = JsonContent.Create(emailCommand);
                        
                        try 
                        {
                            var emailResponse = await client.SendAsync(requestMessage);
                            if (emailResponse.IsSuccessStatusCode)
                            {
                                emailSentSuccessfully = true;
                            }
                            else
                            {
                                // Logowanie błędu wysyłki emaila
                                Console.WriteLine($"Nie udało się wysłać emaila potwierdzającego. Status: {emailResponse.StatusCode}, Odpowiedź: {await emailResponse.Content.ReadAsStringAsync()}");
                            }
                        }
                        catch (Exception emailEx)
                        {
                             Console.WriteLine($"Wyjątek podczas wysyłania emaila potwierdzającego: {emailEx.Message}");
                        }
                    }
                    
                    isSuccess = true;
                    registrationComplete = true;
                    message = "Rejestracja zakończona pomyślnie. Zostałeś automatycznie zalogowany.";
                    if (!emailSentSuccessfully && !string.IsNullOrEmpty(userId))
                    {
                        message += " Jednakże, wystąpił problem z wysłaniem emaila potwierdzającego. Możesz spróbować potwierdzić email później w ustawieniach konta lub skontaktować się z pomocą techniczną.";
                    } 
                    else if (string.IsNullOrEmpty(userId))
                    {
                         message += " Nie udało się wysłać emaila potwierdzającego (brak UserID).";
                    }
                    else 
                    {
                        message += " Na Twój adres email został wysłany link potwierdzający.";
                    }
                    // NavigationManager.NavigateTo("/"); // Przekierowanie może być tutaj lub pozwolić użytkownikowi kliknąć przycisk
                    return; 
                }
                else
                {
                    isSuccess = false;
                    message = "Rejestracja nie powiodła się. Nie otrzymano poprawnych tokenów z API.";
                     Console.WriteLine("Nie otrzymano poprawnych tokenów z API po rejestracji lub registrationResponseData jest null.");
                }
            }
            else
            {
                isSuccess = false;
                var errorContent = await response.Content.ReadAsStringAsync();
                message = $"Błąd rejestracji ({(int)response.StatusCode}). Spróbuj użyć innych danych lub skontaktuj się z pomocą.";
                Console.WriteLine($"Błąd rejestracji ({(int)response.StatusCode}): {response.ReasonPhrase}. Szczegóły: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            isSuccess = false;
            message = "Wystąpił nieoczekiwany błąd podczas rejestracji. Spróbuj ponownie później.";
            Console.WriteLine($"Wystąpił wyjątek podczas rejestracji: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
            if (!isSuccess) registrationComplete = false; // Jeśli błąd, pozwól na ponowną próbę
        }
    }

	private string GetUserIdFromJwt(string token)
	{
		if (string.IsNullOrEmpty(token))
		{
			return null;
		}

		var tokenHandler = new JwtSecurityTokenHandler();
		try
		{
			if (tokenHandler.CanReadToken(token))
			{
				var jwtToken = tokenHandler.ReadJwtToken(token);

				var userIdClaim = jwtToken.Claims.FirstOrDefault(claim =>
					claim.Type == ClaimTypes.NameIdentifier ||
					claim.Type == "nameid");

				if (userIdClaim == null)
				{
					userIdClaim = jwtToken.Claims.FirstOrDefault(claim =>
								claim.Type == JwtRegisteredClaimNames.Sub ||
								claim.Type == "sub");
				}

				if (userIdClaim == null)
				{
					userIdClaim = jwtToken.Claims.FirstOrDefault(claim => claim.Type == "userId");
				}
                // Można dodać logowanie, jeśli żaden standardowy claim nie pasuje, aby zobaczyć jakie claimy są dostępne
                if (userIdClaim == null && jwtToken.Claims.Any()) {
                     Console.WriteLine("Dostępne claimy w tokenie JWT:");
                     foreach(var claim in jwtToken.Claims) {
                         Console.WriteLine($"Typ: {claim.Type}, Wartość: {claim.Value}");
                     }
                }


				if (userIdClaim != null)
				{
					return userIdClaim.Value;
				}
				else
				{
					Console.WriteLine("Nie znaleziono claimu identyfikującego użytkownika (NameIdentifier, Sub, 'nameid', 'sub', 'userId') w tokenie JWT.");
					return null;
				}
			}
			else
			{
				Console.WriteLine("Dostarczony ciąg znaków nie jest prawidłowym tokenem JWT.");
				return null;
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Błąd podczas odczytywania tokenu JWT: {ex.Message}");
			return null;
		}
	}
}