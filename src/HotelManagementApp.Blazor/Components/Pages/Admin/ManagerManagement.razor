@page "/manager-management"
@using System.Text.Json
@using System.Text
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Zarządzanie menedżerami</PageTitle>

<div class="container my-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h2">
                    <i class="bi bi-briefcase-fill"></i> Zarządzanie menedżerami
                </h1>
                <div class="d-flex gap-2">
                    <button class="btn btn-primary" @onclick="ShowAddManagerModal">
                        <i class="bi bi-briefcase"></i> Dodaj menedżera
                    </button>
                    <button class="btn btn-danger" @onclick="ShowAdminManagementModal">
                        <i class="bi bi-shield-fill-check"></i> Zarządzaj adminami
                    </button>
                    <button class="btn btn-info" @onclick="ShowCreateAccountModal">
                        <i class="bi bi-person-add"></i> Utwórz nowe konto
                    </button>
                    <NavLink class="btn btn-success" href="/staff-management">
                        <i class="bi bi-people"></i> Zarządzanie personelem
                    </NavLink>
                </div>
            </div>
        </div>
    </div>

    <!-- Karty statystyk -->
    <div class="row justify-content-center mb-4">
        <div class="col-md-6 col-lg-4 mb-3 d-flex justify-content-center">
            <div class="card bg-primary text-white w-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="card-title mb-1">Menedżerowie</h6>
                            <h3 class="mb-0">@(managers?.Count ?? 0)</h3>
                        </div>
                        <div class="text-primary-emphasis">
                            <i class="bi bi-briefcase display-4"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6 col-lg-4 mb-3 d-flex justify-content-center">
            <div class="card bg-info text-white w-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="card-title mb-1">Konta bez ról</h6>
                            <h3 class="mb-0">@(accountsWithoutRoles?.Count ?? 0)</h3>
                        </div>
                        <div class="text-info-emphasis">
                            <i class="bi bi-people display-4"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="bi bi-check-circle-fill me-2"></i>
            @successMessage
            <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            @errorMessage
            <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
        </div>
    }

    <div class="row">
        <div class="col-lg-6 mb-4">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center bg-primary text-white">
                    <h5 class="mb-0">
                        <i class="bi bi-briefcase"></i> Menedżerowie
                    </h5>
                    <button class="btn btn-outline-light btn-sm" @onclick="LoadManagers" disabled="@isLoadingManagers">
                        @if (isLoadingManagers)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        else
                        {
                            <i class="bi bi-arrow-clockwise"></i>
                        }
                        Odśwież
                    </button>
                </div>
                <div class="card-body">
                    @if (isLoadingManagers)
                    {
                        <div class="text-center py-4">
                            <div class="spinner-border text-primary" role="status"></div>
                            <p class="mt-2 mb-0 text-muted">Ładowanie menedżerów...</p>
                        </div>
                    }
                    else if (managers?.Any() == true)
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th>Użytkownik</th>
                                        <th>Email</th>
                                        <th>Role</th>
                                        <th>Akcje</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var user in managers)
                                    {
                                        <tr>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    @if (!string.IsNullOrEmpty(user.ProfilePicture))
                                                    {
                                                        <img src="@user.ProfilePicture" class="rounded-circle me-2" 
                                                             style="width: 32px; height: 32px; object-fit: cover;" />
                                                    }
                                                    else
                                                    {
                                                        <div class="bg-primary rounded-circle d-flex align-items-center justify-content-center text-white me-2" 
                                                             style="width: 32px; height: 32px; font-size: 0.8rem;">
                                                            <i class="bi bi-briefcase"></i>
                                                        </div>
                                                    }
                                                    <div>
                                                        <div class="fw-bold">@user.UserName</div>
                                                        <small class="text-muted">ID: @user.Id[..8]...</small>
                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                @user.Email
                                                @if (user.IsEmailConfirmed == true)
                                                {
                                                    <i class="bi bi-check-circle-fill text-success ms-1" title="Email potwierdzony"></i>
                                                }
                                            </td>
                                            <td>
                                                @if (user.Roles?.Any() == true)
                                                {
                                                    @foreach (var role in user.Roles)
                                                    {
                                                        <span class="badge @GetRoleBadgeClass(role) me-1">@role</span>
                                                    }
                                                }
                                            </td>
                                            <td>
                                                <div class="btn-group btn-group-sm">
                                                    <button class="btn btn-outline-primary" 
                                                            @onclick="() => ShowEditUserModal(user)"
                                                            title="Edytuj">
                                                        <i class="bi bi-pencil"></i>
                                                    </button>
                                                    <button class="btn btn-outline-warning" 
                                                            @onclick="() => ConfirmRemoveFromManagers(user.Id, user.UserName)"
                                                            disabled="@(removingManagerIds.Contains(user.Id))"
                                                            title="Usuń z menedżerów">
                                                        @if (removingManagerIds.Contains(user.Id))
                                                        {
                                                            <span class="spinner-border spinner-border-sm" role="status"></span>
                                                        }
                                                        else
                                                        {
                                                            <i class="bi bi-briefcase-fill"></i>
                                                        }
                                                    </button>
                                                    <button class="btn btn-outline-danger" 
                                                            @onclick="() => ConfirmDeleteAccount(user.Id, user.UserName)"
                                                            disabled="@(deletingUserIds.Contains(user.Id))"
                                                            title="Usuń konto">
                                                        @if (deletingUserIds.Contains(user.Id))
                                                        {
                                                            <span class="spinner-border spinner-border-sm" role="status"></span>
                                                        }
                                                        else
                                                        {
                                                            <i class="bi bi-trash"></i>
                                                        }
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="bi bi-briefcase text-muted display-4"></i>
                            <p class="mt-3 mb-0 text-muted">Brak menedżerów</p>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="col-lg-6 mb-4">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center bg-info text-white">
                    <h5 class="mb-0">
                        <i class="bi bi-people"></i> Konta bez ról
                    </h5>
                    <button class="btn btn-outline-light btn-sm" @onclick="LoadAccountsWithoutRoles" disabled="@isLoadingAccountsWithoutRoles">
                        @if (isLoadingAccountsWithoutRoles)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        else
                        {
                            <i class="bi bi-arrow-clockwise"></i>
                        }
                        Odśwież
                    </button>
                </div>
                <div class="card-body">
                    @if (isLoadingAccountsWithoutRoles)
                    {
                        <div class="text-center py-4">
                            <div class="spinner-border text-info" role="status"></div>
                            <p class="mt-2 mb-0 text-muted">Ładowanie kont...</p>
                        </div>
                    }
                    else if (filteredAccountsWithoutRoles?.Any() == true)
                    {
                        <div class="mb-3">
                            <input type="text" class="form-control" 
                                   placeholder="Szukaj kont..." 
                                   value="@accountSearchText"
                                   @oninput="OnAccountSearchChanged" />
                        </div>
                        
                        <div class="table-responsive" style="max-height: 400px; overflow-y: auto;">
                            <table class="table table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th>Użytkownik</th>
                                        <th>Email</th>
                                        <th>Akcje</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var user in filteredAccountsWithoutRoles.Take(20))
                                    {
                                        <tr>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    @if (!string.IsNullOrEmpty(user.ProfilePicture))
                                                    {
                                                        <img src="@user.ProfilePicture" class="rounded-circle me-2" 
                                                             style="width: 32px; height: 32px; object-fit: cover;" />
                                                    }
                                                    else
                                                    {
                                                        <div class="bg-info rounded-circle d-flex align-items-center justify-content-center text-white me-2" 
                                                             style="width: 32px; height: 32px; font-size: 0.8rem;">
                                                            <i class="bi bi-person"></i>
                                                        </div>
                                                    }
                                                    <div>
                                                        <div class="fw-bold">@user.UserName</div>
                                                        <small class="text-muted">ID: @user.Id[..8]...</small>
                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                @user.Email
                                                @if (user.IsEmailConfirmed == true)
                                                {
                                                    <i class="bi bi-check-circle-fill text-success ms-1" title="Email potwierdzony"></i>
                                                }
                                            </td>
                                            <td>
                                                <div class="btn-group btn-group-sm">
                                                    <button class="btn btn-outline-primary" 
                                                            @onclick="() => AddToManagers(user.Id, user.UserName)"
                                                            disabled="@(addingManagerIds.Contains(user.Id))"
                                                            title="Dodaj do menedżerów">
                                                        @if (addingManagerIds.Contains(user.Id))
                                                        {
                                                            <span class="spinner-border spinner-border-sm" role="status"></span>
                                                        }
                                                        else
                                                        {
                                                            <i class="bi bi-briefcase-fill"></i>
                                                        }
                                                    </button>
                                                    <button class="btn btn-outline-secondary" 
                                                            @onclick="() => ShowEditUserModal(user)"
                                                            title="Edytuj">
                                                        <i class="bi bi-pencil"></i>
                                                    </button>
                                                    <button class="btn btn-outline-danger" 
                                                            @onclick="() => ConfirmDeleteAccount(user.Id, user.UserName)"
                                                            disabled="@(deletingUserIds.Contains(user.Id))"
                                                            title="Usuń konto">
                                                        @if (deletingUserIds.Contains(user.Id))
                                                        {
                                                            <span class="spinner-border spinner-border-sm" role="status"></span>
                                                        }
                                                        else
                                                        {
                                                            <i class="bi bi-trash"></i>
                                                        }
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        
                        @if ((filteredAccountsWithoutRoles?.Count ?? 0) > 20)
                        {
                            <div class="text-center mt-3">
                                <small class="text-muted">
                                    Wyświetlono 20 z @filteredAccountsWithoutRoles.Count kont
                                </small>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="bi bi-people text-muted display-4"></i>
                            <p class="mt-3 mb-0 text-muted">Brak kont bez ról</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@if (showAdminManagementModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">
                        <i class="bi bi-shield-fill-check"></i> Zarządzanie adminami
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseAdminManagementModal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-header bg-success text-white">
                                    <h6 class="mb-0">
                                        <i class="bi bi-person-plus"></i> Dodaj admina
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <div class="mb-3">
                                        <label class="form-label">Szukaj użytkownika:</label>
                                        <input type="text" class="form-control" 
                                               placeholder="Wprowadź nazwę użytkownika lub email..." 
                                               value="@adminSearchText"
                                               @oninput="OnAdminSearchChanged" />
                                    </div>
                                    
                                    @if (adminFilteredUsers?.Any() == true)
                                    {
                                        <div class="list-group" style="max-height: 300px; overflow-y: auto;">
                                            @foreach (var user in adminFilteredUsers.Take(5))
                                            {
                                                <div class="list-group-item d-flex justify-content-between align-items-center">
                                                    <div class="d-flex align-items-center">
                                                        @if (!string.IsNullOrEmpty(user.ProfilePicture))
                                                        {
                                                            <img src="@user.ProfilePicture" class="rounded-circle me-2" 
                                                                 style="width: 32px; height: 32px; object-fit: cover;" />
                                                        }
                                                        else
                                                        {
                                                            <div class="bg-secondary rounded-circle d-flex align-items-center justify-content-center text-white me-2" 
                                                                 style="width: 32px; height: 32px; font-size: 0.8rem;">
                                                                <i class="bi bi-person"></i>
                                                            </div>
                                                        }
                                                        <div>
                                                            <div class="fw-bold">@user.UserName</div>
                                                            <small class="text-muted">@user.Email</small>
                                                        </div>
                                                    </div>
                                                    <button class="btn btn-sm btn-danger" 
                                                            @onclick="() => AddToAdmins(user.Id, user.UserName)"
                                                            disabled="@(addingAdminIds.Contains(user.Id))">
                                                        @if (addingAdminIds.Contains(user.Id))
                                                        {
                                                            <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                                                        }
                                                        <i class="bi bi-shield-fill-check"></i>
                                                    </button>
                                                </div>
                                            }
                                        </div>
                                    }
                                    else if (!string.IsNullOrEmpty(adminSearchText))
                                    {
                                        <div class="text-center py-3">
                                            <i class="bi bi-search text-muted"></i>
                                            <p class="mb-0 text-muted">Nie znaleziono użytkowników</p>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="text-center py-3">
                                            <i class="bi bi-shield-fill-check text-muted"></i>
                                            <p class="mb-0 text-muted">Wprowadź nazwę użytkownika</p>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-header bg-warning text-dark">
                                    <h6 class="mb-0">
                                        <i class="bi bi-person-dash"></i> Usuń admina
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <EditForm Model="@removeAdminModel" OnValidSubmit="RemoveFromAdmins">
                                        <DataAnnotationsValidator />
                                        <div class="mb-3">
                                            <label for="removeAdminInput" class="form-label">ID lub nazwa użytkownika:</label>
                                            <InputText id="removeAdminInput" class="form-control" 
                                                      @bind-Value="removeAdminModel.UserIdentifier" 
                                                      placeholder="Wprowadź ID użytkownika" />
                                            <ValidationMessage For="@(() => removeAdminModel.UserIdentifier)" class="text-danger" />
                                        </div>
                                        
                                        <button type="submit" class="btn btn-warning w-100" disabled="@isRemovingAdmin">
                                            @if (isRemovingAdmin)
                                            {
                                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                            }
                                            <i class="bi bi-shield-fill-x"></i> Usuń z adminów
                                        </button>
                                    </EditForm>
                                    
                                    <div class="mt-3">
                                        <small class="text-muted">
                                            <i class="bi bi-info-circle"></i>
                                            Można wprowadzić pełny ID użytkownika lub jego nazwę użytkownika.
                                        </small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseAdminManagementModal">Zamknij</button>
                </div>
            </div>
        </div>
    </div>
}

@if (showCreateAccountModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-info text-white">
                    <h5 class="modal-title">
                        <i class="bi bi-person-add"></i> Utwórz nowe konto
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseCreateAccountModal"></button>
                </div>
                <EditForm Model="@createAccountModel" OnValidSubmit="CreateAccount">
                    <DataAnnotationsValidator />
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="createUserName" class="form-label">Nazwa użytkownika:</label>
                            <InputText id="createUserName" class="form-control" @bind-Value="createAccountModel.UserName" 
                                      placeholder="Wprowadź nazwę użytkownika" />
                            <ValidationMessage For="@(() => createAccountModel.UserName)" class="text-danger" />
                        </div>
                        
                        <div class="mb-3">
                            <label for="createEmail" class="form-label">Email:</label>
                            <InputText id="createEmail" type="email" class="form-control" @bind-Value="createAccountModel.Email" 
                                      placeholder="Wprowadź adres email" />
                            <ValidationMessage For="@(() => createAccountModel.Email)" class="text-danger" />
                        </div>
                        
                        <div class="mb-3">
                            <label for="createPassword" class="form-label">Hasło:</label>
                            <InputText id="createPassword" type="password" class="form-control" @bind-Value="createAccountModel.Password" 
                                      placeholder="Wprowadź hasło" />
                            <ValidationMessage For="@(() => createAccountModel.Password)" class="text-danger" />
                            <small class="form-text text-muted">
                                <i class="bi bi-info-circle"></i>
                                Hasło musi mieć co najmniej 8 znaków, zawierać dużą literę, małą literę, cyfrę i znak specjalny.
                            </small>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseCreateAccountModal">Anuluj</button>
                        <button type="submit" class="btn btn-info" disabled="@isCreatingAccount">
                            @if (isCreatingAccount)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            <i class="bi bi-person-add"></i><text> Utwórz konto</text>
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@if (showEditUserModal && editUserModel != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">
                        <i class="bi bi-pencil"></i> Edytuj użytkownika
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseEditUserModal"></button>
                </div>
                <EditForm Model="@editUserModel" OnValidSubmit="UpdateUser">
                    <DataAnnotationsValidator />
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="editUserName" class="form-label">Nazwa użytkownika:</label>
                            <InputText id="editUserName" class="form-control" @bind-Value="editUserModel.UserName" />
                            <ValidationMessage For="@(() => editUserModel.UserName)" class="text-danger" />
                        </div>
                        
                        <div class="mb-3">
                            <label for="editEmail" class="form-label">Email:</label>
                            <InputText id="editEmail" type="email" class="form-control" @bind-Value="editUserModel.Email" />
                            <ValidationMessage For="@(() => editUserModel.Email)" class="text-danger" />
                        </div>
                        
                        <div class="alert alert-info">
                            <i class="bi bi-info-circle"></i>
                            <strong>ID użytkownika:</strong> @editUserModel.UserId
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseEditUserModal">Anuluj</button>
                        <button type="submit" class="btn btn-primary" disabled="@isUpdatingUser">
                            @if (isUpdatingUser)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            <i class="bi bi-check"></i><text> Zapisz zmiany</text>
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@if (showAddManagerModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">
                        <i class="bi bi-briefcase"></i> Dodaj menedżera
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseAddManagerModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Szukaj użytkownika (tylko konta bez ról):</label>
                        <input type="text" class="form-control" 
                               placeholder="Wprowadź nazwę użytkownika lub email..." 
                               value="@modalSearchText"
                               @oninput="OnModalSearchChanged" />
                    </div>
                    
                    @if (modalFilteredAccounts?.Any() == true)
                    {
                        <div class="list-group" style="max-height: 400px; overflow-y: auto;">
                            @foreach (var user in modalFilteredAccounts.Take(10))
                            {
                                <div class="list-group-item d-flex justify-content-between align-items-center">
                                    <div class="d-flex align-items-center">
                                        @if (!string.IsNullOrEmpty(user.ProfilePicture))
                                        {
                                            <img src="@user.ProfilePicture" class="rounded-circle me-3" 
                                                 style="width: 40px; height: 40px; object-fit: cover;" />
                                        }
                                        else
                                        {
                                            <div class="bg-info rounded-circle d-flex align-items-center justify-content-center text-white me-3" 
                                                 style="width: 40px; height: 40px;">
                                                <i class="bi bi-person"></i>
                                            </div>
                                        }
                                        <div>
                                            <h6 class="mb-1">@user.UserName</h6>
                                            <p class="mb-1 text-muted">@user.Email</p>
                                            <small class="text-muted">
                                                @if (user.IsEmailConfirmed == true)
                                                {
                                                    <i class="bi bi-check-circle text-success"></i><text> Email potwierdzony</text>
                                                }
                                                else
                                                {
                                                    <i class="bi bi-exclamation-circle text-warning"></i><text> Email niepotwierdzony</text>
                                                }
                                            </small>
                                        </div>
                                    </div>
                                    <button class="btn btn-primary" @onclick="() => AddToManagersFromModal(user.Id, user.UserName)"
                                            disabled="@(addingManagerIds.Contains(user.Id))">
                                        @if (addingManagerIds.Contains(user.Id))
                                        {
                                            <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                                        }
                                        <i class="bi bi-briefcase"></i><text> Dodaj menedżera</text>
                                    </button>
                                </div>
                            }
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(modalSearchText))
                    {
                        <div class="text-center py-4">
                            <i class="bi bi-search text-muted display-4"></i>
                            <p class="mt-3 mb-0 text-muted">Nie znaleziono użytkowników</p>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="bi bi-briefcase text-muted display-4"></i>
                            <p class="mt-3 mb-0 text-muted">Wprowadź nazwę użytkownika lub email</p>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseAddManagerModal">Zamknij</button>
                </div>
            </div>
        </div>
    </div>
}

@if (showRemoveManagerModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-warning text-dark">
                    <h5 class="modal-title">
                        <i class="bi bi-exclamation-triangle"></i> Potwierdzenie usunięcia z menedżerów
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseRemoveManagerModal"></button>
                </div>
                <div class="modal-body">
                    <p>Czy na pewno chcesz usunąć z menedżerów:</p>
                    <div class="bg-light p-3 rounded">
                        <strong>@userToRemoveName</strong>
                    </div>
                    <p class="mt-3 text-muted">Użytkownik straci uprawnienia menedżera i zostanie kontem bez ról.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseRemoveManagerModal">Anuluj</button>
                    <button type="button" class="btn btn-warning" @onclick="RemoveFromManagers" disabled="@isRemovingUser">
                        @if (isRemovingUser)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        <i class="bi bi-briefcase-fill"></i><text> Usuń z menedżerów</text>
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@if (showDeleteAccountModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">
                        <i class="bi bi-exclamation-triangle"></i> Potwierdzenie usunięcia konta
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseDeleteAccountModal"></button>
                </div>
                <div class="modal-body">
                    <p><strong>UWAGA: Ta operacja jest nieodwracalna!</strong></p>
                    <p>Czy na pewno chcesz usunąć konto:</p>
                    <div class="bg-light p-3 rounded">
                        <strong>@userToDeleteName</strong>
                    </div>
                    <p class="mt-3 text-danger">
                        <i class="bi bi-exclamation-triangle-fill"></i>
                        Wszystkie dane użytkownika zostaną trwale usunięte!
                    </p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteAccountModal">Anuluj</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteAccount" disabled="@isDeletingAccount">
                        @if (isDeletingAccount)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        <i class="bi bi-trash"></i><text> Usuń konto</text>
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<User>? accountsWithoutRoles;
    private List<User>? managers;
    private List<User>? filteredAccountsWithoutRoles;
    private List<User>? modalFilteredAccounts;
    private List<User>? adminFilteredUsers;
    
    private bool isLoadingAccountsWithoutRoles = true;
    private bool isLoadingManagers = true;
    private bool isRemovingUser = false;
    private bool isCreatingAccount = false;
    private bool isUpdatingUser = false;
    private bool isDeletingAccount = false;
    private bool isRemovingAdmin = false;
    
    private bool showAddManagerModal = false;
    private bool showRemoveManagerModal = false;
    private bool showCreateAccountModal = false;
    private bool showEditUserModal = false;
    private bool showDeleteAccountModal = false;
    private bool showAdminManagementModal = false;
    
    private HashSet<string> addingManagerIds = new();
    private HashSet<string> removingManagerIds = new();
    private HashSet<string> deletingUserIds = new();
    private HashSet<string> addingAdminIds = new();
    
    private string accountSearchText = "";
    private string modalSearchText = "";
    private string adminSearchText = "";
    private string userToRemoveId = "";
    private string userToRemoveName = "";
    private string userToDeleteId = "";
    private string userToDeleteName = "";
    private string successMessage = "";
    private string errorMessage = "";
    private int adminCount = 0;

    private CreateAccountModel createAccountModel = new();
    private EditUserModel? editUserModel;
    private RemoveAdminModel removeAdminModel = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadInitialData();
    }

    private async Task LoadInitialData()
    {
        await Task.Delay(100);
        await Task.WhenAll(LoadAccountsWithoutRoles(), LoadManagers());
        FilterAccountsWithoutRoles();
    }

    private async Task OnAccountSearchChanged(ChangeEventArgs e)
    {
        accountSearchText = e.Value?.ToString() ?? "";
        FilterAccountsWithoutRoles();
        await Task.CompletedTask;
    }

    private async Task OnModalSearchChanged(ChangeEventArgs e)
    {
        modalSearchText = e.Value?.ToString() ?? "";
        FilterModalAccounts();
        await Task.CompletedTask;
    }

    private async Task OnAdminSearchChanged(ChangeEventArgs e)
    {
        adminSearchText = e.Value?.ToString() ?? "";
        FilterAdminUsers();
        await Task.CompletedTask;
    }

    private async Task LoadAccountsWithoutRoles()
    {
        isLoadingAccountsWithoutRoles = true;
        try
        {
            var response = await Http.GetAsync("api/account/without-role");
            
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                accountsWithoutRoles = JsonSerializer.Deserialize<List<User>>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
                FilterAccountsWithoutRoles();
            }
            else
            {
                await HandleApiError(response, "Błąd podczas ładowania kont bez ról");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas ładowania kont bez ról: {ex.Message}");
            errorMessage = "Wystąpił błąd podczas ładowania listy kont bez ról.";
        }
        finally
        {
            isLoadingAccountsWithoutRoles = false;
            StateHasChanged();
        }
    }

    private async Task LoadManagers()
    {
        isLoadingManagers = true;
        try
        {
            var response = await Http.GetAsync("api/manager/all");
            
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                managers = JsonSerializer.Deserialize<List<User>>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
            }
            else
            {
                await HandleApiError(response, "Błąd podczas ładowania menedżerów");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas ładowania menedżerów: {ex.Message}");
            errorMessage = "Wystąpił błąd podczas ładowania listy menedżerów.";
        }
        finally
        {
            isLoadingManagers = false;
            StateHasChanged();
        }
    }

    private void FilterAccountsWithoutRoles()
    {
        if (accountsWithoutRoles == null)
        {
            filteredAccountsWithoutRoles = new List<User>();
            return;
        }
        
        if (string.IsNullOrWhiteSpace(accountSearchText))
        {
            filteredAccountsWithoutRoles = accountsWithoutRoles.ToList();
        }
        else
        {
            var searchLower = accountSearchText.ToLower().Trim();
            filteredAccountsWithoutRoles = accountsWithoutRoles.Where(u => 
                (!string.IsNullOrEmpty(u.UserName) && u.UserName.ToLower().Contains(searchLower)) ||
                (!string.IsNullOrEmpty(u.Email) && u.Email.ToLower().Contains(searchLower))
            ).ToList();
        }
        
        StateHasChanged();
    }

    private void FilterModalAccounts()
    {
        if (accountsWithoutRoles == null)
        {
            modalFilteredAccounts = new List<User>();
            return;
        }
        
        if (string.IsNullOrWhiteSpace(modalSearchText))
        {
            modalFilteredAccounts = new List<User>();
        }
        else
        {
            var searchLower = modalSearchText.ToLower().Trim();
            modalFilteredAccounts = accountsWithoutRoles.Where(u => 
                (!string.IsNullOrEmpty(u.UserName) && u.UserName.ToLower().Contains(searchLower)) ||
                (!string.IsNullOrEmpty(u.Email) && u.Email.ToLower().Contains(searchLower))
            ).ToList();
        }
        
        StateHasChanged();
    }

    private void FilterAdminUsers()
    {
        var allUsers = new List<User>();
        if (accountsWithoutRoles != null) allUsers.AddRange(accountsWithoutRoles);
        if (managers != null) allUsers.AddRange(managers);
        
        if (string.IsNullOrWhiteSpace(adminSearchText))
        {
            adminFilteredUsers = new List<User>();
        }
        else
        {
            var searchLower = adminSearchText.ToLower().Trim();
            adminFilteredUsers = allUsers.Where(u => 
                (!string.IsNullOrEmpty(u.UserName) && u.UserName.ToLower().Contains(searchLower)) ||
                (!string.IsNullOrEmpty(u.Email) && u.Email.ToLower().Contains(searchLower))
            ).ToList();
        }
        
        StateHasChanged();
    }

    private async Task CreateAccount()
    {
        isCreatingAccount = true;
        try
        {
            var response = await Http.PostAsJsonAsync("api/account/create", createAccountModel);
            
            if (response.IsSuccessStatusCode)
            {
                successMessage = $"Konto dla {createAccountModel.UserName} zostało utworzone pomyślnie.";
                CloseCreateAccountModal();
                await RefreshData();
            }
            else
            {
                await HandleApiError(response, "Błąd podczas tworzenia konta");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas tworzenia konta: {ex.Message}");
            errorMessage = "Wystąpił błąd podczas tworzenia konta.";
        }
        finally
        {
            isCreatingAccount = false;
            StateHasChanged();
        }
    }

    private async Task UpdateUser()
    {
        if (editUserModel == null) return;
        
        isUpdatingUser = true;
        try
        {
            var response = await Http.PutAsJsonAsync("api/account/update", editUserModel);
            
            if (response.IsSuccessStatusCode)
            {
                successMessage = $"Dane użytkownika {editUserModel.UserName} zostały zaktualizowane.";
                CloseEditUserModal();
                await RefreshData();
            }
            else
            {
                await HandleApiError(response, "Błąd podczas aktualizacji użytkownika");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas aktualizacji użytkownika: {ex.Message}");
            errorMessage = "Wystąpił błąd podczas aktualizacji użytkownika.";
        }
        finally
        {
            isUpdatingUser = false;
            StateHasChanged();
        }
    }

    private async Task DeleteAccount()
    {
        if (string.IsNullOrEmpty(userToDeleteId)) return;

        isDeletingAccount = true;
        deletingUserIds.Add(userToDeleteId);
        
        try
        {
            var response = await Http.DeleteAsync($"api/account/delete-without-password/{userToDeleteId}");
            
            if (response.IsSuccessStatusCode)
            {
                successMessage = $"Konto użytkownika {userToDeleteName} zostało usunięte.";
                CloseDeleteAccountModal();
                await RefreshData();
            }
            else
            {
                await HandleApiError(response, $"Błąd podczas usuwania konta {userToDeleteName}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas usuwania konta: {ex.Message}");
            errorMessage = $"Wystąpił błąd podczas usuwania konta {userToDeleteName}.";
        }
        finally
        {
            isDeletingAccount = false;
            deletingUserIds.Remove(userToDeleteId);
            StateHasChanged();
        }
    }

    private async Task AddToManagers(string userId, string userName)
    {
        if (addingManagerIds.Contains(userId)) return;
        
        addingManagerIds.Add(userId);
        try
        {
            var response = await Http.PatchAsync($"api/manager/add/{userId}", null);
            
            if (response.IsSuccessStatusCode)
            {
                successMessage = $"Użytkownik {userName} został dodany do menedżerów.";
                await RefreshData();
            }
            else
            {
                await HandleApiError(response, $"Błąd podczas dodawania {userName} do menedżerów");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas dodawania do menedżerów: {ex.Message}");
            errorMessage = $"Wystąpił błąd podczas dodawania {userName} do menedżerów.";
        }
        finally
        {
            addingManagerIds.Remove(userId);
            StateHasChanged();
        }
    }

    private async Task AddToManagersFromModal(string userId, string userName)
    {
        await AddToManagers(userId, userName);
        CloseAddManagerModal();
    }

    private void ConfirmRemoveFromManagers(string userId, string userName)
    {
        userToRemoveId = userId;
        userToRemoveName = userName;
        showRemoveManagerModal = true;
    }

    private async Task RemoveFromManagers()
    {
        if (string.IsNullOrEmpty(userToRemoveId)) return;

        isRemovingUser = true;
        removingManagerIds.Add(userToRemoveId);
        
        try
        {
            var response = await Http.PatchAsync($"api/manager/remove/{userToRemoveId}", null);
            
            if (response.IsSuccessStatusCode)
            {
                successMessage = $"Użytkownik {userToRemoveName} został usunięty z menedżerów.";
                await RefreshData();
                CloseRemoveManagerModal();
            }
            else
            {
                await HandleApiError(response, $"Błąd podczas usuwania {userToRemoveName} z menedżerów");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas usuwania z menedżerów: {ex.Message}");
            errorMessage = $"Wystąpił błąd podczas usuwania {userToRemoveName} z menedżerów.";
        }
        finally
        {
            isRemovingUser = false;
            removingManagerIds.Remove(userToRemoveId);
            StateHasChanged();
        }
    }

    private async Task AddToAdmins(string userId, string userName)
    {
        if (addingAdminIds.Contains(userId)) return;
        
        addingAdminIds.Add(userId);
        try
        {
            var response = await Http.PatchAsync($"api/admin/add/{userId}", null);
            
            if (response.IsSuccessStatusCode)
            {
                successMessage = $"Użytkownik {userName} został dodany do adminów.";
                adminCount++;
                await RefreshData();
            }
            else
            {
                await HandleApiError(response, $"Błąd podczas dodawania {userName} do adminów");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas dodawania do adminów: {ex.Message}");
            errorMessage = $"Wystąpił błąd podczas dodawania {userName} do adminów.";
        }
        finally
        {
            addingAdminIds.Remove(userId);
            StateHasChanged();
        }
    }

    private async Task RemoveFromAdmins()
    {
        if (string.IsNullOrEmpty(removeAdminModel.UserIdentifier)) return;

        isRemovingAdmin = true;
        try
        {
            var response = await Http.PatchAsync($"api/admin/remove/{removeAdminModel.UserIdentifier}", null);
            
            if (response.IsSuccessStatusCode)
            {
                successMessage = $"Użytkownik {removeAdminModel.UserIdentifier} został usunięty z adminów.";
                adminCount = Math.Max(0, adminCount - 1);
                removeAdminModel.UserIdentifier = "";
                await RefreshData();
            }
            else
            {
                await HandleApiError(response, $"Błąd podczas usuwania {removeAdminModel.UserIdentifier} z adminów");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas usuwania z adminów: {ex.Message}");
            errorMessage = $"Wystąpił błąd podczas usuwania {removeAdminModel.UserIdentifier} z adminów.";
        }
        finally
        {
            isRemovingAdmin = false;
            StateHasChanged();
        }
    }

    private void ShowAddManagerModal()
    {
        modalSearchText = "";
        modalFilteredAccounts = new List<User>();
        showAddManagerModal = true;
    }

    private void CloseAddManagerModal()
    {
        showAddManagerModal = false;
        modalSearchText = "";
        modalFilteredAccounts = new List<User>();
    }

    private void ShowAdminManagementModal()
    {
        adminSearchText = "";
        adminFilteredUsers = new List<User>();
        removeAdminModel = new RemoveAdminModel();
        showAdminManagementModal = true;
    }

    private void CloseAdminManagementModal()
    {
        showAdminManagementModal = false;
        adminSearchText = "";
        adminFilteredUsers = new List<User>();
        removeAdminModel = new RemoveAdminModel();
    }

    private void CloseRemoveManagerModal()
    {
        showRemoveManagerModal = false;
        userToRemoveId = "";
        userToRemoveName = "";
    }

    private void ShowCreateAccountModal()
    {
        createAccountModel = new CreateAccountModel();
        showCreateAccountModal = true;
    }

    private void CloseCreateAccountModal()
    {
        showCreateAccountModal = false;
        createAccountModel = new CreateAccountModel();
    }

    private void ShowEditUserModal(User user)
    {
        editUserModel = new EditUserModel
        {
            UserId = user.Id,
            UserName = user.UserName,
            Email = user.Email
        };
        showEditUserModal = true;
    }

    private void CloseEditUserModal()
    {
        showEditUserModal = false;
        editUserModel = null;
    }

    private void ConfirmDeleteAccount(string userId, string userName)
    {
        userToDeleteId = userId;
        userToDeleteName = userName;
        showDeleteAccountModal = true;
    }

    private void CloseDeleteAccountModal()
    {
        showDeleteAccountModal = false;
        userToDeleteId = "";
        userToDeleteName = "";
    }

    private async Task RefreshData()
    {
        addingManagerIds.Clear();
        removingManagerIds.Clear();
        deletingUserIds.Clear();
        addingAdminIds.Clear();
        await Task.WhenAll(LoadAccountsWithoutRoles(), LoadManagers());
    }

    private string GetRoleBadgeClass(string role)
    {
        return role switch
        {
            "Admin" => "bg-danger",
            "Manager" => "bg-primary",
            "Staff" => "bg-success",
            "Guest" => "bg-info",
            _ => "bg-secondary"
        };
    }

    private async Task HandleApiError(HttpResponseMessage response, string defaultMessage)
    {
        string specificMessage = response.StatusCode switch
        {
            System.Net.HttpStatusCode.Unauthorized => "Brak autoryzacji. Zaloguj się ponownie.",
            System.Net.HttpStatusCode.Forbidden => "Nie masz uprawnień do wykonania tej operacji.",
            System.Net.HttpStatusCode.NotFound => "Nie znaleziono użytkownika.",
            System.Net.HttpStatusCode.Conflict => "Użytkownik już ma odpowiednią rolę lub nie można zmienić roli.",
            _ => $"{defaultMessage} (kod: {(int)response.StatusCode})"
        };
        
        errorMessage = specificMessage;
        
        var errorContent = await response.Content.ReadAsStringAsync();
        Console.WriteLine($"API Error ({response.StatusCode}): {errorContent}");
    }

    public class User
    {
        public string Id { get; set; } = string.Empty;
        public string UserName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public List<string> Roles { get; set; } = new();
        public string? ProfilePicture { get; set; }
        public bool? IsEmailConfirmed { get; set; }
    }

    public class CreateAccountModel
    {
        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Nazwa użytkownika jest wymagana")]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 3, ErrorMessage = "Nazwa użytkownika musi mieć od 3 do 50 znaków.")]
        public string UserName { get; set; } = string.Empty;

        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Email jest wymagany")]
        [System.ComponentModel.DataAnnotations.EmailAddress(ErrorMessage = "Niepoprawny format email")]
        public string Email { get; set; } = string.Empty;

        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Hasło jest wymagane")]
        [System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.Password)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[^a-zA-Z0-9]).{8,}$", ErrorMessage = "Hasło musi spełniać wymagania.")]
        public string Password { get; set; } = string.Empty;
    }

    public class EditUserModel
    {
        public string UserId { get; set; } = string.Empty;

        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Nazwa użytkownika jest wymagana")]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 3, ErrorMessage = "Nazwa użytkownika musi mieć od 3 do 50 znaków.")]
        public string UserName { get; set; } = string.Empty;

        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Email jest wymagany")]
        [System.ComponentModel.DataAnnotations.EmailAddress(ErrorMessage = "Niepoprawny format email")]
        public string Email { get; set; } = string.Empty;
    }

    public class RemoveAdminModel
    {
        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "ID lub nazwa użytkownika jest wymagana")]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 1, ErrorMessage = "Identyfikator musi mieć od 1 do 100 znaków.")]
        public string UserIdentifier { get; set; } = string.Empty;
    }
}