@page "/payment/{orderId:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Components.Authorization
@using System.ComponentModel.DataAnnotations
@using System.Globalization

<PageTitle>@pageTitle</PageTitle>

<div class="container mt-4">
    @try
    {
        <!-- Loading state -->
        @if (isLoading)
        {
            <div class="text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Ładowanie...</span>
                </div>
                <p class="mt-3 text-muted">Wczytywanie informacji o płatności...</p>
            </div>
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger d-flex align-items-center" role="alert">
                <i class="bi bi-exclamation-triangle me-2"></i>
                <div>
                    @errorMessage
                    <div class="mt-2">
                        <button class="btn btn-sm btn-primary" @onclick="GoToOrder">
                            Powrót do zamówienia
                        </button>
                        <button class="btn btn-sm btn-secondary ms-2" @onclick="LoadPaymentData">
                            Spróbuj ponownie
                        </button>
                    </div>
                </div>
            </div>
        }
        else if (paymentCompleted)
        {
            <div class="row justify-content-center">
                <div class="col-lg-8">
                    <div class="card border-0 shadow-sm">
                        <div class="card-body text-center py-5">
                            <div class="mb-4">
                                <i class="bi bi-check-circle-fill text-success" style="font-size: 4rem;"></i>
                            </div>
                            <h1 class="display-6 fw-bold text-success mb-3">
                                Płatność zakończona pomyślnie!
                            </h1>
                            <p class="lead text-muted mb-4">
                                Twoja rezerwacja została potwierdzona. Szczegóły zostały wysłane na Twój adres email.
                            </p>
                            
                            <div class="alert alert-info mb-4">
                                <h6><i class="bi bi-info-circle"></i> Szczegóły rezerwacji</h6>
                                <p class="mb-1"><strong>Numer zamówienia:</strong> #@OrderId</p>
                                <p class="mb-1"><strong>Kwota:</strong> @order?.TotalPrice.ToString("C", polishCulture)</p>
                                <p class="mb-0"><strong>Metoda płatności:</strong> @GetPaymentMethodText()</p>
                            </div>
                            
                            <div class="d-grid gap-2 d-md-flex justify-content-md-center">
                                <button class="btn btn-success me-md-2" @onclick="DownloadBill">
                                    <i class="bi bi-download"></i> Pobierz rachunek
                                </button>
                                <button class="btn btn-outline-primary me-md-2" @onclick="GoToOrder">
                                    <i class="bi bi-eye"></i> Zobacz zamówienie
                                </button>
                                <button class="btn btn-outline-secondary" @onclick="GoToHotels">
                                    <i class="bi bi-house-door"></i> Powrót do hoteli
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
        else if (order != null)
        {
            <!-- Breadcrumb -->
            <nav aria-label="breadcrumb" class="mb-4">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="/hotels" class="text-decoration-none">
                            <i class="bi bi-house-door"></i> Hotele
                        </a>
                    </li>
                    <li class="breadcrumb-item">
                        <a href="/order/@OrderId" class="text-decoration-none">
                            Zamówienie #@OrderId
                        </a>
                    </li>
                    <li class="breadcrumb-item active" aria-current="page">
                        Płatność
                    </li>
                </ol>
            </nav>

            <!-- Payment header -->
            <div class="row mb-4">
                <div class="col-12">
                    <div class="card border-0 shadow-sm">
                        <div class="card-body">
                            <div class="row align-items-center">
                                <div class="col-md-8">
                                    <h1 class="display-6 fw-bold text-primary mb-2">
                                        <i class="bi bi-credit-card"></i> Finalizacja płatności
                                    </h1>
                                    <p class="text-muted mb-0">
                                        Zamówienie #@OrderId • Kwota do zapłaty: <strong>@order.TotalPrice.ToString("C", polishCulture)</strong>
                                    </p>
                                </div>
                                <div class="col-md-4 text-end">
                                    <div class="badge bg-warning text-dark fs-6 p-2">
                                        <i class="bi bi-clock"></i> Oczekuje na płatność
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <!-- Payment methods -->
                <div class="col-lg-8">
                    <div class="card border-0 shadow-sm">
                        <div class="card-header bg-white border-0">
                            <h5 class="mb-0">
                                <i class="bi bi-wallet text-primary"></i> Wybierz metodę płatności
                            </h5>
                        </div>
                        <div class="card-body">
                            <!-- Payment method selection -->
                            <div class="mb-4">
                                <div class="row g-3">
                                    <div class="col-md-6">
                                        <div class="card h-100 @GetPaymentMethodClass("creditCard") payment-method-card" 
                                             @onclick="@(() => SelectPaymentMethod("creditCard"))" style="cursor: pointer;">
                                            <div class="card-body text-center">
                                                <i class="bi bi-credit-card display-4 text-primary mb-3"></i>
                                                <h6 class="card-title">Karta płatnicza</h6>
                                                <p class="card-text text-muted small">Visa, Mastercard, American Express</p>
                                                @if (selectedPaymentMethod == "creditCard")
                                                {
                                                    <i class="bi bi-check-circle-fill text-success"></i>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="card h-100 @GetPaymentMethodClass("cash") payment-method-card" 
                                             @onclick="@(() => SelectPaymentMethod("cash"))" style="cursor: pointer;">
                                            <div class="card-body text-center">
                                                <i class="bi bi-cash-stack display-4 text-success mb-3"></i>
                                                <h6 class="card-title">Płatność gotówką</h6>
                                                <p class="card-text text-muted small">Płatność przy odbiorze</p>
                                                @if (selectedPaymentMethod == "cash")
                                                {
                                                    <i class="bi bi-check-circle-fill text-success"></i>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Credit card form -->
                            @if (selectedPaymentMethod == "creditCard")
                            {
                                <div class="payment-form">
                                    <h6 class="mb-3">
                                        <i class="bi bi-lock"></i> Dane karty płatniczej
                                    </h6>
                                    
                                    <EditForm Model="@creditCardModel" OnValidSubmit="@ProcessCreditCardPayment">
                                        <DataAnnotationsValidator />
                                        
                                        <div class="mb-3">
                                            <label for="cardNumber" class="form-label">Numer karty</label>
                                            <div class="position-relative">
                                                <InputText id="cardNumber" class="@($"form-control {GetCardNumberValidationClass()}")" 
                                                           @bind-Value="creditCardModel.CardNumber" 
                                                           placeholder="1234 5678 9012 3456" maxlength="19" 
                                                           @oninput="FormatCardNumber" />
                                                @if (!string.IsNullOrEmpty(creditCardModel.CardNumber))
                                                {
                                                    <div class="position-absolute top-50 end-0 translate-middle-y me-3">
                                                        @if (IsCardNumberValid(creditCardModel.CardNumber))
                                                        {
                                                            <i class="bi bi-check-circle-fill text-success"></i>
                                                        }
                                                        else
                                                        {
                                                            <i class="bi bi-x-circle-fill text-danger"></i>
                                                        }
                                                    </div>
                                                }
                                            </div>
                                            <ValidationMessage For="@(() => creditCardModel.CardNumber)" class="text-danger" />
                                            @if (!string.IsNullOrEmpty(creditCardModel.CardNumber) && !IsCardNumberValid(creditCardModel.CardNumber))
                                            {
                                                <div class="text-danger small mt-1">
                                                    <i class="bi bi-exclamation-triangle"></i> Nieprawidłowy numer karty (sprawdź cyfry kontrolne)
                                                </div>
                                            }
                                            @if (!string.IsNullOrEmpty(creditCardModel.CardNumber) && IsCardNumberValid(creditCardModel.CardNumber))
                                            {
                                                <div class="text-success small mt-1">
                                                    <i class="bi bi-check-circle"></i> @GetCardType(creditCardModel.CardNumber)
                                                </div>
                                            }
                                        </div>
                                        
                                        <div class="row mb-3">
                                            <div class="col-md-6">
                                                <label for="expirationDate" class="form-label">Data ważności</label>
                                                <div class="position-relative">
                                                    <InputText id="expirationDate" class="@($"form-control {GetExpirationDateValidationClass()}")" 
                                                               @bind-Value="creditCardModel.ExpirationDate" 
                                                               placeholder="MM/YY lub MMYY" maxlength="5" 
                                                               @oninput="FormatExpirationDate" />
                                                    @if (!string.IsNullOrEmpty(creditCardModel.ExpirationDate))
                                                    {
                                                        <div class="position-absolute top-50 end-0 translate-middle-y me-3">
                                                            @if (IsExpirationDateValid(creditCardModel.ExpirationDate))
                                                            {
                                                                <i class="bi bi-check-circle-fill text-success"></i>
                                                            }
                                                            else
                                                            {
                                                                <i class="bi bi-x-circle-fill text-danger"></i>
                                                            }
                                                        </div>
                                                    }
                                                </div>
                                                <ValidationMessage For="@(() => creditCardModel.ExpirationDate)" class="text-danger" />
                                                @if (!string.IsNullOrEmpty(creditCardModel.ExpirationDate) && !IsExpirationDateValid(creditCardModel.ExpirationDate))
                                                {
                                                    <div class="text-danger small mt-1">
                                                        <i class="bi bi-exclamation-triangle"></i> Karta wygasła lub nieprawidłowa data
                                                    </div>
                                                }
                                            </div>
                                            <div class="col-md-6">
                                                <label for="cvv" class="form-label">CVV</label>
                                                <div class="position-relative">
                                                    <InputText id="cvv" class="@($"form-control {GetCvvValidationClass()}")" 
                                                               @bind-Value="creditCardModel.CVV" 
                                                               placeholder="123" maxlength="4" type="password" />
                                                    @if (!string.IsNullOrEmpty(creditCardModel.CVV))
                                                    {
                                                        <div class="position-absolute top-50 end-0 translate-middle-y me-3">
                                                            @if (IsCvvValid(creditCardModel.CVV))
                                                            {
                                                                <i class="bi bi-check-circle-fill text-success"></i>
                                                            }
                                                            else
                                                            {
                                                                <i class="bi bi-x-circle-fill text-danger"></i>
                                                            }
                                                        </div>
                                                    }
                                                </div>
                                                <ValidationMessage For="@(() => creditCardModel.CVV)" class="text-danger" />
                                            </div>
                                        </div>
                                        
                                        <div class="d-grid">
                                            <button type="submit" class="btn btn-success btn-lg" 
                                                    disabled="@(processingPayment || !IsFormValid())">
                                                @if (processingPayment)
                                                {
                                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                                    <span>Przetwarzam płatność...</span>
                                                }
                                                else
                                                {
                                                    <i class="bi bi-shield-check"></i>
                                                    <span>Zapłać @order.TotalPrice.ToString("C", polishCulture)</span>
                                                }
                                            </button>
                                        </div>
                                    </EditForm>
                                </div>
                            }

                            <!-- Cash payment info -->
                            @if (selectedPaymentMethod == "cash")
                            {
                                <div class="payment-form">
                                    <div class="alert alert-info">
                                        <h6><i class="bi bi-info-circle"></i> Płatność gotówką</h6>
                                        <p class="mb-2">
                                            Wybierając tę opcję, zobowiązujesz się do zapłaty gotówką podczas zameldowania w hotelu.
                                        </p>
                                        <ul class="mb-0">
                                            <li>Płatność należy uregulować przy recepcji</li>
                                            <li>Rezerwacja zostanie potwierdzona</li>
                                            <li>W przypadku braku płatności rezerwacja może zostać anulowana</li>
                                        </ul>
                                    </div>
                                    
                                    <div class="d-grid">
                                        <button class="btn btn-success btn-lg" @onclick="ProcessCashPayment" disabled="@processingPayment">
                                            @if (processingPayment)
                                            {
                                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                                <span>Potwierdzam rezerwację...</span>
                                            }
                                            else
                                            {
                                                <i class="bi bi-check-circle"></i>
                                                <span>Potwierdź rezerwację</span>
                                            }
                                        </button>
                                    </div>
                                </div>
                            }

                            <!-- Security info -->
                            <div class="mt-4 pt-3 border-top">
                                <div class="row text-center">
                                    <div class="col-md-4">
                                        <i class="bi bi-shield-check text-success mb-2 d-block fs-4"></i>
                                        <small class="text-muted">Bezpieczne szyfrowanie SSL</small>
                                    </div>
                                    <div class="col-md-4">
                                        <i class="bi bi-lock text-success mb-2 d-block fs-4"></i>
                                        <small class="text-muted">Ochrona danych osobowych</small>
                                    </div>
                                    <div class="col-md-4">
                                        <i class="bi bi-clock-history text-success mb-2 d-block fs-4"></i>
                                        <small class="text-muted">Natychmiastowe potwierdzenie</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Order summary -->
                <div class="col-lg-4">
                    <div class="card border-0 shadow-sm sticky-top" style="top: 20px;">
                        <div class="card-header bg-primary text-white">
                            <h5 class="mb-0">
                                <i class="bi bi-receipt"></i> Podsumowanie zamówienia
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="d-flex justify-content-between mb-2">
                                <span>Numer zamówienia:</span>
                                <strong>#@OrderId</strong>
                            </div>
                            <div class="d-flex justify-content-between mb-2">
                                <span>Status:</span>
                                <span class="badge bg-warning text-dark">Oczekuje płatności</span>
                            </div>
                            <div class="d-flex justify-content-between mb-2">
                                <span>Klient:</span>
                                <span>@GetCustomerName()</span>
                            </div>
                            <hr>
                            <div class="d-flex justify-content-between mb-3">
                                <span class="h6">Kwota do zapłaty:</span>
                                <strong class="h6 text-primary">@order.TotalPrice.ToString("C", polishCulture)</strong>
                            </div>
                            
                            <!-- Payment methods info -->
                            @if (paymentMethods?.Any() == true)
                            {
                                <div class="border-top pt-3">
                                    <h6 class="mb-2">Akceptujemy:</h6>
                                    <div class="d-flex flex-wrap gap-2">
                                        <span class="badge bg-light text-dark border">Visa</span>
                                        <span class="badge bg-light text-dark border">Mastercard</span>
                                        <span class="badge bg-light text-dark border">American Express</span>
                                        <span class="badge bg-light text-dark border">Gotówka</span>
                                    </div>
                                </div>
                            }
                            
                            <div class="border-top pt-3 mt-3">
                                <button class="btn btn-outline-secondary w-100" @onclick="GoToOrder">
                                    <i class="bi bi-arrow-left"></i> Powrót do zamówienia
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <!-- Empty state -->
            <div class="text-center py-5">
                <i class="bi bi-exclamation-triangle display-1 text-muted"></i>
                <h3 class="mt-3">Nie znaleziono zamówienia</h3>
                <p class="text-muted">Zamówienie o podanym numerze nie istnieje lub nie masz do niego dostępu.</p>
                <button class="btn btn-primary" @onclick="GoToHotels">
                    <i class="bi bi-house-door"></i> Powrót do hoteli
                </button>
            </div>
        }
    }
    catch (Exception ex)
    {
        <div class="alert alert-danger">
            <h5>Błąd renderowania strony</h5>
            <p>@ex.Message</p>
            <button class="btn btn-primary" @onclick="GoToHotels">
                Powrót do hoteli
            </button>
        </div>
    }
</div>

<style>
    .payment-method-card:hover {
        transform: translateY(-2px);
        transition: transform 0.2s ease-in-out;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }
    
    .payment-method-card {
        transition: all 0.2s ease-in-out;
    }
    
    .payment-form {
        animation: fadeIn 0.3s ease-in-out;
    }
    
    @@keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }
</style>

@code {
    [Parameter] public int OrderId { get; set; }

    private OrderViewModel? order;
    private List<PaymentMethodViewModel>? paymentMethods;
    private CreditCardModel creditCardModel = new();
    
    private bool isLoading = true;
    private bool processingPayment = false;
    private bool paymentCompleted = false;
    private string selectedPaymentMethod = "";
    private string completedPaymentMethod = "";
    private string errorMessage = "";
    private string pageTitle = "Płatność - Hotel Management System";
    
    private readonly CultureInfo polishCulture = new("pl-PL");

    private bool isEmailConfirmed = false;
    private bool emailVerificationChecked = false;

    // NOWE METODY - Walidacja algorytmem Luhna i inne walidacje
    private bool IsCardNumberValid(string cardNumber)
    {
        if (string.IsNullOrEmpty(cardNumber)) return false;
        
        var digitsOnly = cardNumber.Replace(" ", "").Replace("-", "");
        
        // Sprawdź czy wszystkie znaki to cyfry
        if (!digitsOnly.All(char.IsDigit)) return false;
        
        // Sprawdź długość (13-19 cyfr dla większości kart)
        if (digitsOnly.Length < 13 || digitsOnly.Length > 19) return false;
        
        // Algorytm Luhna
        return IsValidLuhn(digitsOnly);
    }

    private bool IsValidLuhn(string cardNumber)
    {
        if (string.IsNullOrEmpty(cardNumber)) return false;
        
        int sum = 0;
        bool alternate = false;
        
        // Przejdź przez cyfry od końca
        for (int i = cardNumber.Length - 1; i >= 0; i--)
        {
            if (!char.IsDigit(cardNumber[i])) return false;
            
            int digit = cardNumber[i] - '0';
            
            if (alternate)
            {
                digit *= 2;
                if (digit > 9) digit -= 9;
            }
            
            sum += digit;
            alternate = !alternate;
        }
        
        return sum % 10 == 0;
    }

    private string GetCardType(string cardNumber)
    {
        if (string.IsNullOrEmpty(cardNumber)) return "";
        
        var digitsOnly = cardNumber.Replace(" ", "").Replace("-", "");
        
        if (string.IsNullOrEmpty(digitsOnly)) return "";
        
        // Visa
        if (digitsOnly.StartsWith("4")) return "Visa";
        
        // Mastercard
        if (digitsOnly.StartsWith("5") || 
            (digitsOnly.Length >= 4 && int.TryParse(digitsOnly.Substring(0, 4), out int first4) && first4 >= 2221 && first4 <= 2720))
            return "Mastercard";
        
        // American Express
        if (digitsOnly.StartsWith("34") || digitsOnly.StartsWith("37")) return "American Express";
        
        // Discover
        if (digitsOnly.StartsWith("6")) return "Discover";
        
        return "Nieznany typ karty";
    }

    private bool IsExpirationDateValid(string expirationDate)
    {
        if (string.IsNullOrEmpty(expirationDate)) return false;
    
        string month, year;
    
        // Obsługa formatu MM/YY
        if (expirationDate.Contains("/"))
        {
            var parts = expirationDate.Split('/');
            if (parts.Length != 2) return false;
            month = parts[0];
            year = parts[1];
        }
        // Obsługa formatu MMYY
        else if (expirationDate.Length == 4 && expirationDate.All(char.IsDigit))
        {
            month = expirationDate.Substring(0, 2);
            year = expirationDate.Substring(2, 2);
        }
        else
        {
            return false;
        }
    
        if (!int.TryParse(month, out int monthInt) || !int.TryParse(year, out int yearInt)) return false;
    
        if (monthInt < 1 || monthInt > 12) return false;
    
        // Konwertuj dwucyfrowy rok na pełny (20XX)
        var fullYear = yearInt < 50 ? 2000 + yearInt : 1900 + yearInt;
        if (fullYear < DateTime.Now.Year) return false;
    
        // Sprawdź czy karta nie wygasła w tym miesiącu
        var expirationDateTime = new DateTime(fullYear, monthInt, DateTime.DaysInMonth(fullYear, monthInt));
        return expirationDateTime >= DateTime.Now;
    }

    private bool IsCvvValid(string cvv)
    {
        if (string.IsNullOrEmpty(cvv)) return false;
        return cvv.Length >= 3 && cvv.Length <= 4 && cvv.All(char.IsDigit);
    }

    private bool IsFormValid()
    {
        if (selectedPaymentMethod != "creditCard") return true;
        
        return IsCardNumberValid(creditCardModel.CardNumber) &&
               IsExpirationDateValid(creditCardModel.ExpirationDate) &&
               IsCvvValid(creditCardModel.CVV);
    }

    private string GetCardNumberValidationClass()
    {
        if (string.IsNullOrEmpty(creditCardModel.CardNumber)) return "";
        return IsCardNumberValid(creditCardModel.CardNumber) ? "is-valid" : "is-invalid";
    }

    private string GetExpirationDateValidationClass()
    {
        if (string.IsNullOrEmpty(creditCardModel.ExpirationDate)) return "";
        return IsExpirationDateValid(creditCardModel.ExpirationDate) ? "is-valid" : "is-invalid";
    }

    private string GetCvvValidationClass()
    {
        if (string.IsNullOrEmpty(creditCardModel.CVV)) return "";
        return IsCvvValid(creditCardModel.CVV) ? "is-valid" : "is-invalid";
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            paymentMethods = new List<PaymentMethodViewModel>();

            // Sprawdź autoryzację
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            if (!authState.User.Identity.IsAuthenticated)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            await CheckEmailVerificationStatus();
            await LoadPaymentData();
        }
        catch (Exception ex)
        {
            errorMessage = $"Błąd inicjalizacji: {ex.Message}";
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private async Task CheckEmailVerificationStatus()
    {
        try
        {
            // Używamy bezpośrednio Http - tokeny są dodawane automatycznie
            var response = await Http.GetAsync("api/account/session");
            
            if (response.IsSuccessStatusCode)
            {
                var sessionData = await response.Content.ReadFromJsonAsync<SessionViewModel>();
                isEmailConfirmed = sessionData?.IsEmailConfirmed ?? false;
            }
            else
            {
                isEmailConfirmed = false;
            }
            
            emailVerificationChecked = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd sprawdzania statusu weryfikacji email: {ex.Message}");
            isEmailConfirmed = false;
            emailVerificationChecked = true;
        }
    }

    private string GetCustomerName()
    {
        if (order == null) return "Nieznany";
        return $"{order.FirstName} {order.LastName}".Trim();
    }
    
    private string GetPaymentMethodText()
    {
        return completedPaymentMethod switch
        {
            "creditCard" => "Karta płatnicza",
            "cash" => "Gotówka",
            _ => "Nieznana"
        };
    }
    
    private string GetPaymentMethodClass(string method)
    {
        return selectedPaymentMethod == method ? "border-primary" : "border-light";
    }

    private async Task LoadPaymentData()
    {
        isLoading = true;
        errorMessage = "";

        try
        {
            // Używamy bezpośrednio Http - tokeny są dodawane automatycznie
            
            // Pobierz dane zamówienia
            var orderResponse = await Http.GetAsync($"api/order/{OrderId}");
            
            if (orderResponse.IsSuccessStatusCode)
            {
                order = await orderResponse.Content.ReadFromJsonAsync<OrderViewModel>();
                if (order != null)
                {
                    pageTitle = $"Płatność - Zamówienie #{OrderId} - Hotel Management System";
                    
                    // Sprawdź czy zamówienie można opłacić
                    if (order.Status?.ToLower() != "confirmed" && order.Status?.ToLower() != "pending")
                    {
                        errorMessage = $"Zamówienie ma status '{order.Status}' - nie można go opłacić.";
                        return;
                    }
                }
            }
            else if (orderResponse.StatusCode == System.Net.HttpStatusCode.Forbidden)
            {
                errorMessage = "Nie masz uprawnień do przeglądania tego zamówienia.";
                return;
            }
            else if (orderResponse.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                errorMessage = $"Zamówienie o ID {OrderId} nie zostało znalezione.";
                return;
            }
            else
            {
                errorMessage = $"Błąd ładowania zamówienia: {orderResponse.StatusCode}";
                return;
            }
            
            // Pobierz dostępne metody płatności
            var paymentMethodsResponse = await Http.GetAsync("api/payment/payment-methods");
            if (paymentMethodsResponse.IsSuccessStatusCode)
            {
                paymentMethods = await paymentMethodsResponse.Content.ReadFromJsonAsync<List<PaymentMethodViewModel>>() ?? new List<PaymentMethodViewModel>();
            }
            
            // Ustaw domyślną metodę płatności
            selectedPaymentMethod = "creditCard";
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Błąd połączenia z serwerem: {ex.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"Wystąpił nieoczekiwany błąd: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void SelectPaymentMethod(string method)
    {
        selectedPaymentMethod = method;
        StateHasChanged();
    }

    private async Task ProcessCreditCardPayment()
    {
        if (order == null || !isEmailConfirmed) 
        {
            if (!isEmailConfirmed)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Musisz potwierdzić swój adres email przed dokonaniem płatności.");
            }
            return;
        }

        // Dodatkowa walidacja przed wysłaniem
        if (!IsFormValid())
        {
            await JSRuntime.InvokeVoidAsync("alert", "Sprawdź poprawność danych karty płatniczej.");
            return;
        }

        processingPayment = true;
        
        try
        {
            // Używamy bezpośrednio Http - tokeny są dodawane automatycznie
            
            var paymentData = new
            {
                orderId = OrderId,
                creditCardNumber = creditCardModel.CardNumber.Replace(" ", ""),
                creditCardExpirationDate = creditCardModel.ExpirationDate,
                creditCardCvv = creditCardModel.CVV
            };

            var response = await Http.PostAsJsonAsync("api/payment/pay-with-credit-card", paymentData);

            if (response.IsSuccessStatusCode)
            {
                completedPaymentMethod = "creditCard";
                paymentCompleted = true;
                
                // Wyczyść dane karty z bezpieczeństwa
                creditCardModel = new CreditCardModel();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = "Błąd walidacji danych karty. Sprawdź wprowadzone dane i spróbuj ponownie.";
                Console.WriteLine($"Payment validation error: {errorContent}");
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Forbidden)
            {
                errorMessage = "Nie masz uprawnień do opłacenia tego zamówienia.";
            }
            else
            {
                errorMessage = $"Błąd podczas przetwarzania płatności: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Błąd podczas płatności kartą: {ex.Message}";
        }
        finally
        {
            processingPayment = false;
            StateHasChanged();
        }
    }

    private async Task ProcessCashPayment()
    {
        if (order == null || !isEmailConfirmed) 
        {
            if (!isEmailConfirmed)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Musisz potwierdzić swój adres email przed dokonaniem płatności.");
            }
            return;
        }
        
        processingPayment = true;
        
        try
        {
            // Używamy bezpośrednio Http - tokeny są dodawane automatycznie
            
            var paymentData = new
            {
                orderId = OrderId
            };

            var response = await Http.PostAsJsonAsync("api/payment/pay-with-cash", paymentData);

            if (response.IsSuccessStatusCode)
            {
                completedPaymentMethod = "cash";
                paymentCompleted = true;
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Forbidden)
            {
                errorMessage = "Nie masz uprawnień do opłacenia tego zamówienia.";
            }
            else
            {
                errorMessage = $"Błąd podczas przetwarzania płatności: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Błąd podczas płatności gotówką: {ex.Message}";
        }
        finally
        {
            processingPayment = false;
            StateHasChanged();
        }
    }

    private async Task DownloadBill()
    {
        try
        {
            // Używamy bezpośrednio Http - tokeny są dodawane automatycznie
            var response = await Http.GetAsync($"api/order/{OrderId}/bill");

            if (response.IsSuccessStatusCode)
            {
                var billContent = await response.Content.ReadAsByteArrayAsync();
                var fileName = $"rachunek_zamowienie_{OrderId}.pdf";
                
                // Symulacja pobierania pliku
                await JSRuntime.InvokeVoidAsync("alert", $"Pobieranie rachunku: {fileName}");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Błąd podczas pobierania rachunku.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Błąd: {ex.Message}");
        }
    }

    private void FormatCardNumber(ChangeEventArgs e)
    {
        var input = e.Value?.ToString() ?? "";
        var digitsOnly = new string(input.Where(char.IsDigit).ToArray());
        
        if (digitsOnly.Length <= 16)
        {
            var formatted = "";
            for (int i = 0; i < digitsOnly.Length; i++)
            {
                if (i > 0 && i % 4 == 0) formatted += " ";
                formatted += digitsOnly[i];
            }
            creditCardModel.CardNumber = formatted;
        }
        StateHasChanged(); // Dodane aby odświeżyć wskaźniki walidacji
    }

    private void FormatExpirationDate(ChangeEventArgs e)
    {
        var input = e.Value?.ToString() ?? "";
        var digitsOnly = new string(input.Where(char.IsDigit).ToArray());
    
        if (digitsOnly.Length <= 4)
        {
            var formatted = digitsOnly;
            if (digitsOnly.Length >= 2 && digitsOnly.Length <= 4)
            {
                // Automatycznie dodaj "/" po dwóch cyfrach jeśli użytkownik nie wpisał "/"
                if (digitsOnly.Length > 2 && !input.Contains("/"))
                {
                    formatted = digitsOnly.Substring(0, 2) + "/" + digitsOnly.Substring(2);
                }
            }
            creditCardModel.ExpirationDate = formatted;
        }
        StateHasChanged(); // Dodane aby odświeżyć wskaźniki walidacji
    }

    private void GoToOrder()
    {
        NavigationManager.NavigateTo($"/order/{OrderId}");
    }

    private void GoToHotels()
    {
        NavigationManager.NavigateTo("/hotels");
    }

    public class OrderViewModel
    {
        public int Id { get; set; }
        public string UserId { get; set; } = "";
        public string Status { get; set; } = "";
        public string FirstName { get; set; } = "";
        public string LastName { get; set; } = "";
        public string PhoneNumber { get; set; } = "";
        public string Address { get; set; } = "";
        public string City { get; set; } = "";
        public string Country { get; set; } = "";
        public string Created { get; set; } = "";
        public string Confirmed { get; set; } = "";
        public string Completed { get; set; } = "";
        public string Cancelled { get; set; } = "";
        public decimal TotalPrice { get; set; }
    }

    public class PaymentMethodViewModel
    {
        public string Name { get; set; } = "";
        public string Type { get; set; } = "";
        public bool IsEnabled { get; set; }
    }

    public class CreditCardModel
    {
        [Required(ErrorMessage = "Numer karty jest wymagany")]
        [StringLength(19, MinimumLength = 15, ErrorMessage = "Niepoprawny numer karty")]
        public string CardNumber { get; set; } = "";
        
        [Required(ErrorMessage = "Data ważności jest wymagana")]
        [RegularExpression(@"^(0[1-9]|1[0-2])(\/|\d)\d{1,2}$", ErrorMessage = "Format: MM/YY lub MMYY")]
        public string ExpirationDate { get; set; } = "";
        
        [Required(ErrorMessage = "CVV jest wymagany")]
        [StringLength(4, MinimumLength = 3, ErrorMessage = "CVV musi mieć 3-4 cyfry")]
        public string CVV { get; set; } = "";
    }
    
    public class SessionViewModel
    {
        public string Id { get; set; } = "";
        public string UserName { get; set; } = "";
        public string Email { get; set; } = "";
        public string[] Roles { get; set; } = Array.Empty<string>();
        public string ProfilePicture { get; set; } = "";
        public bool IsEmailConfirmed { get; set; }
    }
}