@page "/hotels-old"
@inject HttpClient Http
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager

<PageTitle>Hotele - System zarządzania hotelem</PageTitle>

<div class="hotels-page">
    <div class="page-header">
        <div class="container">
            <h1 class="display-5 fw-bold">Nasze hotele</h1>
            <p class="lead">Znajdź idealny hotel dopasowany do Twoich potrzeb</p>
        </div>
    </div>

    <div class="container mt-4">
        <div class="row">
            <!-- Filtry -->
            <div class="col-lg-3 mb-4">
                <div class="card border-0 shadow-sm rounded-3">
                    <div class="card-body">
                        <h5 class="card-title mb-3">Filtry</h5>
                        
                        <div class="mb-3">
                            <label for="searchTerm" class="form-label">Wyszukaj</label>
                            <div class="input-group">
                                <input type="text" class="form-control" id="searchTerm" 
                                       placeholder="Nazwa hotelu" @bind="searchTerm" @bind:event="oninput">
                                <button class="btn btn-outline-primary" type="button" @onclick="ApplyFilters">
                                    <i class="bi bi-search"></i>
                                </button>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Gwiazdki</label>
                            <div class="d-flex flex-wrap gap-2">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    int rating = i;
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="star@(i)" 
                                               checked="@IsRatingSelected(rating)" @onchange="e => ToggleRating(rating, (bool)e.Value)">
                                        <label class="form-check-label d-flex align-items-center" for="star@(i)">
                                            @for (int j = 0; j < i; j++)
                                            {
                                                <i class="bi bi-star-fill text-warning me-1"></i>
                                            }
                                        </label>
                                    </div>
                                }
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="country" class="form-label">Kraj</label>
                            <select class="form-select" id="country" @bind="selectedCountry">
                                <option value="">Wszystkie kraje</option>
                                @foreach (var country in countries)
                                {
                                    <option value="@country">@country</option>
                                }
                            </select>
                        </div>
                        
                        <div class="mb-3">
                            <label for="city" class="form-label">Miasto</label>
                            <select class="form-select" id="city" @bind="selectedCity">
                                <option value="">Wszystkie miasta</option>
                                @foreach (var city in cities)
                                {
                                    <option value="@city">@city</option>
                                }
                            </select>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Udogodnienia</label>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="hasPool" @bind="hasPool">
                                <label class="form-check-label" for="hasPool">
                                    <i class="bi bi-water me-2"></i> Basen
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="hasWifi" @bind="hasWifi">
                                <label class="form-check-label" for="hasWifi">
                                    <i class="bi bi-wifi me-2"></i> Wi-Fi
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="hasParking" @bind="hasParking">
                                <label class="form-check-label" for="hasParking">
                                    <i class="bi bi-p-circle me-2"></i> Parking
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="hasRestaurant" @bind="hasRestaurant">
                                <label class="form-check-label" for="hasRestaurant">
                                    <i class="bi bi-cup-hot me-2"></i> Restauracja
                                </label>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="priceRange" class="form-label">Cena (zł/noc): @minPrice zł - @maxPrice zł</label>
                            <div class="d-flex gap-2">
                                <input type="range" class="form-range" id="minPriceRange" 
                                       min="0" max="2000" step="100" @bind="minPrice">
                                <input type="range" class="form-range" id="maxPriceRange" 
                                       min="0" max="2000" step="100" @bind="maxPrice">
                            </div>
                        </div>
                        
                        <div class="d-grid gap-2">
                            <button class="btn btn-primary" @onclick="ApplyFilters">
                                <i class="bi bi-funnel"></i> Zastosuj filtry
                            </button>
                            <button class="btn btn-outline-secondary" @onclick="ClearFilters">
                                <i class="bi bi-x-circle"></i> Wyczyść filtry
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Lista hoteli -->
            <div class="col-lg-9">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <div>
                        <span class="text-muted">Znaleziono @filteredHotels.Count hoteli</span>
                    </div>
                    <div class="d-flex align-items-center">
                        <span class="me-2">Sortuj wg:</span>
                        <select class="form-select form-select-sm" style="width: auto;" @bind="sortOption" @bind:after="ApplyFilters">
                            <option value="nameAsc">Nazwa (A-Z)</option>
                            <option value="nameDesc">Nazwa (Z-A)</option>
                            <option value="ratingDesc">Najwyższa ocena</option>
                            <option value="priceAsc">Cena (od najniższej)</option>
                            <option value="priceDesc">Cena (od najwyższej)</option>
                        </select>
                    </div>
                </div>
                @if (!string.IsNullOrEmpty(hotelsLoadingErrorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        <i class="bi bi-exclamation-triangle-fill me-2"></i> @hotelsLoadingErrorMessage
                    </div>
                }
                else if (isLoading)
                {
                    <div class="text-center py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Ładowanie...</span>
                        </div>
                        <p class="mt-2">Ładowanie hoteli...</p>
                    </div>
                }
                else if (!filteredHotels.Any())
                {
                    <div class="alert alert-info" role="alert">
                        <i class="bi bi-info-circle me-2"></i> Nie znaleziono hoteli odpowiadających podanym kryteriom.
                        <button class="btn btn-link p-0 ms-2" @onclick="ClearFilters">Wyczyść filtry</button>
                    </div>
                }
                else
                {
                    <div class="row g-4">
                        @foreach (var hotel in paginatedHotels)
                        {
                            <div class="col-md-6 col-xl-4">
                                <div class="card hotel-list-card h-100 border-0 shadow-sm">
                                    <div class="position-relative">
                                        <img src="@(string.IsNullOrEmpty(hotel.ImageUrl) ? "images/hotel-placeholder.jpg" : hotel.ImageUrl)" 
                                             class="card-img-top" alt="@hotel.Name">
                                        <div class="hotel-rating-badge">
                                            @for (int i = 0; i < hotel.Rating; i++)
                                            {
                                                <i class="bi bi-star-fill"></i>
                                            }
                                        </div>
                                        @if (hotel.Discount > 0)
                                        {
                                            <div class="hotel-discount-badge">
                                                -@hotel.Discount%
                                            </div>
                                        }
                                    </div>
                                    <div class="card-body d-flex flex-column">
                                        <div class="d-flex justify-content-between mb-2">
                                            <span class="badge bg-light text-dark rounded-pill">
                                                <i class="bi bi-geo-alt"></i> @hotel.City, @hotel.Country
                                            </span>
                                            <span class="badge bg-light text-dark rounded-pill">
                                                <i class="bi bi-door-open"></i> @hotel.AvailableRooms wolne
                                            </span>
                                        </div>
                                        <h5 class="card-title">@hotel.Name</h5>
                                        <p class="card-text text-muted small">@hotel.ShortDescription</p>
                                        
                                        <div class="mt-2 mb-3">
                                            @if (hotel.HasPool)
                                            {
                                                <span class="badge bg-light text-dark me-1" title="Basen"><i class="bi bi-water"></i></span>
                                            }
                                            @if (hotel.HasWifi)
                                            {
                                                <span class="badge bg-light text-dark me-1" title="Wi-Fi"><i class="bi bi-wifi"></i></span>
                                            }
                                            @if (hotel.HasParking)
                                            {
                                                <span class="badge bg-light text-dark me-1" title="Parking"><i class="bi bi-p-circle"></i></span>
                                            }
                                            @if (hotel.HasRestaurant)
                                            {
                                                <span class="badge bg-light text-dark me-1" title="Restauracja"><i class="bi bi-cup-hot"></i></span>
                                            }
                                        </div>
                                        
                                        <div class="mt-auto d-flex justify-content-between align-items-center">
                                            <div class="hotel-price">
                                                @if (hotel.Discount > 0)
                                                {
                                                    <span class="text-decoration-line-through text-muted me-2">@hotel.OriginalPrice zł</span>
                                                    <span class="fw-bold text-danger">@hotel.CurrentPrice zł</span>
                                                }
                                                else
                                                {
                                                    <span class="fw-bold">@hotel.CurrentPrice zł</span>
                                                }
                                                <span class="text-muted small">/noc</span>
                                            </div>
                                            <button class="btn btn-sm btn-primary" @onclick="() => ViewHotelDetails(hotel.Id)">
                                                Zobacz szczegóły
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    
                    <!-- Paginacja -->
                    @if (totalPages > 1)
                    {
                        <nav aria-label="Nawigacja po stronach" class="mt-4">
                            <ul class="pagination justify-content-center">
                                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => GoToPage(currentPage - 1)" aria-label="Poprzednia">
                                        <span aria-hidden="true">&laquo;</span>
                                    </button>
                                </li>
                                
                                @for (int i = 1; i <= totalPages; i++)
                                {
                                    int pageNumber = i;
                                    <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                                        <button class="page-link" @onclick="() => GoToPage(pageNumber)">@pageNumber</button>
                                    </li>
                                }
                                
                                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => GoToPage(currentPage + 1)" aria-label="Następna">
                                        <span aria-hidden="true">&raquo;</span>
                                    </button>
                                </li>
                            </ul>
                        </nav>
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    // Stan filtrowania i sortowania
    private string searchTerm = "";
    private List<int> selectedRatings = new List<int>();
    private string selectedCountry = "";
    private string selectedCity = "";
    private bool hasPool = false;
    private bool hasWifi = false;
    private bool hasParking = false;
    private bool hasRestaurant = false;
    private int minPrice = 0;
    private int maxPrice = 2000;
    private string sortOption = "nameAsc";
    
    // Stan paginacji
    private int currentPage = 1;
    private int pageSize = 6;
    private int totalPages => (int)Math.Ceiling((double)filteredHotels.Count / pageSize);
    
    // Stan danych
    private bool isLoading = true;
    private List<HotelViewModel> allHotels = new List<HotelViewModel>();
    private List<HotelViewModel> filteredHotels = new List<HotelViewModel>();
    private List<string> countries = new List<string>();
    private List<string> cities = new List<string>();
    private string? hotelsLoadingErrorMessage = null;
    
    private IEnumerable<HotelViewModel> paginatedHotels => filteredHotels
        .Skip((currentPage - 1) * pageSize)
        .Take(pageSize);
    
    protected override async Task OnInitializedAsync()
    {
        await LoadHotels();
    }
    
    private async Task LoadHotels()
    {
        try
        {
            isLoading = true;
            hotelsLoadingErrorMessage = null; // Resetuj błąd przy każdej próbie ładowania

            var client = HttpClientFactory.CreateClient("HotelApi");
            var response = await client.GetFromJsonAsync<List<HotelViewModel>>("api/hotel/get-all");
            allHotels = response ?? new List<HotelViewModel>();

            countries = allHotels.Select(h => h.Country).Distinct().OrderBy(c => c).ToList();
            cities = allHotels.Select(h => h.City).Distinct().OrderBy(c => c).ToList();

            ApplyFilters();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading hotels: {ex.Message}");
            // Ustawianie komunikatu błędu dla użytkownika
            hotelsLoadingErrorMessage = "Nie udało się załadować listy hoteli. Spróbuj odświeżyć stronę lub skontaktuj się z pomocą techniczną, jeśli problem będzie się powtarzał.";
            allHotels = new List<HotelViewModel>(); // Zapewnij pustą listę w przypadku błędu
            filteredHotels = new List<HotelViewModel>(); // Również wyczyść przefiltrowane
            countries = new List<string>();
            cities = new List<string>();
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private void ApplyFilters()
    {
        filteredHotels = allHotels.ToList();
        
        // Filtrowanie po nazwie
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredHotels = filteredHotels
                .Where(h => h.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        
        // Filtrowanie po ocenie
        if (selectedRatings.Any())
        {
            filteredHotels = filteredHotels
                .Where(h => selectedRatings.Contains(h.Rating))
                .ToList();
        }
        
        // Filtrowanie po kraju
        if (!string.IsNullOrWhiteSpace(selectedCountry))
        {
            filteredHotels = filteredHotels
                .Where(h => h.Country == selectedCountry)
                .ToList();
        }
        
        // Filtrowanie po mieście
        if (!string.IsNullOrWhiteSpace(selectedCity))
        {
            filteredHotels = filteredHotels
                .Where(h => h.City == selectedCity)
                .ToList();
        }
        
        // Filtrowanie po udogodnieniach
        if (hasPool)
        {
            filteredHotels = filteredHotels.Where(h => h.HasPool).ToList();
        }
        
        if (hasWifi)
        {
            filteredHotels = filteredHotels.Where(h => h.HasWifi).ToList();
        }
        
        if (hasParking)
        {
            filteredHotels = filteredHotels.Where(h => h.HasParking).ToList();
        }
        
        if (hasRestaurant)
        {
            filteredHotels = filteredHotels.Where(h => h.HasRestaurant).ToList();
        }
        
        // Filtrowanie po cenie
        filteredHotels = filteredHotels
            .Where(h => h.CurrentPrice >= minPrice && h.CurrentPrice <= maxPrice)
            .ToList();
        
        // Sortowanie
        filteredHotels = sortOption switch
        {
            "nameAsc" => filteredHotels.OrderBy(h => h.Name).ToList(),
            "nameDesc" => filteredHotels.OrderByDescending(h => h.Name).ToList(),
            "ratingDesc" => filteredHotels.OrderByDescending(h => h.Rating).ToList(),
            "priceAsc" => filteredHotels.OrderBy(h => h.CurrentPrice).ToList(),
            "priceDesc" => filteredHotels.OrderByDescending(h => h.CurrentPrice).ToList(),
            _ => filteredHotels
        };
        
        // Reset paginacji
        currentPage = 1;
    }
    
    private void ClearFilters()
    {
        searchTerm = "";
        selectedRatings.Clear();
        selectedCountry = "";
        selectedCity = "";
        hasPool = false;
        hasWifi = false;
        hasParking = false;
        hasRestaurant = false;
        minPrice = 0;
        maxPrice = 2000;
        sortOption = "nameAsc";
        
        ApplyFilters();
    }
    
    private bool IsRatingSelected(int rating)
    {
        return selectedRatings.Contains(rating);
    }
    
    private void ToggleRating(int rating, bool isSelected)
    {
        if (isSelected)
        {
            if (!selectedRatings.Contains(rating))
            {
                selectedRatings.Add(rating);
            }
        }
        else
        {
            selectedRatings.Remove(rating);
        }
        
        ApplyFilters();
    }
    
    private void GoToPage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
        }
    }
    
    private void ViewHotelDetails(int hotelId)
    {
        NavigationManager.NavigateTo($"/hotel/{hotelId}");
    }
    
    // Generator przykładowych danych
    private List<HotelViewModel> GenerateSampleHotels()
    {
        var hotels = new List<HotelViewModel>
        {
            new HotelViewModel
            {
                Id = 1,
                Name = "Grand Hotel",
                Country = "Polska",
                City = "Warszawa",
                ShortDescription = "Luksusowy hotel w centrum Warszawy z przepięknym widokiem na miasto.",
                Rating = 5,
                CurrentPrice = 800,
                OriginalPrice = 800,
                Discount = 0,
                AvailableRooms = 5,
                HasPool = true,
                HasWifi = true,
                HasParking = true,
                HasRestaurant = true,
                ImageUrl = "images/hotel1.jpg"
            },
            new HotelViewModel
            {
                Id = 2,
                Name = "Royal Palace",
                Country = "Polska",
                City = "Kraków",
                ShortDescription = "Elegancki hotel w zabytkowym budynku na Starym Mieście w Krakowie.",
                Rating = 4,
                CurrentPrice = 570,
                OriginalPrice = 650,
                Discount = 12,
                AvailableRooms = 3,
                HasPool = false,
                HasWifi = true,
                HasParking = true,
                HasRestaurant = true,
                ImageUrl = "images/hotel2.jpg"
            },
            new HotelViewModel
            {
                Id = 3,
                Name = "Sea View Resort",
                Country = "Polska",
                City = "Gdańsk",
                ShortDescription = "Wakacyjny resort z bezpośrednim dostępem do plaży i widokiem na Bałtyk.",
                Rating = 5,
                CurrentPrice = 940,
                OriginalPrice = 1200,
                Discount = 22,
                AvailableRooms = 7,
                HasPool = true,
                HasWifi = true,
                HasParking = true,
                HasRestaurant = true,
                ImageUrl = "images/hotel3.jpg"
            },
            new HotelViewModel
            {
                Id = 4,
                Name = "Mountain Lodge",
                Country = "Polska",
                City = "Zakopane",
                ShortDescription = "Przytulny hotel górski idealny zarówno na letnie wycieczki jak i zimowe szaleństwo.",
                Rating = 4,
                CurrentPrice = 450,
                OriginalPrice = 450,
                Discount = 0,
                AvailableRooms = 12,
                HasPool = false,
                HasWifi = true,
                HasParking = true,
                HasRestaurant = true,
                ImageUrl = "images/hotel4.jpg"
            },
            new HotelViewModel
            {
                Id = 5,
                Name = "City Apartments",
                Country = "Polska",
                City = "Wrocław",
                ShortDescription = "Nowoczesne apartamenty w centrum Wrocławia, idealne dla podróży biznesowych.",
                Rating = 3,
                CurrentPrice = 320,
                OriginalPrice = 320,
                Discount = 0,
                AvailableRooms = 8,
                HasPool = false,
                HasWifi = true,
                HasParking = false,
                HasRestaurant = false,
                ImageUrl = "images/hotel5.jpg"
            },
            new HotelViewModel
            {
                Id = 6,
                Name = "Riverside Hotel",
                Country = "Polska",
                City = "Toruń",
                ShortDescription = "Hotel z widokiem na rzekę Wisłę i piękną panoramę Starego Miasta w Toruniu.",
                Rating = 4,
                CurrentPrice = 390,
                OriginalPrice = 390,
                Discount = 0,
                AvailableRooms = 4,
                HasPool = false,
                HasWifi = true,
                HasParking = true,
                HasRestaurant = true,
                ImageUrl = "images/hotel6.jpg"
            },
            new HotelViewModel
            {
                Id = 7,
                Name = "Business Hotel",
                Country = "Polska",
                City = "Poznań",
                ShortDescription = "Profesjonalny hotel dla biznesmenów blisko centrum konferencyjnego.",
                Rating = 4,
                CurrentPrice = 420,
                OriginalPrice = 480,
                Discount = 12,
                AvailableRooms = 6,
                HasPool = false,
                HasWifi = true,
                HasParking = true,
                HasRestaurant = true,
                ImageUrl = "images/hotel7.jpg"
            },
            new HotelViewModel
            {
                Id = 8,
                Name = "Green Park Hotel",
                Country = "Polska",
                City = "Łódź",
                ShortDescription = "Przyjazny dla środowiska hotel położony w dużym parku miejskim.",
                Rating = 3,
                CurrentPrice = 280,
                OriginalPrice = 280,
                Discount = 0,
                AvailableRooms = 10,
                HasPool = false,
                HasWifi = true,
                HasParking = true,
                HasRestaurant = false,
                ImageUrl = "images/hotel8.jpg"
            },
            new HotelViewModel
            {
                Id = 9,
                Name = "Boutique Hotel",
                Country = "Polska",
                City = "Kraków",
                ShortDescription = "Kameralny butikowy hotel z indywidualnie zaprojektowanymi pokojami.",
                Rating = 5,
                CurrentPrice = 620,
                OriginalPrice = 750,
                Discount = 17,
                AvailableRooms = 3,
                HasPool = false,
                HasWifi = true,
                HasParking = false,
                HasRestaurant = true,
                ImageUrl = "images/hotel9.jpg"
            },
            new HotelViewModel
            {
                Id = 10,
                Name = "Old Town Apartments",
                Country = "Polska",
                City = "Gdańsk",
                ShortDescription = "Stylowe apartamenty w samym sercu Starego Miasta w Gdańsku.",
                Rating = 4,
                CurrentPrice = 360,
                OriginalPrice = 360,
                Discount = 0,
                AvailableRooms = 5,
                HasPool = false,
                HasWifi = true,
                HasParking = false,
                HasRestaurant = false,
                ImageUrl = "images/hotel10.jpg"
            },
            new HotelViewModel
            {
                Id = 11,
                Name = "Sun Resort",
                Country = "Chorwacja",
                City = "Split",
                ShortDescription = "Słoneczny resort z prywatną plażą i wspaniałymi widokami na Adriatyk.",
                Rating = 5,
                CurrentPrice = 1200,
                OriginalPrice = 1500,
                Discount = 20,
                AvailableRooms = 8,
                HasPool = true,
                HasWifi = true,
                HasParking = true,
                HasRestaurant = true,
                ImageUrl = "images/hotel11.jpg"
            },
            new HotelViewModel
            {
                Id = 12,
                Name = "Alpine Lodge",
                Country = "Austria",
                City = "Innsbruck",
                ShortDescription = "Tradycyjny alpejski hotel idealny dla miłośników sportów zimowych.",
                Rating = 4,
                CurrentPrice = 740,
                OriginalPrice = 740,
                Discount = 0,
                AvailableRooms = 6,
                HasPool = true,
                HasWifi = true,
                HasParking = true,
                HasRestaurant = true,
                ImageUrl = "images/hotel12.jpg"
            }
        };
        
        return hotels;
    }
    
    public class HotelViewModel
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Country { get; set; }
        public string City { get; set; }
        public string ShortDescription { get; set; }
        public int Rating { get; set; }
        public decimal CurrentPrice { get; set; }
        public decimal OriginalPrice { get; set; }
        public int Discount { get; set; }
        public int AvailableRooms { get; set; }
        public bool HasPool { get; set; }
        public bool HasWifi { get; set; }
        public bool HasParking { get; set; }
        public bool HasRestaurant { get; set; }
        public string ImageUrl { get; set; }
    }
}