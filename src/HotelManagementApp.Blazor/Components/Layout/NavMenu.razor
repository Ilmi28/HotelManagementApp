@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Json
@inject NavigationManager NavigationManager
@inject HotelManagementApp.Blazor.Auth.ITokenService TokenService
@inject AuthenticationStateProvider AuthStateProvider
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject IEventBusService EventBus
@implements IDisposable

<nav class="navbar navbar-expand-lg navbar-light bg-white shadow-sm">
    <div class="container">
        <a class="navbar-brand" href="">
            <img src="images/hotel-logo.png" alt="Hotel Logo" width="30" height="30" class="d-inline-block align-text-top">
            Hotel Management
        </a>
        
        <button class="navbar-toggler" type="button" @onclick="ToggleNavMenu" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        
        <div class="@NavMenuCssClass navbar-collapse" id="navbarNav">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item">
                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                        <i class="bi bi-house"></i> Strona główna
                    </NavLink>
                </li>
                
                <li class="nav-item">
                    <NavLink class="nav-link" href="hotels">
                        <i class="bi bi-building"></i> Hotele
                    </NavLink>
                </li>
                
                <!-- Panel pracownika (Staff+) -->
                <AuthorizeView Roles="Staff,Manager,Admin">
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" id="staffDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="bi bi-person-badge"></i> Panel pracownika
                        </a>
                        <ul class="dropdown-menu" aria-labelledby="staffDropdown">
                            <li>
                                <NavLink class="dropdown-item" href="staff-dashboard">
                                    <i class="bi bi-speedometer"></i> Dashboard
                                </NavLink>
                            </li>
                            <li><hr class="dropdown-divider"></li>
                            <li><h6 class="dropdown-header">Obsługa klientów</h6></li>
                            <li>
                                <NavLink class="dropdown-item" href="order-management">
                                    <i class="bi bi-calendar-check"></i> Zamówienia
                                </NavLink>
                            </li>
                            <li>
                                <NavLink class="dropdown-item" href="guest-management">
                                    <i class="bi bi-people"></i> Goście
                                </NavLink>
                            </li>
                            <li>
                                <NavLink class="dropdown-item" href="payment-management">
                                    <i class="bi bi-credit-card"></i> Płatności
                                </NavLink>
                            </li>
                        </ul>
                    </li>
                </AuthorizeView>
                
                <!-- Panel zarządzania (Manager+) -->
                <AuthorizeView Roles="Manager,Admin">
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" id="managementDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="bi bi-briefcase"></i> Zarządzanie
                        </a>
                        <ul class="dropdown-menu" aria-labelledby="managementDropdown">
                            <li>
                                <NavLink class="dropdown-item" href="manager-dashboard">
                                    <i class="bi bi-graph-up"></i> Dashboard menedżera
                                </NavLink>
                            </li>
                            <li><hr class="dropdown-divider"></li>
                            <li><h6 class="dropdown-header">Zasoby hotelowe</h6></li>
                            <li>
                                <NavLink class="dropdown-item" href="hotel-management">
                                    <i class="bi bi-building"></i> Hotele
                                </NavLink>
                            </li>
                            <li>
                                <NavLink class="dropdown-item" href="room-management">
                                    <i class="bi bi-door-open"></i> Pokoje
                                </NavLink>
                            </li>
                            <li>
                                <NavLink class="dropdown-item" href="service-management">
                                    <i class="bi bi-list-check"></i> Usługi
                                </NavLink>
                            </li>
                            <li>
                                <NavLink class="dropdown-item" href="parking-management">
                                    <i class="bi bi-p-square"></i> Parkingi
                                </NavLink>
                            </li>
                            <li><hr class="dropdown-divider"></li>
                            <li><h6 class="dropdown-header">Marketing i personel</h6></li>
                            <li>
                                <NavLink class="dropdown-item" href="discount-management">
                                    <i class="bi bi-percent"></i> Zniżki
                                </NavLink>
                            </li>
                            <li>
                                <NavLink class="dropdown-item" href="loyalty-management">
                                    <i class="bi bi-award"></i> Program lojalnościowy
                                </NavLink>
                            </li>
                            <li>
                                <NavLink class="dropdown-item" href="staff-management">
                                    <i class="bi bi-people-fill"></i> Zarządzanie personelem
                                </NavLink>
                            </li>
                            <li>
                                <NavLink class="dropdown-item" href="guest-status-management">
                                    <i class="bi bi-person-lines-fill"></i> Statusy gości
                                </NavLink>
                            </li>
                        </ul>
                    </li>
                </AuthorizeView>
                
                <!-- Panel administratora -->
                <AuthorizeView Roles="Admin">
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" id="adminDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="bi bi-shield-lock"></i> Administracja
                        </a>
                        <ul class="dropdown-menu" aria-labelledby="adminDropdown">
                            <li>
                                <NavLink class="dropdown-item" href="admin-dashboard">
                                    <i class="bi bi-speedometer2"></i> Dashboard administratora
                                </NavLink>
                            </li>
                            <li><hr class="dropdown-divider"></li>
                            <li><h6 class="dropdown-header">Zarządzanie kontami</h6></li>
                            <li>
                                <NavLink class="dropdown-item" href="admin/users">
                                    <i class="bi bi-people"></i> Wszyscy użytkownicy
                                </NavLink>
                            </li>
                            <li>
                                <NavLink class="dropdown-item" href="admin/managers">
                                    <i class="bi bi-person-badge"></i> Menedżerowie
                                </NavLink>
                            </li>
                        </ul>
                    </li>
                </AuthorizeView>
            </ul>
            
            <AuthorizeView>
                <Authorized>
                    <div class="d-flex align-items-center">
                        <!-- Punkty lojalnościowe -->
                        @if (loyaltyPoints.HasValue)
                        {
                            <div class="me-3">
                                <NavLink href="loyalty-program" class="btn btn-outline-warning btn-sm">
                                    <i class="bi bi-star-fill"></i> @loyaltyPoints pkt
                                </NavLink>
                            </div>
                        }
                        
                        <div class="dropdown">
                            <a class="nav-link dropdown-toggle d-flex align-items-center" href="#" id="userDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                @if (!string.IsNullOrEmpty(userSession?.ProfilePicture))
                                {
                                    <img src="@userSession.ProfilePicture" alt="User Avatar" class="rounded-circle me-2" width="32" height="32" 
                                         style="object-fit: cover;">
                                }
                                else
                                {
                                    <div class="bg-secondary rounded-circle d-flex align-items-center justify-content-center text-white me-2" 
                                         style="width: 32px; height: 32px; font-size: 14px;">
                                        <i class="bi bi-person"></i>
                                    </div>
                                }
                                <span>@(userSession?.UserName ?? context.User.Identity?.Name)</span>
                            </a>
                            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userDropdown">
                                <li><h6 class="dropdown-header">Moje konto</h6></li>
                                <li>
                                    <NavLink class="dropdown-item" href="account">
                                        <i class="bi bi-person-circle"></i> Ustawienia konta
                                    </NavLink>
                                </li>
                                <li><hr class="dropdown-divider"></li>
                                <li><h6 class="dropdown-header">Moja aktywność</h6></li>
                                <li>
                                    <NavLink class="dropdown-item" href="my-reservations">
                                        <i class="bi bi-journal-text"></i> Moje rezerwacje
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="dropdown-item" href="my-reviews">
                                        <i class="bi bi-chat-quote"></i> Moje opinie
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="dropdown-item" href="loyalty-program">
                                        <i class="bi bi-star"></i> Program lojalnościowy
                                    </NavLink>
                                </li>
                                <li><hr class="dropdown-divider"></li>
                                <li>
                                    <button class="dropdown-item text-danger" @onclick="BeginLogout">
                                        <i class="bi bi-box-arrow-right"></i> Wyloguj się
                                    </button>
                                </li>
                            </ul>
                        </div>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <div class="d-flex">
                        <NavLink class="btn btn-outline-primary me-2" href="login">
                            <i class="bi bi-box-arrow-in-right"></i> Zaloguj
                        </NavLink>
                        <NavLink class="btn btn-primary" href="register">
                            <i class="bi bi-person-plus"></i> Zarejestruj
                        </NavLink>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>
</nav>

@code {
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    private UserSession? userSession;
    private int? loyaltyPoints;

    protected override async Task OnInitializedAsync()
    {
        // NAJPIERW synchronizuj tokeny z localStorage
        await SyncTokensFromLocalStorage();
        // TYMCZASOWE DEBUGOWANIE
        await DebugTokenStatus();
        
        await LoadUserSession();
        await LoadLoyaltyPoints();
        
        // Subskrybuj event aktualizacji profilu
        EventBus.ProfileUpdated += OnProfileUpdated;
    }

    // Tymczasowa metoda do debugowania
    private async Task DebugTokenStatus()
    {
        try
        {
            var token = await TokenService.GetAccessTokenAsync();
            var refreshToken = await TokenService.GetRefreshTokenAsync();
            
            Console.WriteLine($"=== DEBUG TOKEN STATUS ===");
            Console.WriteLine($"Access Token: {(!string.IsNullOrEmpty(token) ? "ISTNIEJE" : "BRAK")}");
            Console.WriteLine($"Refresh Token: {(!string.IsNullOrEmpty(refreshToken) ? "ISTNIEJE" : "BRAK")}");
            
            if (!string.IsNullOrEmpty(token))
            {
                Console.WriteLine($"Token length: {token.Length}");
                Console.WriteLine($"Token preview: {token.Substring(0, Math.Min(50, token.Length))}...");
                
                // Sprawdź czy token jest prawidłowy
                var tokenHandler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
                if (tokenHandler.CanReadToken(token))
                {
                    var jwtToken = tokenHandler.ReadJwtToken(token);
                    Console.WriteLine($"Token expires: {jwtToken.ValidTo} UTC");
                    Console.WriteLine($"Current time: {DateTime.UtcNow} UTC");
                    Console.WriteLine($"Is expired: {jwtToken.ValidTo <= DateTime.UtcNow}");
                }
                else
                {
                    Console.WriteLine("Token format is invalid!");
                }
            }
            
            Console.WriteLine($"=== END DEBUG ===");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Debug error: {ex.Message}");
        }
    }
    
    private async void OnProfileUpdated()
    {
        await LoadUserSession();
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        EventBus.ProfileUpdated -= OnProfileUpdated;
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task BeginLogout()
    {
        await TokenService.RemoveTokensAsync();
        ((HotelManagementApp.Blazor.Auth.CustomAuthStateProvider)AuthStateProvider).NotifyAuthenticationStateChanged();
        NavigationManager.NavigateTo("/");
    }

    private async Task LoadUserSession()
    {
        try
        {
            // Używamy HttpClient bezpośrednio - token jest dodawany automatycznie
            var response = await HttpClient.GetAsync("api/account/session");
            
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                userSession = JsonSerializer.Deserialize<UserSession>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas pobierania sesji użytkownika: {ex.Message}");
        }
    }

    private async Task LoadLoyaltyPoints()
    {
        try
        {
            if (userSession?.Id != null)
            {
                // Używamy HttpClient bezpośrednio - token jest dodawany automatycznie
                var response = await HttpClient.GetAsync($"api/loyalty-points/guests/{userSession.Id}/points");
                
                if (response.IsSuccessStatusCode)
                {
                    var json = await response.Content.ReadAsStringAsync();
                    var pointsData = JsonSerializer.Deserialize<LoyaltyPointsResponse>(json, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });
                    loyaltyPoints = pointsData?.Points ?? 0;
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas pobierania punktów lojalnościowych: {ex.Message}");
        }
    }

    public class UserSession
    {
        public string Id { get; set; } = string.Empty;
        public string UserName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string[] Roles { get; set; } = Array.Empty<string>();
        public string ProfilePicture { get; set; } = string.Empty;
        public bool IsEmailConfirmed { get; set; }
    }

    public class LoyaltyPointsResponse
    {
        public int Points { get; set; }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Synchronizuj tokeny z localStorage do pamięci
            await SyncTokensFromLocalStorage();
        }
        await base.OnAfterRenderAsync(firstRender);
    }
    
    private async Task SyncTokensFromLocalStorage()
    {
        try
        {
            // Pobierz tokeny z localStorage i zsynchronizuj z pamięcią
            var accessToken = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "authToken");
            var refreshToken = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "refreshToken");
            
            if (!string.IsNullOrEmpty(accessToken) && !string.IsNullOrEmpty(refreshToken))
            {
                Console.WriteLine("Synchronizing tokens from localStorage to memory...");
                await TokenService.SetTokensAsync(accessToken, refreshToken);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error syncing tokens: {ex.Message}");
        }
    }
}